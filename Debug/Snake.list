
Snake.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002858  08000130  08000130  00001130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000130  08002988  08002988  00003988  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002ab8  08002ab8  00004080  2**0
                  CONTENTS
  4 .ARM          00000000  08002ab8  08002ab8  00004080  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002ab8  08002ab8  00004080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002ab8  08002ab8  00003ab8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002abc  08002abc  00003abc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000080  20000000  08002ac0  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000244  20000080  08002b40  00004080  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002c4  08002b40  000042c4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00004080  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001448  00000000  00000000  000040a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000895  00000000  00000000  000054f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000280  00000000  00000000  00005d88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000001c1  00000000  00000000  00006008  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000017c8  00000000  00000000  000061c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00001f45  00000000  00000000  00007991  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00008de8  00000000  00000000  000098d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000126be  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000013a8  00000000  00000000  00012704  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000002e  00000000  00000000  00013aac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	@ (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	@ (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	@ (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000080 	.word	0x20000080
 800014c:	00000000 	.word	0x00000000
 8000150:	08002970 	.word	0x08002970

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	@ (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	@ (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	@ (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000084 	.word	0x20000084
 800016c:	08002970 	.word	0x08002970

08000170 <__aeabi_frsub>:
 8000170:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000174:	e002      	b.n	800017c <__addsf3>
 8000176:	bf00      	nop

08000178 <__aeabi_fsub>:
 8000178:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

0800017c <__addsf3>:
 800017c:	0042      	lsls	r2, r0, #1
 800017e:	bf1f      	itttt	ne
 8000180:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000184:	ea92 0f03 	teqne	r2, r3
 8000188:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 800018c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000190:	d06a      	beq.n	8000268 <__addsf3+0xec>
 8000192:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000196:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 800019a:	bfc1      	itttt	gt
 800019c:	18d2      	addgt	r2, r2, r3
 800019e:	4041      	eorgt	r1, r0
 80001a0:	4048      	eorgt	r0, r1
 80001a2:	4041      	eorgt	r1, r0
 80001a4:	bfb8      	it	lt
 80001a6:	425b      	neglt	r3, r3
 80001a8:	2b19      	cmp	r3, #25
 80001aa:	bf88      	it	hi
 80001ac:	4770      	bxhi	lr
 80001ae:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 80001b2:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80001b6:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 80001ba:	bf18      	it	ne
 80001bc:	4240      	negne	r0, r0
 80001be:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c2:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 80001c6:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 80001ca:	bf18      	it	ne
 80001cc:	4249      	negne	r1, r1
 80001ce:	ea92 0f03 	teq	r2, r3
 80001d2:	d03f      	beq.n	8000254 <__addsf3+0xd8>
 80001d4:	f1a2 0201 	sub.w	r2, r2, #1
 80001d8:	fa41 fc03 	asr.w	ip, r1, r3
 80001dc:	eb10 000c 	adds.w	r0, r0, ip
 80001e0:	f1c3 0320 	rsb	r3, r3, #32
 80001e4:	fa01 f103 	lsl.w	r1, r1, r3
 80001e8:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 80001ec:	d502      	bpl.n	80001f4 <__addsf3+0x78>
 80001ee:	4249      	negs	r1, r1
 80001f0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80001f4:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 80001f8:	d313      	bcc.n	8000222 <__addsf3+0xa6>
 80001fa:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 80001fe:	d306      	bcc.n	800020e <__addsf3+0x92>
 8000200:	0840      	lsrs	r0, r0, #1
 8000202:	ea4f 0131 	mov.w	r1, r1, rrx
 8000206:	f102 0201 	add.w	r2, r2, #1
 800020a:	2afe      	cmp	r2, #254	@ 0xfe
 800020c:	d251      	bcs.n	80002b2 <__addsf3+0x136>
 800020e:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000212:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000216:	bf08      	it	eq
 8000218:	f020 0001 	biceq.w	r0, r0, #1
 800021c:	ea40 0003 	orr.w	r0, r0, r3
 8000220:	4770      	bx	lr
 8000222:	0049      	lsls	r1, r1, #1
 8000224:	eb40 0000 	adc.w	r0, r0, r0
 8000228:	3a01      	subs	r2, #1
 800022a:	bf28      	it	cs
 800022c:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000230:	d2ed      	bcs.n	800020e <__addsf3+0x92>
 8000232:	fab0 fc80 	clz	ip, r0
 8000236:	f1ac 0c08 	sub.w	ip, ip, #8
 800023a:	ebb2 020c 	subs.w	r2, r2, ip
 800023e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000242:	bfaa      	itet	ge
 8000244:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000248:	4252      	neglt	r2, r2
 800024a:	4318      	orrge	r0, r3
 800024c:	bfbc      	itt	lt
 800024e:	40d0      	lsrlt	r0, r2
 8000250:	4318      	orrlt	r0, r3
 8000252:	4770      	bx	lr
 8000254:	f092 0f00 	teq	r2, #0
 8000258:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 800025c:	bf06      	itte	eq
 800025e:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000262:	3201      	addeq	r2, #1
 8000264:	3b01      	subne	r3, #1
 8000266:	e7b5      	b.n	80001d4 <__addsf3+0x58>
 8000268:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800026c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000270:	bf18      	it	ne
 8000272:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000276:	d021      	beq.n	80002bc <__addsf3+0x140>
 8000278:	ea92 0f03 	teq	r2, r3
 800027c:	d004      	beq.n	8000288 <__addsf3+0x10c>
 800027e:	f092 0f00 	teq	r2, #0
 8000282:	bf08      	it	eq
 8000284:	4608      	moveq	r0, r1
 8000286:	4770      	bx	lr
 8000288:	ea90 0f01 	teq	r0, r1
 800028c:	bf1c      	itt	ne
 800028e:	2000      	movne	r0, #0
 8000290:	4770      	bxne	lr
 8000292:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000296:	d104      	bne.n	80002a2 <__addsf3+0x126>
 8000298:	0040      	lsls	r0, r0, #1
 800029a:	bf28      	it	cs
 800029c:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 80002a0:	4770      	bx	lr
 80002a2:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 80002a6:	bf3c      	itt	cc
 80002a8:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 80002ac:	4770      	bxcc	lr
 80002ae:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 80002b2:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 80002b6:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80002ba:	4770      	bx	lr
 80002bc:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80002c0:	bf16      	itet	ne
 80002c2:	4608      	movne	r0, r1
 80002c4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002c8:	4601      	movne	r1, r0
 80002ca:	0242      	lsls	r2, r0, #9
 80002cc:	bf06      	itte	eq
 80002ce:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002d2:	ea90 0f01 	teqeq	r0, r1
 80002d6:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 80002da:	4770      	bx	lr

080002dc <__aeabi_ui2f>:
 80002dc:	f04f 0300 	mov.w	r3, #0
 80002e0:	e004      	b.n	80002ec <__aeabi_i2f+0x8>
 80002e2:	bf00      	nop

080002e4 <__aeabi_i2f>:
 80002e4:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 80002e8:	bf48      	it	mi
 80002ea:	4240      	negmi	r0, r0
 80002ec:	ea5f 0c00 	movs.w	ip, r0
 80002f0:	bf08      	it	eq
 80002f2:	4770      	bxeq	lr
 80002f4:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 80002f8:	4601      	mov	r1, r0
 80002fa:	f04f 0000 	mov.w	r0, #0
 80002fe:	e01c      	b.n	800033a <__aeabi_l2f+0x2a>

08000300 <__aeabi_ul2f>:
 8000300:	ea50 0201 	orrs.w	r2, r0, r1
 8000304:	bf08      	it	eq
 8000306:	4770      	bxeq	lr
 8000308:	f04f 0300 	mov.w	r3, #0
 800030c:	e00a      	b.n	8000324 <__aeabi_l2f+0x14>
 800030e:	bf00      	nop

08000310 <__aeabi_l2f>:
 8000310:	ea50 0201 	orrs.w	r2, r0, r1
 8000314:	bf08      	it	eq
 8000316:	4770      	bxeq	lr
 8000318:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 800031c:	d502      	bpl.n	8000324 <__aeabi_l2f+0x14>
 800031e:	4240      	negs	r0, r0
 8000320:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000324:	ea5f 0c01 	movs.w	ip, r1
 8000328:	bf02      	ittt	eq
 800032a:	4684      	moveq	ip, r0
 800032c:	4601      	moveq	r1, r0
 800032e:	2000      	moveq	r0, #0
 8000330:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000334:	bf08      	it	eq
 8000336:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 800033a:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 800033e:	fabc f28c 	clz	r2, ip
 8000342:	3a08      	subs	r2, #8
 8000344:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000348:	db10      	blt.n	800036c <__aeabi_l2f+0x5c>
 800034a:	fa01 fc02 	lsl.w	ip, r1, r2
 800034e:	4463      	add	r3, ip
 8000350:	fa00 fc02 	lsl.w	ip, r0, r2
 8000354:	f1c2 0220 	rsb	r2, r2, #32
 8000358:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800035c:	fa20 f202 	lsr.w	r2, r0, r2
 8000360:	eb43 0002 	adc.w	r0, r3, r2
 8000364:	bf08      	it	eq
 8000366:	f020 0001 	biceq.w	r0, r0, #1
 800036a:	4770      	bx	lr
 800036c:	f102 0220 	add.w	r2, r2, #32
 8000370:	fa01 fc02 	lsl.w	ip, r1, r2
 8000374:	f1c2 0220 	rsb	r2, r2, #32
 8000378:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 800037c:	fa21 f202 	lsr.w	r2, r1, r2
 8000380:	eb43 0002 	adc.w	r0, r3, r2
 8000384:	bf08      	it	eq
 8000386:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800038a:	4770      	bx	lr

0800038c <__aeabi_fmul>:
 800038c:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000390:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000394:	bf1e      	ittt	ne
 8000396:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800039a:	ea92 0f0c 	teqne	r2, ip
 800039e:	ea93 0f0c 	teqne	r3, ip
 80003a2:	d06f      	beq.n	8000484 <__aeabi_fmul+0xf8>
 80003a4:	441a      	add	r2, r3
 80003a6:	ea80 0c01 	eor.w	ip, r0, r1
 80003aa:	0240      	lsls	r0, r0, #9
 80003ac:	bf18      	it	ne
 80003ae:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80003b2:	d01e      	beq.n	80003f2 <__aeabi_fmul+0x66>
 80003b4:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80003b8:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80003bc:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80003c0:	fba0 3101 	umull	r3, r1, r0, r1
 80003c4:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 80003c8:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 80003cc:	bf3e      	ittt	cc
 80003ce:	0049      	lslcc	r1, r1, #1
 80003d0:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80003d4:	005b      	lslcc	r3, r3, #1
 80003d6:	ea40 0001 	orr.w	r0, r0, r1
 80003da:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 80003de:	2afd      	cmp	r2, #253	@ 0xfd
 80003e0:	d81d      	bhi.n	800041e <__aeabi_fmul+0x92>
 80003e2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80003e6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80003ea:	bf08      	it	eq
 80003ec:	f020 0001 	biceq.w	r0, r0, #1
 80003f0:	4770      	bx	lr
 80003f2:	f090 0f00 	teq	r0, #0
 80003f6:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 80003fa:	bf08      	it	eq
 80003fc:	0249      	lsleq	r1, r1, #9
 80003fe:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000402:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000406:	3a7f      	subs	r2, #127	@ 0x7f
 8000408:	bfc2      	ittt	gt
 800040a:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 800040e:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000412:	4770      	bxgt	lr
 8000414:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000418:	f04f 0300 	mov.w	r3, #0
 800041c:	3a01      	subs	r2, #1
 800041e:	dc5d      	bgt.n	80004dc <__aeabi_fmul+0x150>
 8000420:	f112 0f19 	cmn.w	r2, #25
 8000424:	bfdc      	itt	le
 8000426:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 800042a:	4770      	bxle	lr
 800042c:	f1c2 0200 	rsb	r2, r2, #0
 8000430:	0041      	lsls	r1, r0, #1
 8000432:	fa21 f102 	lsr.w	r1, r1, r2
 8000436:	f1c2 0220 	rsb	r2, r2, #32
 800043a:	fa00 fc02 	lsl.w	ip, r0, r2
 800043e:	ea5f 0031 	movs.w	r0, r1, rrx
 8000442:	f140 0000 	adc.w	r0, r0, #0
 8000446:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800044a:	bf08      	it	eq
 800044c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000450:	4770      	bx	lr
 8000452:	f092 0f00 	teq	r2, #0
 8000456:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 800045a:	bf02      	ittt	eq
 800045c:	0040      	lsleq	r0, r0, #1
 800045e:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000462:	3a01      	subeq	r2, #1
 8000464:	d0f9      	beq.n	800045a <__aeabi_fmul+0xce>
 8000466:	ea40 000c 	orr.w	r0, r0, ip
 800046a:	f093 0f00 	teq	r3, #0
 800046e:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000472:	bf02      	ittt	eq
 8000474:	0049      	lsleq	r1, r1, #1
 8000476:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 800047a:	3b01      	subeq	r3, #1
 800047c:	d0f9      	beq.n	8000472 <__aeabi_fmul+0xe6>
 800047e:	ea41 010c 	orr.w	r1, r1, ip
 8000482:	e78f      	b.n	80003a4 <__aeabi_fmul+0x18>
 8000484:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000488:	ea92 0f0c 	teq	r2, ip
 800048c:	bf18      	it	ne
 800048e:	ea93 0f0c 	teqne	r3, ip
 8000492:	d00a      	beq.n	80004aa <__aeabi_fmul+0x11e>
 8000494:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000498:	bf18      	it	ne
 800049a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 800049e:	d1d8      	bne.n	8000452 <__aeabi_fmul+0xc6>
 80004a0:	ea80 0001 	eor.w	r0, r0, r1
 80004a4:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 80004a8:	4770      	bx	lr
 80004aa:	f090 0f00 	teq	r0, #0
 80004ae:	bf17      	itett	ne
 80004b0:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 80004b4:	4608      	moveq	r0, r1
 80004b6:	f091 0f00 	teqne	r1, #0
 80004ba:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 80004be:	d014      	beq.n	80004ea <__aeabi_fmul+0x15e>
 80004c0:	ea92 0f0c 	teq	r2, ip
 80004c4:	d101      	bne.n	80004ca <__aeabi_fmul+0x13e>
 80004c6:	0242      	lsls	r2, r0, #9
 80004c8:	d10f      	bne.n	80004ea <__aeabi_fmul+0x15e>
 80004ca:	ea93 0f0c 	teq	r3, ip
 80004ce:	d103      	bne.n	80004d8 <__aeabi_fmul+0x14c>
 80004d0:	024b      	lsls	r3, r1, #9
 80004d2:	bf18      	it	ne
 80004d4:	4608      	movne	r0, r1
 80004d6:	d108      	bne.n	80004ea <__aeabi_fmul+0x15e>
 80004d8:	ea80 0001 	eor.w	r0, r0, r1
 80004dc:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 80004e0:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80004e4:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80004e8:	4770      	bx	lr
 80004ea:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80004ee:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 80004f2:	4770      	bx	lr

080004f4 <__aeabi_fdiv>:
 80004f4:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004f8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80004fc:	bf1e      	ittt	ne
 80004fe:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000502:	ea92 0f0c 	teqne	r2, ip
 8000506:	ea93 0f0c 	teqne	r3, ip
 800050a:	d069      	beq.n	80005e0 <__aeabi_fdiv+0xec>
 800050c:	eba2 0203 	sub.w	r2, r2, r3
 8000510:	ea80 0c01 	eor.w	ip, r0, r1
 8000514:	0249      	lsls	r1, r1, #9
 8000516:	ea4f 2040 	mov.w	r0, r0, lsl #9
 800051a:	d037      	beq.n	800058c <__aeabi_fdiv+0x98>
 800051c:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000520:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000524:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000528:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 800052c:	428b      	cmp	r3, r1
 800052e:	bf38      	it	cc
 8000530:	005b      	lslcc	r3, r3, #1
 8000532:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000536:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 800053a:	428b      	cmp	r3, r1
 800053c:	bf24      	itt	cs
 800053e:	1a5b      	subcs	r3, r3, r1
 8000540:	ea40 000c 	orrcs.w	r0, r0, ip
 8000544:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000548:	bf24      	itt	cs
 800054a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800054e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000552:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000556:	bf24      	itt	cs
 8000558:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 800055c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000560:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000564:	bf24      	itt	cs
 8000566:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 800056a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800056e:	011b      	lsls	r3, r3, #4
 8000570:	bf18      	it	ne
 8000572:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000576:	d1e0      	bne.n	800053a <__aeabi_fdiv+0x46>
 8000578:	2afd      	cmp	r2, #253	@ 0xfd
 800057a:	f63f af50 	bhi.w	800041e <__aeabi_fmul+0x92>
 800057e:	428b      	cmp	r3, r1
 8000580:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000584:	bf08      	it	eq
 8000586:	f020 0001 	biceq.w	r0, r0, #1
 800058a:	4770      	bx	lr
 800058c:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000590:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000594:	327f      	adds	r2, #127	@ 0x7f
 8000596:	bfc2      	ittt	gt
 8000598:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 800059c:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80005a0:	4770      	bxgt	lr
 80005a2:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80005a6:	f04f 0300 	mov.w	r3, #0
 80005aa:	3a01      	subs	r2, #1
 80005ac:	e737      	b.n	800041e <__aeabi_fmul+0x92>
 80005ae:	f092 0f00 	teq	r2, #0
 80005b2:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 80005b6:	bf02      	ittt	eq
 80005b8:	0040      	lsleq	r0, r0, #1
 80005ba:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 80005be:	3a01      	subeq	r2, #1
 80005c0:	d0f9      	beq.n	80005b6 <__aeabi_fdiv+0xc2>
 80005c2:	ea40 000c 	orr.w	r0, r0, ip
 80005c6:	f093 0f00 	teq	r3, #0
 80005ca:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 80005ce:	bf02      	ittt	eq
 80005d0:	0049      	lsleq	r1, r1, #1
 80005d2:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 80005d6:	3b01      	subeq	r3, #1
 80005d8:	d0f9      	beq.n	80005ce <__aeabi_fdiv+0xda>
 80005da:	ea41 010c 	orr.w	r1, r1, ip
 80005de:	e795      	b.n	800050c <__aeabi_fdiv+0x18>
 80005e0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80005e4:	ea92 0f0c 	teq	r2, ip
 80005e8:	d108      	bne.n	80005fc <__aeabi_fdiv+0x108>
 80005ea:	0242      	lsls	r2, r0, #9
 80005ec:	f47f af7d 	bne.w	80004ea <__aeabi_fmul+0x15e>
 80005f0:	ea93 0f0c 	teq	r3, ip
 80005f4:	f47f af70 	bne.w	80004d8 <__aeabi_fmul+0x14c>
 80005f8:	4608      	mov	r0, r1
 80005fa:	e776      	b.n	80004ea <__aeabi_fmul+0x15e>
 80005fc:	ea93 0f0c 	teq	r3, ip
 8000600:	d104      	bne.n	800060c <__aeabi_fdiv+0x118>
 8000602:	024b      	lsls	r3, r1, #9
 8000604:	f43f af4c 	beq.w	80004a0 <__aeabi_fmul+0x114>
 8000608:	4608      	mov	r0, r1
 800060a:	e76e      	b.n	80004ea <__aeabi_fmul+0x15e>
 800060c:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000610:	bf18      	it	ne
 8000612:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000616:	d1ca      	bne.n	80005ae <__aeabi_fdiv+0xba>
 8000618:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 800061c:	f47f af5c 	bne.w	80004d8 <__aeabi_fmul+0x14c>
 8000620:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000624:	f47f af3c 	bne.w	80004a0 <__aeabi_fmul+0x114>
 8000628:	e75f      	b.n	80004ea <__aeabi_fmul+0x15e>
 800062a:	bf00      	nop

0800062c <__aeabi_f2uiz>:
 800062c:	0042      	lsls	r2, r0, #1
 800062e:	d20e      	bcs.n	800064e <__aeabi_f2uiz+0x22>
 8000630:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8000634:	d30b      	bcc.n	800064e <__aeabi_f2uiz+0x22>
 8000636:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 800063a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800063e:	d409      	bmi.n	8000654 <__aeabi_f2uiz+0x28>
 8000640:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000644:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000648:	fa23 f002 	lsr.w	r0, r3, r2
 800064c:	4770      	bx	lr
 800064e:	f04f 0000 	mov.w	r0, #0
 8000652:	4770      	bx	lr
 8000654:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8000658:	d101      	bne.n	800065e <__aeabi_f2uiz+0x32>
 800065a:	0242      	lsls	r2, r0, #9
 800065c:	d102      	bne.n	8000664 <__aeabi_f2uiz+0x38>
 800065e:	f04f 30ff 	mov.w	r0, #4294967295
 8000662:	4770      	bx	lr
 8000664:	f04f 0000 	mov.w	r0, #0
 8000668:	4770      	bx	lr
 800066a:	bf00      	nop

0800066c <LCD_voidSendCMD>:
 */ 

#include "LCD_interface.h"

void LCD_voidSendCMD(u8 u8CMD)//Send Instruction to LCD
{
 800066c:	b580      	push	{r7, lr}
 800066e:	b082      	sub	sp, #8
 8000670:	af00      	add	r7, sp, #0
 8000672:	4603      	mov	r3, r0
 8000674:	71fb      	strb	r3, [r7, #7]

	GPIO_voidSetPinValue(LCD_RS, GPIO_LOW);
 8000676:	2200      	movs	r2, #0
 8000678:	2104      	movs	r1, #4
 800067a:	2001      	movs	r0, #1
 800067c:	f000 fb38 	bl	8000cf0 <GPIO_voidSetPinValue>
	GPIO_voidSetPinValue(LCD_RW, GPIO_LOW);
 8000680:	2200      	movs	r2, #0
 8000682:	2105      	movs	r1, #5
 8000684:	2001      	movs	r0, #1
 8000686:	f000 fb33 	bl	8000cf0 <GPIO_voidSetPinValue>
	GPIO_voidSetHalfPortValue(LCD_PORT,u8CMD);
 800068a:	79fb      	ldrb	r3, [r7, #7]
 800068c:	b29b      	uxth	r3, r3
 800068e:	461a      	mov	r2, r3
 8000690:	2101      	movs	r1, #1
 8000692:	2000      	movs	r0, #0
 8000694:	f000 fbc2 	bl	8000e1c <GPIO_voidSetHalfPortValue>
		
	GPIO_voidSetPinValue(LCD_E, GPIO_HIGH);
 8000698:	2201      	movs	r2, #1
 800069a:	2106      	movs	r1, #6
 800069c:	2001      	movs	r0, #1
 800069e:	f000 fb27 	bl	8000cf0 <GPIO_voidSetPinValue>
	GPIO_voidSetPinValue(LCD_E, GPIO_LOW);
 80006a2:	2200      	movs	r2, #0
 80006a4:	2106      	movs	r1, #6
 80006a6:	2001      	movs	r0, #1
 80006a8:	f000 fb22 	bl	8000cf0 <GPIO_voidSetPinValue>
	STK_delay(5,MS_UNIT);
 80006ac:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80006b0:	2005      	movs	r0, #5
 80006b2:	f000 fc7d 	bl	8000fb0 <STK_delay>
}
 80006b6:	bf00      	nop
 80006b8:	3708      	adds	r7, #8
 80006ba:	46bd      	mov	sp, r7
 80006bc:	bd80      	pop	{r7, pc}

080006be <LCD_voidWriteChar>:


void LCD_voidWriteChar(u8 u8CHAR) //Send data to LCD
{
 80006be:	b580      	push	{r7, lr}
 80006c0:	b082      	sub	sp, #8
 80006c2:	af00      	add	r7, sp, #0
 80006c4:	4603      	mov	r3, r0
 80006c6:	71fb      	strb	r3, [r7, #7]
		GPIO_voidSetPinValue(LCD_RS, GPIO_HIGH);
 80006c8:	2201      	movs	r2, #1
 80006ca:	2104      	movs	r1, #4
 80006cc:	2001      	movs	r0, #1
 80006ce:	f000 fb0f 	bl	8000cf0 <GPIO_voidSetPinValue>
		GPIO_voidSetPinValue(LCD_RW, GPIO_LOW);
 80006d2:	2200      	movs	r2, #0
 80006d4:	2105      	movs	r1, #5
 80006d6:	2001      	movs	r0, #1
 80006d8:	f000 fb0a 	bl	8000cf0 <GPIO_voidSetPinValue>
		GPIO_voidSetHalfPortValue(LCD_PORT,u8CHAR);
 80006dc:	79fb      	ldrb	r3, [r7, #7]
 80006de:	b29b      	uxth	r3, r3
 80006e0:	461a      	mov	r2, r3
 80006e2:	2101      	movs	r1, #1
 80006e4:	2000      	movs	r0, #0
 80006e6:	f000 fb99 	bl	8000e1c <GPIO_voidSetHalfPortValue>
		
		GPIO_voidSetPinValue(LCD_E, GPIO_HIGH);
 80006ea:	2201      	movs	r2, #1
 80006ec:	2106      	movs	r1, #6
 80006ee:	2001      	movs	r0, #1
 80006f0:	f000 fafe 	bl	8000cf0 <GPIO_voidSetPinValue>
		GPIO_voidSetPinValue(LCD_E, GPIO_LOW);
 80006f4:	2200      	movs	r2, #0
 80006f6:	2106      	movs	r1, #6
 80006f8:	2001      	movs	r0, #1
 80006fa:	f000 faf9 	bl	8000cf0 <GPIO_voidSetPinValue>
		STK_delay(5,MS_UNIT);
 80006fe:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000702:	2005      	movs	r0, #5
 8000704:	f000 fc54 	bl	8000fb0 <STK_delay>
}
 8000708:	bf00      	nop
 800070a:	3708      	adds	r7, #8
 800070c:	46bd      	mov	sp, r7
 800070e:	bd80      	pop	{r7, pc}

08000710 <LCD_voidLCDInit>:

void LCD_voidLCDInit(){
 8000710:	b580      	push	{r7, lr}
 8000712:	af00      	add	r7, sp, #0
	
	GPIO_voidSetPinDirection(LCD_RS,OUTPUT_SPEED_2MHZ_PP);
 8000714:	2202      	movs	r2, #2
 8000716:	2104      	movs	r1, #4
 8000718:	2001      	movs	r0, #1
 800071a:	f000 fa11 	bl	8000b40 <GPIO_voidSetPinDirection>
	GPIO_voidSetPinDirection(LCD_RW,OUTPUT_SPEED_2MHZ_PP);
 800071e:	2202      	movs	r2, #2
 8000720:	2105      	movs	r1, #5
 8000722:	2001      	movs	r0, #1
 8000724:	f000 fa0c 	bl	8000b40 <GPIO_voidSetPinDirection>
	GPIO_voidSetPinDirection(LCD_E,OUTPUT_SPEED_2MHZ_PP);
 8000728:	2202      	movs	r2, #2
 800072a:	2106      	movs	r1, #6
 800072c:	2001      	movs	r0, #1
 800072e:	f000 fa07 	bl	8000b40 <GPIO_voidSetPinDirection>
	GPIO_voidSetHalfPortDirection(LCD_PORT, OUTPUT_SPEED_2MHZ_PP);
 8000732:	2202      	movs	r2, #2
 8000734:	2101      	movs	r1, #1
 8000736:	2000      	movs	r0, #0
 8000738:	f000 fb3c 	bl	8000db4 <GPIO_voidSetHalfPortDirection>
	
	STK_delay(31,MS_UNIT);
 800073c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000740:	201f      	movs	r0, #31
 8000742:	f000 fc35 	bl	8000fb0 <STK_delay>
	LCD_voidSendCMD(LCD_FUNSET_8BIT);
 8000746:	2038      	movs	r0, #56	@ 0x38
 8000748:	f7ff ff90 	bl	800066c <LCD_voidSendCMD>
	STK_delay(40,US_UNIT);
 800074c:	490e      	ldr	r1, [pc, #56]	@ (8000788 <LCD_voidLCDInit+0x78>)
 800074e:	2028      	movs	r0, #40	@ 0x28
 8000750:	f000 fc2e 	bl	8000fb0 <STK_delay>
	LCD_voidSendCMD(LCD_DISPON_CUROFF);
 8000754:	200c      	movs	r0, #12
 8000756:	f7ff ff89 	bl	800066c <LCD_voidSendCMD>
	STK_delay(40,US_UNIT);
 800075a:	490b      	ldr	r1, [pc, #44]	@ (8000788 <LCD_voidLCDInit+0x78>)
 800075c:	2028      	movs	r0, #40	@ 0x28
 800075e:	f000 fc27 	bl	8000fb0 <STK_delay>
	LCD_voidSendCMD(LCD_CLR);
 8000762:	2001      	movs	r0, #1
 8000764:	f7ff ff82 	bl	800066c <LCD_voidSendCMD>
	STK_delay(1.54,MS_UNIT);
 8000768:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800076c:	2001      	movs	r0, #1
 800076e:	f000 fc1f 	bl	8000fb0 <STK_delay>
	LCD_voidSendCMD(LCD_ENTRY_MODE);
 8000772:	2006      	movs	r0, #6
 8000774:	f7ff ff7a 	bl	800066c <LCD_voidSendCMD>
	STK_delay(2,MS_UNIT);
 8000778:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800077c:	2002      	movs	r0, #2
 800077e:	f000 fc17 	bl	8000fb0 <STK_delay>

}
 8000782:	bf00      	nop
 8000784:	bd80      	pop	{r7, pc}
 8000786:	bf00      	nop
 8000788:	000f4240 	.word	0x000f4240

0800078c <LCD_voidGoTo>:

void LCD_voidGoTo(u8 X, u8 Y)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	b082      	sub	sp, #8
 8000790:	af00      	add	r7, sp, #0
 8000792:	4603      	mov	r3, r0
 8000794:	460a      	mov	r2, r1
 8000796:	71fb      	strb	r3, [r7, #7]
 8000798:	4613      	mov	r3, r2
 800079a:	71bb      	strb	r3, [r7, #6]
	if (X>0 && X<=16)
 800079c:	79fb      	ldrb	r3, [r7, #7]
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d016      	beq.n	80007d0 <LCD_voidGoTo+0x44>
 80007a2:	79fb      	ldrb	r3, [r7, #7]
 80007a4:	2b10      	cmp	r3, #16
 80007a6:	d813      	bhi.n	80007d0 <LCD_voidGoTo+0x44>
	{
		switch(Y)
 80007a8:	79bb      	ldrb	r3, [r7, #6]
 80007aa:	2b01      	cmp	r3, #1
 80007ac:	d002      	beq.n	80007b4 <LCD_voidGoTo+0x28>
 80007ae:	2b02      	cmp	r3, #2
 80007b0:	d007      	beq.n	80007c2 <LCD_voidGoTo+0x36>
		{
			case 1: LCD_voidSendCMD(127+X);break;
			case 2: LCD_voidSendCMD(191+X);break;
			default:break;	
 80007b2:	e00d      	b.n	80007d0 <LCD_voidGoTo+0x44>
			case 1: LCD_voidSendCMD(127+X);break;
 80007b4:	79fb      	ldrb	r3, [r7, #7]
 80007b6:	337f      	adds	r3, #127	@ 0x7f
 80007b8:	b2db      	uxtb	r3, r3
 80007ba:	4618      	mov	r0, r3
 80007bc:	f7ff ff56 	bl	800066c <LCD_voidSendCMD>
 80007c0:	e006      	b.n	80007d0 <LCD_voidGoTo+0x44>
			case 2: LCD_voidSendCMD(191+X);break;
 80007c2:	79fb      	ldrb	r3, [r7, #7]
 80007c4:	3b41      	subs	r3, #65	@ 0x41
 80007c6:	b2db      	uxtb	r3, r3
 80007c8:	4618      	mov	r0, r3
 80007ca:	f7ff ff4f 	bl	800066c <LCD_voidSendCMD>
 80007ce:	bf00      	nop
		}	
	}
}
 80007d0:	bf00      	nop
 80007d2:	3708      	adds	r7, #8
 80007d4:	46bd      	mov	sp, r7
 80007d6:	bd80      	pop	{r7, pc}

080007d8 <LCD_ClrLCD>:

void LCD_ClrLCD()
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	af00      	add	r7, sp, #0
	LCD_voidSendCMD(LCD_CLR);
 80007dc:	2001      	movs	r0, #1
 80007de:	f7ff ff45 	bl	800066c <LCD_voidSendCMD>
	STK_delay(2,MS_UNIT);
 80007e2:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80007e6:	2002      	movs	r0, #2
 80007e8:	f000 fbe2 	bl	8000fb0 <STK_delay>
	
}
 80007ec:	bf00      	nop
 80007ee:	bd80      	pop	{r7, pc}

080007f0 <LCD_voidWriteStrig>:
void LCD_voidWriteStrig(u8 *ptrStr)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b084      	sub	sp, #16
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	6078      	str	r0, [r7, #4]
	u8 counter=0;
 80007f8:	2300      	movs	r3, #0
 80007fa:	73fb      	strb	r3, [r7, #15]
	
	while(ptrStr[counter]!='\0')
 80007fc:	e009      	b.n	8000812 <LCD_voidWriteStrig+0x22>
	{
		LCD_voidWriteChar(ptrStr[counter]);
 80007fe:	7bfb      	ldrb	r3, [r7, #15]
 8000800:	687a      	ldr	r2, [r7, #4]
 8000802:	4413      	add	r3, r2
 8000804:	781b      	ldrb	r3, [r3, #0]
 8000806:	4618      	mov	r0, r3
 8000808:	f7ff ff59 	bl	80006be <LCD_voidWriteChar>
		counter++;
 800080c:	7bfb      	ldrb	r3, [r7, #15]
 800080e:	3301      	adds	r3, #1
 8000810:	73fb      	strb	r3, [r7, #15]
	while(ptrStr[counter]!='\0')
 8000812:	7bfb      	ldrb	r3, [r7, #15]
 8000814:	687a      	ldr	r2, [r7, #4]
 8000816:	4413      	add	r3, r2
 8000818:	781b      	ldrb	r3, [r3, #0]
 800081a:	2b00      	cmp	r3, #0
 800081c:	d1ef      	bne.n	80007fe <LCD_voidWriteStrig+0xe>
	}
	
}
 800081e:	bf00      	nop
 8000820:	bf00      	nop
 8000822:	3710      	adds	r7, #16
 8000824:	46bd      	mov	sp, r7
 8000826:	bd80      	pop	{r7, pc}

08000828 <LCD_voidWriteNum>:

void LCD_voidWriteNum(s32 s32NUM)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	b084      	sub	sp, #16
 800082c:	af00      	add	r7, sp, #0
 800082e:	6078      	str	r0, [r7, #4]
	u32 temp= 1;
 8000830:	2301      	movs	r3, #1
 8000832:	60fb      	str	r3, [r7, #12]
	if(s32NUM==0){
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	2b00      	cmp	r3, #0
 8000838:	d102      	bne.n	8000840 <LCD_voidWriteNum+0x18>
		LCD_voidWriteChar('0');
 800083a:	2030      	movs	r0, #48	@ 0x30
 800083c:	f7ff ff3f 	bl	80006be <LCD_voidWriteChar>
	}

	if(s32NUM<0){
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	2b00      	cmp	r3, #0
 8000844:	da23      	bge.n	800088e <LCD_voidWriteNum+0x66>
		LCD_voidWriteChar('-');
 8000846:	202d      	movs	r0, #45	@ 0x2d
 8000848:	f7ff ff39 	bl	80006be <LCD_voidWriteChar>
		s32NUM*=-1;
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	425b      	negs	r3, r3
 8000850:	607b      	str	r3, [r7, #4]
	}
	while(s32NUM!=0)
 8000852:	e01c      	b.n	800088e <LCD_voidWriteNum+0x66>
	{
		temp= (temp*10)+s32NUM%10;
 8000854:	68fa      	ldr	r2, [r7, #12]
 8000856:	4613      	mov	r3, r2
 8000858:	009b      	lsls	r3, r3, #2
 800085a:	4413      	add	r3, r2
 800085c:	005b      	lsls	r3, r3, #1
 800085e:	4618      	mov	r0, r3
 8000860:	687a      	ldr	r2, [r7, #4]
 8000862:	4b1c      	ldr	r3, [pc, #112]	@ (80008d4 <LCD_voidWriteNum+0xac>)
 8000864:	fb83 1302 	smull	r1, r3, r3, r2
 8000868:	1099      	asrs	r1, r3, #2
 800086a:	17d3      	asrs	r3, r2, #31
 800086c:	1ac9      	subs	r1, r1, r3
 800086e:	460b      	mov	r3, r1
 8000870:	009b      	lsls	r3, r3, #2
 8000872:	440b      	add	r3, r1
 8000874:	005b      	lsls	r3, r3, #1
 8000876:	1ad1      	subs	r1, r2, r3
 8000878:	460b      	mov	r3, r1
 800087a:	4403      	add	r3, r0
 800087c:	60fb      	str	r3, [r7, #12]
		s32NUM/=10;
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	4a14      	ldr	r2, [pc, #80]	@ (80008d4 <LCD_voidWriteNum+0xac>)
 8000882:	fb82 1203 	smull	r1, r2, r2, r3
 8000886:	1092      	asrs	r2, r2, #2
 8000888:	17db      	asrs	r3, r3, #31
 800088a:	1ad3      	subs	r3, r2, r3
 800088c:	607b      	str	r3, [r7, #4]
	while(s32NUM!=0)
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	2b00      	cmp	r3, #0
 8000892:	d1df      	bne.n	8000854 <LCD_voidWriteNum+0x2c>
	}
	while(temp !=1)
 8000894:	e015      	b.n	80008c2 <LCD_voidWriteNum+0x9a>
	{
		LCD_voidWriteChar((temp%10)+48);
 8000896:	68f9      	ldr	r1, [r7, #12]
 8000898:	4b0f      	ldr	r3, [pc, #60]	@ (80008d8 <LCD_voidWriteNum+0xb0>)
 800089a:	fba3 2301 	umull	r2, r3, r3, r1
 800089e:	08da      	lsrs	r2, r3, #3
 80008a0:	4613      	mov	r3, r2
 80008a2:	009b      	lsls	r3, r3, #2
 80008a4:	4413      	add	r3, r2
 80008a6:	005b      	lsls	r3, r3, #1
 80008a8:	1aca      	subs	r2, r1, r3
 80008aa:	b2d3      	uxtb	r3, r2
 80008ac:	3330      	adds	r3, #48	@ 0x30
 80008ae:	b2db      	uxtb	r3, r3
 80008b0:	4618      	mov	r0, r3
 80008b2:	f7ff ff04 	bl	80006be <LCD_voidWriteChar>
		temp/=10;
 80008b6:	68fb      	ldr	r3, [r7, #12]
 80008b8:	4a07      	ldr	r2, [pc, #28]	@ (80008d8 <LCD_voidWriteNum+0xb0>)
 80008ba:	fba2 2303 	umull	r2, r3, r2, r3
 80008be:	08db      	lsrs	r3, r3, #3
 80008c0:	60fb      	str	r3, [r7, #12]
	while(temp !=1)
 80008c2:	68fb      	ldr	r3, [r7, #12]
 80008c4:	2b01      	cmp	r3, #1
 80008c6:	d1e6      	bne.n	8000896 <LCD_voidWriteNum+0x6e>
	}
}
 80008c8:	bf00      	nop
 80008ca:	bf00      	nop
 80008cc:	3710      	adds	r7, #16
 80008ce:	46bd      	mov	sp, r7
 80008d0:	bd80      	pop	{r7, pc}
 80008d2:	bf00      	nop
 80008d4:	66666667 	.word	0x66666667
 80008d8:	cccccccd 	.word	0xcccccccd

080008dc <LDMX_voidInit>:

#include "LDMX_interface.h"


void LDMX_voidInit()
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	af00      	add	r7, sp, #0
	GPIO_voidSetHalfPortDirection( LDMX_ROW_PORT ,OUTPUT_SPEED_2MHZ_PP);
 80008e0:	2202      	movs	r2, #2
 80008e2:	2100      	movs	r1, #0
 80008e4:	2000      	movs	r0, #0
 80008e6:	f000 fa65 	bl	8000db4 <GPIO_voidSetHalfPortDirection>
	GPIO_voidSetHalfPortDirection( LDMX_COL_PORT ,OUTPUT_SPEED_2MHZ_PP);
 80008ea:	2202      	movs	r2, #2
 80008ec:	2101      	movs	r1, #1
 80008ee:	2001      	movs	r0, #1
 80008f0:	f000 fa60 	bl	8000db4 <GPIO_voidSetHalfPortDirection>

}
 80008f4:	bf00      	nop
 80008f6:	bd80      	pop	{r7, pc}

080008f8 <LDMX_voidDisplay>:

void LDMX_voidDisplay( u8 *copy_u8Data)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b084      	sub	sp, #16
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	6078      	str	r0, [r7, #4]
	for(u8 i = 0; i<8; i++)
 8000900:	2300      	movs	r3, #0
 8000902:	73fb      	strb	r3, [r7, #15]
 8000904:	e021      	b.n	800094a <LDMX_voidDisplay+0x52>
	{

		GPIO_voidSetHalfPortValue(LDMX_COL_PORT,0xff);
 8000906:	22ff      	movs	r2, #255	@ 0xff
 8000908:	2101      	movs	r1, #1
 800090a:	2001      	movs	r0, #1
 800090c:	f000 fa86 	bl	8000e1c <GPIO_voidSetHalfPortValue>
		GPIO_voidSetHalfPortValue(LDMX_ROW_PORT, copy_u8Data[i]);
 8000910:	7bfb      	ldrb	r3, [r7, #15]
 8000912:	687a      	ldr	r2, [r7, #4]
 8000914:	4413      	add	r3, r2
 8000916:	781b      	ldrb	r3, [r3, #0]
 8000918:	461a      	mov	r2, r3
 800091a:	2100      	movs	r1, #0
 800091c:	2000      	movs	r0, #0
 800091e:	f000 fa7d 	bl	8000e1c <GPIO_voidSetHalfPortValue>
		GPIO_voidSetHalfPortValue(LDMX_COL_PORT,~(1<<i));
 8000922:	7bfb      	ldrb	r3, [r7, #15]
 8000924:	2201      	movs	r2, #1
 8000926:	fa02 f303 	lsl.w	r3, r2, r3
 800092a:	b29b      	uxth	r3, r3
 800092c:	43db      	mvns	r3, r3
 800092e:	b29b      	uxth	r3, r3
 8000930:	461a      	mov	r2, r3
 8000932:	2101      	movs	r1, #1
 8000934:	2001      	movs	r0, #1
 8000936:	f000 fa71 	bl	8000e1c <GPIO_voidSetHalfPortValue>

        STK_delay(1,MS_UNIT);
 800093a:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800093e:	2001      	movs	r0, #1
 8000940:	f000 fb36 	bl	8000fb0 <STK_delay>
	for(u8 i = 0; i<8; i++)
 8000944:	7bfb      	ldrb	r3, [r7, #15]
 8000946:	3301      	adds	r3, #1
 8000948:	73fb      	strb	r3, [r7, #15]
 800094a:	7bfb      	ldrb	r3, [r7, #15]
 800094c:	2b07      	cmp	r3, #7
 800094e:	d9da      	bls.n	8000906 <LDMX_voidDisplay+0xe>
	}	
}
 8000950:	bf00      	nop
 8000952:	bf00      	nop
 8000954:	3710      	adds	r7, #16
 8000956:	46bd      	mov	sp, r7
 8000958:	bd80      	pop	{r7, pc}
	...

0800095c <EXTI_voidConfigure>:
#define  NULL ((void*) 0)

static void (*EXTI_CallBacks[16])(void)= {0};  // Array to hold callback functions for each EXTI line

/* Function to configure EXTI */
void EXTI_voidConfigure(u8 copy_u8Line, u8 copy_u8Port, u8 copy_u8Mode, void (*callback)(void)) {
 800095c:	b480      	push	{r7}
 800095e:	b085      	sub	sp, #20
 8000960:	af00      	add	r7, sp, #0
 8000962:	603b      	str	r3, [r7, #0]
 8000964:	4603      	mov	r3, r0
 8000966:	71fb      	strb	r3, [r7, #7]
 8000968:	460b      	mov	r3, r1
 800096a:	71bb      	strb	r3, [r7, #6]
 800096c:	4613      	mov	r3, r2
 800096e:	717b      	strb	r3, [r7, #5]

	u8 local_u8RegIndex = copy_u8Line / 4;         // Determine the EXTICR register
 8000970:	79fb      	ldrb	r3, [r7, #7]
 8000972:	089b      	lsrs	r3, r3, #2
 8000974:	73fb      	strb	r3, [r7, #15]
    u8 local_u8Position = (copy_u8Line % 4) * 4;   // Determine the position within the EXTICR register
 8000976:	79fb      	ldrb	r3, [r7, #7]
 8000978:	f003 0303 	and.w	r3, r3, #3
 800097c:	b2db      	uxtb	r3, r3
 800097e:	009b      	lsls	r3, r3, #2
 8000980:	73bb      	strb	r3, [r7, #14]

    /* Select the port for the EXTI line */
    AFIO->EXTICR[local_u8RegIndex] &= ~(0b1111 << local_u8Position);
 8000982:	4a40      	ldr	r2, [pc, #256]	@ (8000a84 <EXTI_voidConfigure+0x128>)
 8000984:	7bfb      	ldrb	r3, [r7, #15]
 8000986:	3302      	adds	r3, #2
 8000988:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800098c:	7bbb      	ldrb	r3, [r7, #14]
 800098e:	210f      	movs	r1, #15
 8000990:	fa01 f303 	lsl.w	r3, r1, r3
 8000994:	43db      	mvns	r3, r3
 8000996:	4618      	mov	r0, r3
 8000998:	493a      	ldr	r1, [pc, #232]	@ (8000a84 <EXTI_voidConfigure+0x128>)
 800099a:	7bfb      	ldrb	r3, [r7, #15]
 800099c:	4002      	ands	r2, r0
 800099e:	3302      	adds	r3, #2
 80009a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    AFIO->EXTICR[local_u8RegIndex] |= (copy_u8Port << local_u8Position);
 80009a4:	4a37      	ldr	r2, [pc, #220]	@ (8000a84 <EXTI_voidConfigure+0x128>)
 80009a6:	7bfb      	ldrb	r3, [r7, #15]
 80009a8:	3302      	adds	r3, #2
 80009aa:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80009ae:	79b9      	ldrb	r1, [r7, #6]
 80009b0:	7bbb      	ldrb	r3, [r7, #14]
 80009b2:	fa01 f303 	lsl.w	r3, r1, r3
 80009b6:	4618      	mov	r0, r3
 80009b8:	4932      	ldr	r1, [pc, #200]	@ (8000a84 <EXTI_voidConfigure+0x128>)
 80009ba:	7bfb      	ldrb	r3, [r7, #15]
 80009bc:	4302      	orrs	r2, r0
 80009be:	3302      	adds	r3, #2
 80009c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

    /* Configure the signal latch mode */
    switch(copy_u8Mode) {
 80009c4:	797b      	ldrb	r3, [r7, #5]
 80009c6:	2b02      	cmp	r3, #2
 80009c8:	d032      	beq.n	8000a30 <EXTI_voidConfigure+0xd4>
 80009ca:	2b02      	cmp	r3, #2
 80009cc:	dc45      	bgt.n	8000a5a <EXTI_voidConfigure+0xfe>
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d002      	beq.n	80009d8 <EXTI_voidConfigure+0x7c>
 80009d2:	2b01      	cmp	r3, #1
 80009d4:	d016      	beq.n	8000a04 <EXTI_voidConfigure+0xa8>
 80009d6:	e040      	b.n	8000a5a <EXTI_voidConfigure+0xfe>
        case EXTI_RISING_EDGE:
            SET_BIT(EXTI->RTSR, copy_u8Line);   // Enable rising edge trigger
 80009d8:	4b2b      	ldr	r3, [pc, #172]	@ (8000a88 <EXTI_voidConfigure+0x12c>)
 80009da:	689b      	ldr	r3, [r3, #8]
 80009dc:	79fa      	ldrb	r2, [r7, #7]
 80009de:	2101      	movs	r1, #1
 80009e0:	fa01 f202 	lsl.w	r2, r1, r2
 80009e4:	4611      	mov	r1, r2
 80009e6:	4a28      	ldr	r2, [pc, #160]	@ (8000a88 <EXTI_voidConfigure+0x12c>)
 80009e8:	430b      	orrs	r3, r1
 80009ea:	6093      	str	r3, [r2, #8]
            CLR_BIT(EXTI->FTSR, copy_u8Line);   // Disable falling edge trigger
 80009ec:	4b26      	ldr	r3, [pc, #152]	@ (8000a88 <EXTI_voidConfigure+0x12c>)
 80009ee:	68db      	ldr	r3, [r3, #12]
 80009f0:	79fa      	ldrb	r2, [r7, #7]
 80009f2:	2101      	movs	r1, #1
 80009f4:	fa01 f202 	lsl.w	r2, r1, r2
 80009f8:	43d2      	mvns	r2, r2
 80009fa:	4611      	mov	r1, r2
 80009fc:	4a22      	ldr	r2, [pc, #136]	@ (8000a88 <EXTI_voidConfigure+0x12c>)
 80009fe:	400b      	ands	r3, r1
 8000a00:	60d3      	str	r3, [r2, #12]
            break;
 8000a02:	e02a      	b.n	8000a5a <EXTI_voidConfigure+0xfe>
        case EXTI_FALLING_EDGE:
            SET_BIT(EXTI->FTSR, copy_u8Line);   // Enable falling edge trigger
 8000a04:	4b20      	ldr	r3, [pc, #128]	@ (8000a88 <EXTI_voidConfigure+0x12c>)
 8000a06:	68db      	ldr	r3, [r3, #12]
 8000a08:	79fa      	ldrb	r2, [r7, #7]
 8000a0a:	2101      	movs	r1, #1
 8000a0c:	fa01 f202 	lsl.w	r2, r1, r2
 8000a10:	4611      	mov	r1, r2
 8000a12:	4a1d      	ldr	r2, [pc, #116]	@ (8000a88 <EXTI_voidConfigure+0x12c>)
 8000a14:	430b      	orrs	r3, r1
 8000a16:	60d3      	str	r3, [r2, #12]
            CLR_BIT(EXTI->RTSR, copy_u8Line);   // Disable rising edge trigger
 8000a18:	4b1b      	ldr	r3, [pc, #108]	@ (8000a88 <EXTI_voidConfigure+0x12c>)
 8000a1a:	689b      	ldr	r3, [r3, #8]
 8000a1c:	79fa      	ldrb	r2, [r7, #7]
 8000a1e:	2101      	movs	r1, #1
 8000a20:	fa01 f202 	lsl.w	r2, r1, r2
 8000a24:	43d2      	mvns	r2, r2
 8000a26:	4611      	mov	r1, r2
 8000a28:	4a17      	ldr	r2, [pc, #92]	@ (8000a88 <EXTI_voidConfigure+0x12c>)
 8000a2a:	400b      	ands	r3, r1
 8000a2c:	6093      	str	r3, [r2, #8]
            break;
 8000a2e:	e014      	b.n	8000a5a <EXTI_voidConfigure+0xfe>
        case EXTI_ON_CHANGE:
            SET_BIT(EXTI->RTSR, copy_u8Line);   // Enable both rising and falling edges
 8000a30:	4b15      	ldr	r3, [pc, #84]	@ (8000a88 <EXTI_voidConfigure+0x12c>)
 8000a32:	689b      	ldr	r3, [r3, #8]
 8000a34:	79fa      	ldrb	r2, [r7, #7]
 8000a36:	2101      	movs	r1, #1
 8000a38:	fa01 f202 	lsl.w	r2, r1, r2
 8000a3c:	4611      	mov	r1, r2
 8000a3e:	4a12      	ldr	r2, [pc, #72]	@ (8000a88 <EXTI_voidConfigure+0x12c>)
 8000a40:	430b      	orrs	r3, r1
 8000a42:	6093      	str	r3, [r2, #8]
            SET_BIT(EXTI->FTSR, copy_u8Line);
 8000a44:	4b10      	ldr	r3, [pc, #64]	@ (8000a88 <EXTI_voidConfigure+0x12c>)
 8000a46:	68db      	ldr	r3, [r3, #12]
 8000a48:	79fa      	ldrb	r2, [r7, #7]
 8000a4a:	2101      	movs	r1, #1
 8000a4c:	fa01 f202 	lsl.w	r2, r1, r2
 8000a50:	4611      	mov	r1, r2
 8000a52:	4a0d      	ldr	r2, [pc, #52]	@ (8000a88 <EXTI_voidConfigure+0x12c>)
 8000a54:	430b      	orrs	r3, r1
 8000a56:	60d3      	str	r3, [r2, #12]
            break;
 8000a58:	bf00      	nop
    }
    /* Assign the callback function to the corresponding EXTI line */
    EXTI_CallBacks[copy_u8Line] = callback;
 8000a5a:	79fb      	ldrb	r3, [r7, #7]
 8000a5c:	490b      	ldr	r1, [pc, #44]	@ (8000a8c <EXTI_voidConfigure+0x130>)
 8000a5e:	683a      	ldr	r2, [r7, #0]
 8000a60:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

    /* Enable the EXTI line */
    SET_BIT(EXTI->IMR, copy_u8Line);
 8000a64:	4b08      	ldr	r3, [pc, #32]	@ (8000a88 <EXTI_voidConfigure+0x12c>)
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	79fa      	ldrb	r2, [r7, #7]
 8000a6a:	2101      	movs	r1, #1
 8000a6c:	fa01 f202 	lsl.w	r2, r1, r2
 8000a70:	4611      	mov	r1, r2
 8000a72:	4a05      	ldr	r2, [pc, #20]	@ (8000a88 <EXTI_voidConfigure+0x12c>)
 8000a74:	430b      	orrs	r3, r1
 8000a76:	6013      	str	r3, [r2, #0]


}
 8000a78:	bf00      	nop
 8000a7a:	3714      	adds	r7, #20
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	bc80      	pop	{r7}
 8000a80:	4770      	bx	lr
 8000a82:	bf00      	nop
 8000a84:	40010000 	.word	0x40010000
 8000a88:	40010400 	.word	0x40010400
 8000a8c:	2000009c 	.word	0x2000009c

08000a90 <EXTI0_IRQHandler>:

/* Example ISR for EXTI0 */

void EXTI0_IRQHandler(void) {
 8000a90:	b580      	push	{r7, lr}
 8000a92:	af00      	add	r7, sp, #0
    // Execute the assigned callback function
    if (EXTI_CallBacks[0]!= NULL)
 8000a94:	4b07      	ldr	r3, [pc, #28]	@ (8000ab4 <EXTI0_IRQHandler+0x24>)
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d002      	beq.n	8000aa2 <EXTI0_IRQHandler+0x12>
	EXTI_CallBacks[0]();
 8000a9c:	4b05      	ldr	r3, [pc, #20]	@ (8000ab4 <EXTI0_IRQHandler+0x24>)
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	4798      	blx	r3

   // Clear the pending flag by writing 1 to it
    SET_BIT(EXTI->PR, 1);
 8000aa2:	4b05      	ldr	r3, [pc, #20]	@ (8000ab8 <EXTI0_IRQHandler+0x28>)
 8000aa4:	695b      	ldr	r3, [r3, #20]
 8000aa6:	4a04      	ldr	r2, [pc, #16]	@ (8000ab8 <EXTI0_IRQHandler+0x28>)
 8000aa8:	f043 0302 	orr.w	r3, r3, #2
 8000aac:	6153      	str	r3, [r2, #20]
}
 8000aae:	bf00      	nop
 8000ab0:	bd80      	pop	{r7, pc}
 8000ab2:	bf00      	nop
 8000ab4:	2000009c 	.word	0x2000009c
 8000ab8:	40010400 	.word	0x40010400

08000abc <EXTI1_IRQHandler>:

void EXTI1_IRQHandler(void) {
 8000abc:	b580      	push	{r7, lr}
 8000abe:	af00      	add	r7, sp, #0
    // Execute the assigned callback function
    if (EXTI_CallBacks[1]!= NULL)
 8000ac0:	4b07      	ldr	r3, [pc, #28]	@ (8000ae0 <EXTI1_IRQHandler+0x24>)
 8000ac2:	685b      	ldr	r3, [r3, #4]
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d002      	beq.n	8000ace <EXTI1_IRQHandler+0x12>
	EXTI_CallBacks[1]();
 8000ac8:	4b05      	ldr	r3, [pc, #20]	@ (8000ae0 <EXTI1_IRQHandler+0x24>)
 8000aca:	685b      	ldr	r3, [r3, #4]
 8000acc:	4798      	blx	r3

   // Clear the pending flag by writing 1 to it
    SET_BIT(EXTI->PR, 1);
 8000ace:	4b05      	ldr	r3, [pc, #20]	@ (8000ae4 <EXTI1_IRQHandler+0x28>)
 8000ad0:	695b      	ldr	r3, [r3, #20]
 8000ad2:	4a04      	ldr	r2, [pc, #16]	@ (8000ae4 <EXTI1_IRQHandler+0x28>)
 8000ad4:	f043 0302 	orr.w	r3, r3, #2
 8000ad8:	6153      	str	r3, [r2, #20]
}
 8000ada:	bf00      	nop
 8000adc:	bd80      	pop	{r7, pc}
 8000ade:	bf00      	nop
 8000ae0:	2000009c 	.word	0x2000009c
 8000ae4:	40010400 	.word	0x40010400

08000ae8 <EXTI2_IRQHandler>:

void EXTI2_IRQHandler(void) {
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	af00      	add	r7, sp, #0
    // Execute the assigned callback function
    if (EXTI_CallBacks[2]!= NULL)
 8000aec:	4b07      	ldr	r3, [pc, #28]	@ (8000b0c <EXTI2_IRQHandler+0x24>)
 8000aee:	689b      	ldr	r3, [r3, #8]
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d002      	beq.n	8000afa <EXTI2_IRQHandler+0x12>
	EXTI_CallBacks[2]();
 8000af4:	4b05      	ldr	r3, [pc, #20]	@ (8000b0c <EXTI2_IRQHandler+0x24>)
 8000af6:	689b      	ldr	r3, [r3, #8]
 8000af8:	4798      	blx	r3

   // Clear the pending flag by writing 1 to it
    SET_BIT(EXTI->PR, 1);
 8000afa:	4b05      	ldr	r3, [pc, #20]	@ (8000b10 <EXTI2_IRQHandler+0x28>)
 8000afc:	695b      	ldr	r3, [r3, #20]
 8000afe:	4a04      	ldr	r2, [pc, #16]	@ (8000b10 <EXTI2_IRQHandler+0x28>)
 8000b00:	f043 0302 	orr.w	r3, r3, #2
 8000b04:	6153      	str	r3, [r2, #20]
}
 8000b06:	bf00      	nop
 8000b08:	bd80      	pop	{r7, pc}
 8000b0a:	bf00      	nop
 8000b0c:	2000009c 	.word	0x2000009c
 8000b10:	40010400 	.word	0x40010400

08000b14 <EXTI3_IRQHandler>:

void EXTI3_IRQHandler(void) {
 8000b14:	b580      	push	{r7, lr}
 8000b16:	af00      	add	r7, sp, #0
    // Execute the assigned callback function
    if (EXTI_CallBacks[3]!= NULL)
 8000b18:	4b07      	ldr	r3, [pc, #28]	@ (8000b38 <EXTI3_IRQHandler+0x24>)
 8000b1a:	68db      	ldr	r3, [r3, #12]
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d002      	beq.n	8000b26 <EXTI3_IRQHandler+0x12>
	EXTI_CallBacks[3]();
 8000b20:	4b05      	ldr	r3, [pc, #20]	@ (8000b38 <EXTI3_IRQHandler+0x24>)
 8000b22:	68db      	ldr	r3, [r3, #12]
 8000b24:	4798      	blx	r3

   // Clear the pending flag by writing 1 to it
    SET_BIT(EXTI->PR, 1);
 8000b26:	4b05      	ldr	r3, [pc, #20]	@ (8000b3c <EXTI3_IRQHandler+0x28>)
 8000b28:	695b      	ldr	r3, [r3, #20]
 8000b2a:	4a04      	ldr	r2, [pc, #16]	@ (8000b3c <EXTI3_IRQHandler+0x28>)
 8000b2c:	f043 0302 	orr.w	r3, r3, #2
 8000b30:	6153      	str	r3, [r2, #20]
}
 8000b32:	bf00      	nop
 8000b34:	bd80      	pop	{r7, pc}
 8000b36:	bf00      	nop
 8000b38:	2000009c 	.word	0x2000009c
 8000b3c:	40010400 	.word	0x40010400

08000b40 <GPIO_voidSetPinDirection>:


#include "GPIO_interface.h"

void GPIO_voidSetPinDirection( u8 copy_u8PORT, u8 copy_u8PIN , u8 copy_u8Mode)
	{
 8000b40:	b480      	push	{r7}
 8000b42:	b083      	sub	sp, #12
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	4603      	mov	r3, r0
 8000b48:	71fb      	strb	r3, [r7, #7]
 8000b4a:	460b      	mov	r3, r1
 8000b4c:	71bb      	strb	r3, [r7, #6]
 8000b4e:	4613      	mov	r3, r2
 8000b50:	717b      	strb	r3, [r7, #5]
			switch (copy_u8PORT)
 8000b52:	79fb      	ldrb	r3, [r7, #7]
 8000b54:	2b02      	cmp	r3, #2
 8000b56:	d07a      	beq.n	8000c4e <GPIO_voidSetPinDirection+0x10e>
 8000b58:	2b02      	cmp	r3, #2
 8000b5a:	f300 80b1 	bgt.w	8000cc0 <GPIO_voidSetPinDirection+0x180>
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d002      	beq.n	8000b68 <GPIO_voidSetPinDirection+0x28>
 8000b62:	2b01      	cmp	r3, #1
 8000b64:	d03a      	beq.n	8000bdc <GPIO_voidSetPinDirection+0x9c>
						copy_u8PIN = copy_u8PIN -8;
                        GPIOC_CRH &=~((0b1111)      << (copy_u8PIN * 4)); //reset GPIO_CRL FOR ANYPIN
						GPIOC_CRH |= ((copy_u8Mode) << (copy_u8PIN * 4)); //write mode  FOR ANYPIN
						}
						break;
			default :break;
 8000b66:	e0ab      	b.n	8000cc0 <GPIO_voidSetPinDirection+0x180>
						if (copy_u8PIN <= 7)
 8000b68:	79bb      	ldrb	r3, [r7, #6]
 8000b6a:	2b07      	cmp	r3, #7
 8000b6c:	d817      	bhi.n	8000b9e <GPIO_voidSetPinDirection+0x5e>
						GPIOA_CRL &=~((0b1111)      << (copy_u8PIN * 4));
 8000b6e:	4b5a      	ldr	r3, [pc, #360]	@ (8000cd8 <GPIO_voidSetPinDirection+0x198>)
 8000b70:	681b      	ldr	r3, [r3, #0]
 8000b72:	79ba      	ldrb	r2, [r7, #6]
 8000b74:	0092      	lsls	r2, r2, #2
 8000b76:	210f      	movs	r1, #15
 8000b78:	fa01 f202 	lsl.w	r2, r1, r2
 8000b7c:	43d2      	mvns	r2, r2
 8000b7e:	4611      	mov	r1, r2
 8000b80:	4a55      	ldr	r2, [pc, #340]	@ (8000cd8 <GPIO_voidSetPinDirection+0x198>)
 8000b82:	400b      	ands	r3, r1
 8000b84:	6013      	str	r3, [r2, #0]
						GPIOA_CRL |= ((copy_u8Mode) << (copy_u8PIN * 4));
 8000b86:	4b54      	ldr	r3, [pc, #336]	@ (8000cd8 <GPIO_voidSetPinDirection+0x198>)
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	7979      	ldrb	r1, [r7, #5]
 8000b8c:	79ba      	ldrb	r2, [r7, #6]
 8000b8e:	0092      	lsls	r2, r2, #2
 8000b90:	fa01 f202 	lsl.w	r2, r1, r2
 8000b94:	4611      	mov	r1, r2
 8000b96:	4a50      	ldr	r2, [pc, #320]	@ (8000cd8 <GPIO_voidSetPinDirection+0x198>)
 8000b98:	430b      	orrs	r3, r1
 8000b9a:	6013      	str	r3, [r2, #0]
						break;
 8000b9c:	e092      	b.n	8000cc4 <GPIO_voidSetPinDirection+0x184>
						else if (copy_u8PIN <= 15)
 8000b9e:	79bb      	ldrb	r3, [r7, #6]
 8000ba0:	2b0f      	cmp	r3, #15
 8000ba2:	f200 808f 	bhi.w	8000cc4 <GPIO_voidSetPinDirection+0x184>
						copy_u8PIN = copy_u8PIN -8;
 8000ba6:	79bb      	ldrb	r3, [r7, #6]
 8000ba8:	3b08      	subs	r3, #8
 8000baa:	71bb      	strb	r3, [r7, #6]
                        GPIOA_CRH &=~((0b1111)      << (copy_u8PIN * 4)); 
 8000bac:	4b4b      	ldr	r3, [pc, #300]	@ (8000cdc <GPIO_voidSetPinDirection+0x19c>)
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	79ba      	ldrb	r2, [r7, #6]
 8000bb2:	0092      	lsls	r2, r2, #2
 8000bb4:	210f      	movs	r1, #15
 8000bb6:	fa01 f202 	lsl.w	r2, r1, r2
 8000bba:	43d2      	mvns	r2, r2
 8000bbc:	4611      	mov	r1, r2
 8000bbe:	4a47      	ldr	r2, [pc, #284]	@ (8000cdc <GPIO_voidSetPinDirection+0x19c>)
 8000bc0:	400b      	ands	r3, r1
 8000bc2:	6013      	str	r3, [r2, #0]
						GPIOA_CRH |= ((copy_u8Mode) << (copy_u8PIN * 4));
 8000bc4:	4b45      	ldr	r3, [pc, #276]	@ (8000cdc <GPIO_voidSetPinDirection+0x19c>)
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	7979      	ldrb	r1, [r7, #5]
 8000bca:	79ba      	ldrb	r2, [r7, #6]
 8000bcc:	0092      	lsls	r2, r2, #2
 8000bce:	fa01 f202 	lsl.w	r2, r1, r2
 8000bd2:	4611      	mov	r1, r2
 8000bd4:	4a41      	ldr	r2, [pc, #260]	@ (8000cdc <GPIO_voidSetPinDirection+0x19c>)
 8000bd6:	430b      	orrs	r3, r1
 8000bd8:	6013      	str	r3, [r2, #0]
						break;
 8000bda:	e073      	b.n	8000cc4 <GPIO_voidSetPinDirection+0x184>
						if (copy_u8PIN <= 7)
 8000bdc:	79bb      	ldrb	r3, [r7, #6]
 8000bde:	2b07      	cmp	r3, #7
 8000be0:	d817      	bhi.n	8000c12 <GPIO_voidSetPinDirection+0xd2>
						GPIOB_CRL &=~((0b1111)      << (copy_u8PIN * 4)); //reset GPIO_CRL FOR ANYPIN
 8000be2:	4b3f      	ldr	r3, [pc, #252]	@ (8000ce0 <GPIO_voidSetPinDirection+0x1a0>)
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	79ba      	ldrb	r2, [r7, #6]
 8000be8:	0092      	lsls	r2, r2, #2
 8000bea:	210f      	movs	r1, #15
 8000bec:	fa01 f202 	lsl.w	r2, r1, r2
 8000bf0:	43d2      	mvns	r2, r2
 8000bf2:	4611      	mov	r1, r2
 8000bf4:	4a3a      	ldr	r2, [pc, #232]	@ (8000ce0 <GPIO_voidSetPinDirection+0x1a0>)
 8000bf6:	400b      	ands	r3, r1
 8000bf8:	6013      	str	r3, [r2, #0]
						GPIOB_CRL |= ((copy_u8Mode) << (copy_u8PIN * 4)); //write mode  FOR ANYPIN
 8000bfa:	4b39      	ldr	r3, [pc, #228]	@ (8000ce0 <GPIO_voidSetPinDirection+0x1a0>)
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	7979      	ldrb	r1, [r7, #5]
 8000c00:	79ba      	ldrb	r2, [r7, #6]
 8000c02:	0092      	lsls	r2, r2, #2
 8000c04:	fa01 f202 	lsl.w	r2, r1, r2
 8000c08:	4611      	mov	r1, r2
 8000c0a:	4a35      	ldr	r2, [pc, #212]	@ (8000ce0 <GPIO_voidSetPinDirection+0x1a0>)
 8000c0c:	430b      	orrs	r3, r1
 8000c0e:	6013      	str	r3, [r2, #0]
						break;
 8000c10:	e05a      	b.n	8000cc8 <GPIO_voidSetPinDirection+0x188>
						else if (copy_u8PIN <= 15)
 8000c12:	79bb      	ldrb	r3, [r7, #6]
 8000c14:	2b0f      	cmp	r3, #15
 8000c16:	d857      	bhi.n	8000cc8 <GPIO_voidSetPinDirection+0x188>
						copy_u8PIN = copy_u8PIN -8;
 8000c18:	79bb      	ldrb	r3, [r7, #6]
 8000c1a:	3b08      	subs	r3, #8
 8000c1c:	71bb      	strb	r3, [r7, #6]
                        GPIOB_CRH &=~((0b1111)      << ((copy_u8PIN) * 4)); //reset GPIO_CRL FOR ANYPIN
 8000c1e:	4b31      	ldr	r3, [pc, #196]	@ (8000ce4 <GPIO_voidSetPinDirection+0x1a4>)
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	79ba      	ldrb	r2, [r7, #6]
 8000c24:	0092      	lsls	r2, r2, #2
 8000c26:	210f      	movs	r1, #15
 8000c28:	fa01 f202 	lsl.w	r2, r1, r2
 8000c2c:	43d2      	mvns	r2, r2
 8000c2e:	4611      	mov	r1, r2
 8000c30:	4a2c      	ldr	r2, [pc, #176]	@ (8000ce4 <GPIO_voidSetPinDirection+0x1a4>)
 8000c32:	400b      	ands	r3, r1
 8000c34:	6013      	str	r3, [r2, #0]
						GPIOB_CRH |= ((copy_u8Mode) << ((copy_u8PIN) * 4)); //write mode  FOR ANYPIN
 8000c36:	4b2b      	ldr	r3, [pc, #172]	@ (8000ce4 <GPIO_voidSetPinDirection+0x1a4>)
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	7979      	ldrb	r1, [r7, #5]
 8000c3c:	79ba      	ldrb	r2, [r7, #6]
 8000c3e:	0092      	lsls	r2, r2, #2
 8000c40:	fa01 f202 	lsl.w	r2, r1, r2
 8000c44:	4611      	mov	r1, r2
 8000c46:	4a27      	ldr	r2, [pc, #156]	@ (8000ce4 <GPIO_voidSetPinDirection+0x1a4>)
 8000c48:	430b      	orrs	r3, r1
 8000c4a:	6013      	str	r3, [r2, #0]
						break;
 8000c4c:	e03c      	b.n	8000cc8 <GPIO_voidSetPinDirection+0x188>
						if (copy_u8PIN <= 7)
 8000c4e:	79bb      	ldrb	r3, [r7, #6]
 8000c50:	2b07      	cmp	r3, #7
 8000c52:	d817      	bhi.n	8000c84 <GPIO_voidSetPinDirection+0x144>
						GPIOC_CRL &=~((0b1111)      << (copy_u8PIN * 4));//reset GPIO_CRL FOR ANYPIN
 8000c54:	4b24      	ldr	r3, [pc, #144]	@ (8000ce8 <GPIO_voidSetPinDirection+0x1a8>)
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	79ba      	ldrb	r2, [r7, #6]
 8000c5a:	0092      	lsls	r2, r2, #2
 8000c5c:	210f      	movs	r1, #15
 8000c5e:	fa01 f202 	lsl.w	r2, r1, r2
 8000c62:	43d2      	mvns	r2, r2
 8000c64:	4611      	mov	r1, r2
 8000c66:	4a20      	ldr	r2, [pc, #128]	@ (8000ce8 <GPIO_voidSetPinDirection+0x1a8>)
 8000c68:	400b      	ands	r3, r1
 8000c6a:	6013      	str	r3, [r2, #0]
						GPIOC_CRL |= ((copy_u8Mode) << (copy_u8PIN * 4)); //write mode  FOR ANYPIN
 8000c6c:	4b1e      	ldr	r3, [pc, #120]	@ (8000ce8 <GPIO_voidSetPinDirection+0x1a8>)
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	7979      	ldrb	r1, [r7, #5]
 8000c72:	79ba      	ldrb	r2, [r7, #6]
 8000c74:	0092      	lsls	r2, r2, #2
 8000c76:	fa01 f202 	lsl.w	r2, r1, r2
 8000c7a:	4611      	mov	r1, r2
 8000c7c:	4a1a      	ldr	r2, [pc, #104]	@ (8000ce8 <GPIO_voidSetPinDirection+0x1a8>)
 8000c7e:	430b      	orrs	r3, r1
 8000c80:	6013      	str	r3, [r2, #0]
						break;
 8000c82:	e023      	b.n	8000ccc <GPIO_voidSetPinDirection+0x18c>
						else if (copy_u8PIN <= 15)
 8000c84:	79bb      	ldrb	r3, [r7, #6]
 8000c86:	2b0f      	cmp	r3, #15
 8000c88:	d820      	bhi.n	8000ccc <GPIO_voidSetPinDirection+0x18c>
						copy_u8PIN = copy_u8PIN -8;
 8000c8a:	79bb      	ldrb	r3, [r7, #6]
 8000c8c:	3b08      	subs	r3, #8
 8000c8e:	71bb      	strb	r3, [r7, #6]
                        GPIOC_CRH &=~((0b1111)      << (copy_u8PIN * 4)); //reset GPIO_CRL FOR ANYPIN
 8000c90:	4b16      	ldr	r3, [pc, #88]	@ (8000cec <GPIO_voidSetPinDirection+0x1ac>)
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	79ba      	ldrb	r2, [r7, #6]
 8000c96:	0092      	lsls	r2, r2, #2
 8000c98:	210f      	movs	r1, #15
 8000c9a:	fa01 f202 	lsl.w	r2, r1, r2
 8000c9e:	43d2      	mvns	r2, r2
 8000ca0:	4611      	mov	r1, r2
 8000ca2:	4a12      	ldr	r2, [pc, #72]	@ (8000cec <GPIO_voidSetPinDirection+0x1ac>)
 8000ca4:	400b      	ands	r3, r1
 8000ca6:	6013      	str	r3, [r2, #0]
						GPIOC_CRH |= ((copy_u8Mode) << (copy_u8PIN * 4)); //write mode  FOR ANYPIN
 8000ca8:	4b10      	ldr	r3, [pc, #64]	@ (8000cec <GPIO_voidSetPinDirection+0x1ac>)
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	7979      	ldrb	r1, [r7, #5]
 8000cae:	79ba      	ldrb	r2, [r7, #6]
 8000cb0:	0092      	lsls	r2, r2, #2
 8000cb2:	fa01 f202 	lsl.w	r2, r1, r2
 8000cb6:	4611      	mov	r1, r2
 8000cb8:	4a0c      	ldr	r2, [pc, #48]	@ (8000cec <GPIO_voidSetPinDirection+0x1ac>)
 8000cba:	430b      	orrs	r3, r1
 8000cbc:	6013      	str	r3, [r2, #0]
						break;
 8000cbe:	e005      	b.n	8000ccc <GPIO_voidSetPinDirection+0x18c>
			default :break;
 8000cc0:	bf00      	nop
 8000cc2:	e004      	b.n	8000cce <GPIO_voidSetPinDirection+0x18e>
						break;
 8000cc4:	bf00      	nop
 8000cc6:	e002      	b.n	8000cce <GPIO_voidSetPinDirection+0x18e>
						break;
 8000cc8:	bf00      	nop
 8000cca:	e000      	b.n	8000cce <GPIO_voidSetPinDirection+0x18e>
						break;
 8000ccc:	bf00      	nop
			
			}
			
		
	}
 8000cce:	bf00      	nop
 8000cd0:	370c      	adds	r7, #12
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	bc80      	pop	{r7}
 8000cd6:	4770      	bx	lr
 8000cd8:	40010800 	.word	0x40010800
 8000cdc:	40010804 	.word	0x40010804
 8000ce0:	40010c00 	.word	0x40010c00
 8000ce4:	40010c04 	.word	0x40010c04
 8000ce8:	40011000 	.word	0x40011000
 8000cec:	40011004 	.word	0x40011004

08000cf0 <GPIO_voidSetPinValue>:

void GPIO_voidSetPinValue( u8 copy_u8PORT, u8 copy_u8PIN , u8 copy_u8Value)
	{
 8000cf0:	b480      	push	{r7}
 8000cf2:	b083      	sub	sp, #12
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	71fb      	strb	r3, [r7, #7]
 8000cfa:	460b      	mov	r3, r1
 8000cfc:	71bb      	strb	r3, [r7, #6]
 8000cfe:	4613      	mov	r3, r2
 8000d00:	717b      	strb	r3, [r7, #5]
	switch (copy_u8PORT)
 8000d02:	79fb      	ldrb	r3, [r7, #7]
 8000d04:	2b02      	cmp	r3, #2
 8000d06:	d02a      	beq.n	8000d5e <GPIO_voidSetPinValue+0x6e>
 8000d08:	2b02      	cmp	r3, #2
 8000d0a:	dc3a      	bgt.n	8000d82 <GPIO_voidSetPinValue+0x92>
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d002      	beq.n	8000d16 <GPIO_voidSetPinValue+0x26>
 8000d10:	2b01      	cmp	r3, #1
 8000d12:	d012      	beq.n	8000d3a <GPIO_voidSetPinValue+0x4a>
							//CLR_BIT(GPIOC_ODR ,copy_u8PIN);
							GPIOC_BRR = (1<<copy_u8PIN);
						}
						break;							
			
			default :break;
 8000d14:	e035      	b.n	8000d82 <GPIO_voidSetPinValue+0x92>
						if (copy_u8Value == GPIO_HIGH)
 8000d16:	797b      	ldrb	r3, [r7, #5]
 8000d18:	2b01      	cmp	r3, #1
 8000d1a:	d105      	bne.n	8000d28 <GPIO_voidSetPinValue+0x38>
							GPIOA_BSR = (1<<copy_u8PIN);
 8000d1c:	79bb      	ldrb	r3, [r7, #6]
 8000d1e:	2201      	movs	r2, #1
 8000d20:	409a      	lsls	r2, r3
 8000d22:	4b1e      	ldr	r3, [pc, #120]	@ (8000d9c <GPIO_voidSetPinValue+0xac>)
 8000d24:	601a      	str	r2, [r3, #0]
						break;
 8000d26:	e02e      	b.n	8000d86 <GPIO_voidSetPinValue+0x96>
						else if (copy_u8Value == GPIO_LOW)
 8000d28:	797b      	ldrb	r3, [r7, #5]
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d12b      	bne.n	8000d86 <GPIO_voidSetPinValue+0x96>
							GPIOA_BRR = (1<<copy_u8PIN);
 8000d2e:	79bb      	ldrb	r3, [r7, #6]
 8000d30:	2201      	movs	r2, #1
 8000d32:	409a      	lsls	r2, r3
 8000d34:	4b1a      	ldr	r3, [pc, #104]	@ (8000da0 <GPIO_voidSetPinValue+0xb0>)
 8000d36:	601a      	str	r2, [r3, #0]
						break;
 8000d38:	e025      	b.n	8000d86 <GPIO_voidSetPinValue+0x96>
						if (copy_u8Value == GPIO_HIGH)
 8000d3a:	797b      	ldrb	r3, [r7, #5]
 8000d3c:	2b01      	cmp	r3, #1
 8000d3e:	d105      	bne.n	8000d4c <GPIO_voidSetPinValue+0x5c>
							GPIOB_BSR = (1<<copy_u8PIN);
 8000d40:	79bb      	ldrb	r3, [r7, #6]
 8000d42:	2201      	movs	r2, #1
 8000d44:	409a      	lsls	r2, r3
 8000d46:	4b17      	ldr	r3, [pc, #92]	@ (8000da4 <GPIO_voidSetPinValue+0xb4>)
 8000d48:	601a      	str	r2, [r3, #0]
						break;	
 8000d4a:	e01e      	b.n	8000d8a <GPIO_voidSetPinValue+0x9a>
						else if (copy_u8Value == GPIO_LOW)
 8000d4c:	797b      	ldrb	r3, [r7, #5]
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d11b      	bne.n	8000d8a <GPIO_voidSetPinValue+0x9a>
							GPIOB_BRR = (1<<copy_u8PIN);
 8000d52:	79bb      	ldrb	r3, [r7, #6]
 8000d54:	2201      	movs	r2, #1
 8000d56:	409a      	lsls	r2, r3
 8000d58:	4b13      	ldr	r3, [pc, #76]	@ (8000da8 <GPIO_voidSetPinValue+0xb8>)
 8000d5a:	601a      	str	r2, [r3, #0]
						break;	
 8000d5c:	e015      	b.n	8000d8a <GPIO_voidSetPinValue+0x9a>
						if (copy_u8Value == GPIO_HIGH)
 8000d5e:	797b      	ldrb	r3, [r7, #5]
 8000d60:	2b01      	cmp	r3, #1
 8000d62:	d105      	bne.n	8000d70 <GPIO_voidSetPinValue+0x80>
							GPIOC_BSR = (1<<copy_u8PIN);
 8000d64:	79bb      	ldrb	r3, [r7, #6]
 8000d66:	2201      	movs	r2, #1
 8000d68:	409a      	lsls	r2, r3
 8000d6a:	4b10      	ldr	r3, [pc, #64]	@ (8000dac <GPIO_voidSetPinValue+0xbc>)
 8000d6c:	601a      	str	r2, [r3, #0]
						break;							
 8000d6e:	e00e      	b.n	8000d8e <GPIO_voidSetPinValue+0x9e>
						else if (copy_u8Value == GPIO_LOW)
 8000d70:	797b      	ldrb	r3, [r7, #5]
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d10b      	bne.n	8000d8e <GPIO_voidSetPinValue+0x9e>
							GPIOC_BRR = (1<<copy_u8PIN);
 8000d76:	79bb      	ldrb	r3, [r7, #6]
 8000d78:	2201      	movs	r2, #1
 8000d7a:	409a      	lsls	r2, r3
 8000d7c:	4b0c      	ldr	r3, [pc, #48]	@ (8000db0 <GPIO_voidSetPinValue+0xc0>)
 8000d7e:	601a      	str	r2, [r3, #0]
						break;							
 8000d80:	e005      	b.n	8000d8e <GPIO_voidSetPinValue+0x9e>
			default :break;
 8000d82:	bf00      	nop
 8000d84:	e004      	b.n	8000d90 <GPIO_voidSetPinValue+0xa0>
						break;
 8000d86:	bf00      	nop
 8000d88:	e002      	b.n	8000d90 <GPIO_voidSetPinValue+0xa0>
						break;	
 8000d8a:	bf00      	nop
 8000d8c:	e000      	b.n	8000d90 <GPIO_voidSetPinValue+0xa0>
						break;							
 8000d8e:	bf00      	nop
			}
			
	
	}
 8000d90:	bf00      	nop
 8000d92:	370c      	adds	r7, #12
 8000d94:	46bd      	mov	sp, r7
 8000d96:	bc80      	pop	{r7}
 8000d98:	4770      	bx	lr
 8000d9a:	bf00      	nop
 8000d9c:	40010810 	.word	0x40010810
 8000da0:	40010814 	.word	0x40010814
 8000da4:	40010c10 	.word	0x40010c10
 8000da8:	40010c14 	.word	0x40010c14
 8000dac:	40011010 	.word	0x40011010
 8000db0:	40011014 	.word	0x40011014

08000db4 <GPIO_voidSetHalfPortDirection>:
	}

}

void GPIO_voidSetHalfPortDirection( u8 copy_u8PORT ,u8 Position, u16 copy_u8Mode)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b084      	sub	sp, #16
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	4603      	mov	r3, r0
 8000dbc:	71fb      	strb	r3, [r7, #7]
 8000dbe:	460b      	mov	r3, r1
 8000dc0:	71bb      	strb	r3, [r7, #6]
 8000dc2:	4613      	mov	r3, r2
 8000dc4:	80bb      	strh	r3, [r7, #4]

	if (Position==FIRST_HALF)
 8000dc6:	79bb      	ldrb	r3, [r7, #6]
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d110      	bne.n	8000dee <GPIO_voidSetHalfPortDirection+0x3a>
	{
		for(u8 i =0 ; i<8;i++)
 8000dcc:	2300      	movs	r3, #0
 8000dce:	73fb      	strb	r3, [r7, #15]
 8000dd0:	e009      	b.n	8000de6 <GPIO_voidSetHalfPortDirection+0x32>
		{
			GPIO_voidSetPinDirection( copy_u8PORT,  i , copy_u8Mode);
 8000dd2:	88bb      	ldrh	r3, [r7, #4]
 8000dd4:	b2da      	uxtb	r2, r3
 8000dd6:	7bf9      	ldrb	r1, [r7, #15]
 8000dd8:	79fb      	ldrb	r3, [r7, #7]
 8000dda:	4618      	mov	r0, r3
 8000ddc:	f7ff feb0 	bl	8000b40 <GPIO_voidSetPinDirection>
		for(u8 i =0 ; i<8;i++)
 8000de0:	7bfb      	ldrb	r3, [r7, #15]
 8000de2:	3301      	adds	r3, #1
 8000de4:	73fb      	strb	r3, [r7, #15]
 8000de6:	7bfb      	ldrb	r3, [r7, #15]
 8000de8:	2b07      	cmp	r3, #7
 8000dea:	d9f2      	bls.n	8000dd2 <GPIO_voidSetHalfPortDirection+0x1e>
		for(u8 i =8 ; i<16;i++)
		{
			GPIO_voidSetPinDirection( copy_u8PORT,  i , copy_u8Mode);
		}
	}
}
 8000dec:	e012      	b.n	8000e14 <GPIO_voidSetHalfPortDirection+0x60>
	else if (Position==SECOND_HALF)
 8000dee:	79bb      	ldrb	r3, [r7, #6]
 8000df0:	2b01      	cmp	r3, #1
 8000df2:	d10f      	bne.n	8000e14 <GPIO_voidSetHalfPortDirection+0x60>
		for(u8 i =8 ; i<16;i++)
 8000df4:	2308      	movs	r3, #8
 8000df6:	73bb      	strb	r3, [r7, #14]
 8000df8:	e009      	b.n	8000e0e <GPIO_voidSetHalfPortDirection+0x5a>
			GPIO_voidSetPinDirection( copy_u8PORT,  i , copy_u8Mode);
 8000dfa:	88bb      	ldrh	r3, [r7, #4]
 8000dfc:	b2da      	uxtb	r2, r3
 8000dfe:	7bb9      	ldrb	r1, [r7, #14]
 8000e00:	79fb      	ldrb	r3, [r7, #7]
 8000e02:	4618      	mov	r0, r3
 8000e04:	f7ff fe9c 	bl	8000b40 <GPIO_voidSetPinDirection>
		for(u8 i =8 ; i<16;i++)
 8000e08:	7bbb      	ldrb	r3, [r7, #14]
 8000e0a:	3301      	adds	r3, #1
 8000e0c:	73bb      	strb	r3, [r7, #14]
 8000e0e:	7bbb      	ldrb	r3, [r7, #14]
 8000e10:	2b0f      	cmp	r3, #15
 8000e12:	d9f2      	bls.n	8000dfa <GPIO_voidSetHalfPortDirection+0x46>
}
 8000e14:	bf00      	nop
 8000e16:	3710      	adds	r7, #16
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	bd80      	pop	{r7, pc}

08000e1c <GPIO_voidSetHalfPortValue>:

	}


void GPIO_voidSetHalfPortValue(u8 copy_u8PORT, u8 Position, u16 copy_u16Value)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	b083      	sub	sp, #12
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	4603      	mov	r3, r0
 8000e24:	71fb      	strb	r3, [r7, #7]
 8000e26:	460b      	mov	r3, r1
 8000e28:	71bb      	strb	r3, [r7, #6]
 8000e2a:	4613      	mov	r3, r2
 8000e2c:	80bb      	strh	r3, [r7, #4]
    if (Position == FIRST_HALF)
 8000e2e:	79bb      	ldrb	r3, [r7, #6]
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d119      	bne.n	8000e68 <GPIO_voidSetHalfPortValue+0x4c>
    {
        switch (copy_u8PORT)
 8000e34:	79fb      	ldrb	r3, [r7, #7]
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d002      	beq.n	8000e40 <GPIO_voidSetHalfPortValue+0x24>
 8000e3a:	2b01      	cmp	r3, #1
 8000e3c:	d00a      	beq.n	8000e54 <GPIO_voidSetHalfPortValue+0x38>
            case GPIOB:
                GPIOB_ODR = (GPIOB_ODR & 0xFF00) | (copy_u16Value & 0x00FF);
                break;

            default:
                break;
 8000e3e:	e030      	b.n	8000ea2 <GPIO_voidSetHalfPortValue+0x86>
                GPIOA_ODR = (GPIOA_ODR & 0xFF00) | (copy_u16Value & 0x00FF);
 8000e40:	4b1a      	ldr	r3, [pc, #104]	@ (8000eac <GPIO_voidSetHalfPortValue+0x90>)
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	f403 427f 	and.w	r2, r3, #65280	@ 0xff00
 8000e48:	88bb      	ldrh	r3, [r7, #4]
 8000e4a:	b2db      	uxtb	r3, r3
 8000e4c:	4917      	ldr	r1, [pc, #92]	@ (8000eac <GPIO_voidSetHalfPortValue+0x90>)
 8000e4e:	4313      	orrs	r3, r2
 8000e50:	600b      	str	r3, [r1, #0]
                break;
 8000e52:	e026      	b.n	8000ea2 <GPIO_voidSetHalfPortValue+0x86>
                GPIOB_ODR = (GPIOB_ODR & 0xFF00) | (copy_u16Value & 0x00FF);
 8000e54:	4b16      	ldr	r3, [pc, #88]	@ (8000eb0 <GPIO_voidSetHalfPortValue+0x94>)
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	f403 427f 	and.w	r2, r3, #65280	@ 0xff00
 8000e5c:	88bb      	ldrh	r3, [r7, #4]
 8000e5e:	b2db      	uxtb	r3, r3
 8000e60:	4913      	ldr	r1, [pc, #76]	@ (8000eb0 <GPIO_voidSetHalfPortValue+0x94>)
 8000e62:	4313      	orrs	r3, r2
 8000e64:	600b      	str	r3, [r1, #0]
                break;
 8000e66:	e01c      	b.n	8000ea2 <GPIO_voidSetHalfPortValue+0x86>
        }
    }
    else if (Position == SECOND_HALF)
 8000e68:	79bb      	ldrb	r3, [r7, #6]
 8000e6a:	2b01      	cmp	r3, #1
 8000e6c:	d119      	bne.n	8000ea2 <GPIO_voidSetHalfPortValue+0x86>
    {
        switch (copy_u8PORT)
 8000e6e:	79fb      	ldrb	r3, [r7, #7]
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d002      	beq.n	8000e7a <GPIO_voidSetHalfPortValue+0x5e>
 8000e74:	2b01      	cmp	r3, #1
 8000e76:	d00a      	beq.n	8000e8e <GPIO_voidSetHalfPortValue+0x72>
            case GPIOB:
                GPIOB_ODR = (GPIOB_ODR & 0x00FF) | ((copy_u16Value & 0x00FF) << 8);
                break;

            default:
                break;
 8000e78:	e013      	b.n	8000ea2 <GPIO_voidSetHalfPortValue+0x86>
                GPIOA_ODR = (GPIOA_ODR & 0x00FF) | ((copy_u16Value & 0x00FF) << 8);
 8000e7a:	4b0c      	ldr	r3, [pc, #48]	@ (8000eac <GPIO_voidSetHalfPortValue+0x90>)
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	b2da      	uxtb	r2, r3
 8000e80:	88bb      	ldrh	r3, [r7, #4]
 8000e82:	021b      	lsls	r3, r3, #8
 8000e84:	b29b      	uxth	r3, r3
 8000e86:	4909      	ldr	r1, [pc, #36]	@ (8000eac <GPIO_voidSetHalfPortValue+0x90>)
 8000e88:	4313      	orrs	r3, r2
 8000e8a:	600b      	str	r3, [r1, #0]
                break;
 8000e8c:	e009      	b.n	8000ea2 <GPIO_voidSetHalfPortValue+0x86>
                GPIOB_ODR = (GPIOB_ODR & 0x00FF) | ((copy_u16Value & 0x00FF) << 8);
 8000e8e:	4b08      	ldr	r3, [pc, #32]	@ (8000eb0 <GPIO_voidSetHalfPortValue+0x94>)
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	b2da      	uxtb	r2, r3
 8000e94:	88bb      	ldrh	r3, [r7, #4]
 8000e96:	021b      	lsls	r3, r3, #8
 8000e98:	b29b      	uxth	r3, r3
 8000e9a:	4905      	ldr	r1, [pc, #20]	@ (8000eb0 <GPIO_voidSetHalfPortValue+0x94>)
 8000e9c:	4313      	orrs	r3, r2
 8000e9e:	600b      	str	r3, [r1, #0]
                break;
 8000ea0:	bf00      	nop
        }
    }
}
 8000ea2:	bf00      	nop
 8000ea4:	370c      	adds	r7, #12
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	bc80      	pop	{r7}
 8000eaa:	4770      	bx	lr
 8000eac:	4001080c 	.word	0x4001080c
 8000eb0:	40010c0c 	.word	0x40010c0c

08000eb4 <NVIC_Init>:


#include "NVIC_interface.h"

void NVIC_Init()
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	af00      	add	r7, sp, #0

	SCB_AIRCR = (NVIC_PRIORITY_DISTRIBUTION<<8) | (0x05FA0000);
 8000eb8:	4b03      	ldr	r3, [pc, #12]	@ (8000ec8 <NVIC_Init+0x14>)
 8000eba:	4a04      	ldr	r2, [pc, #16]	@ (8000ecc <NVIC_Init+0x18>)
 8000ebc:	601a      	str	r2, [r3, #0]
}
 8000ebe:	bf00      	nop
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	bc80      	pop	{r7}
 8000ec4:	4770      	bx	lr
 8000ec6:	bf00      	nop
 8000ec8:	e000ed0c 	.word	0xe000ed0c
 8000ecc:	05fa0500 	.word	0x05fa0500

08000ed0 <NVIC_EnableInterrupt>:

void NVIC_EnableInterrupt(u8 int_Id) {
 8000ed0:	b480      	push	{r7}
 8000ed2:	b083      	sub	sp, #12
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	71fb      	strb	r3, [r7, #7]
    NVIC->ISER[int_Id / 32] = (1 << (int_Id % 32));
 8000eda:	79fb      	ldrb	r3, [r7, #7]
 8000edc:	f003 031f 	and.w	r3, r3, #31
 8000ee0:	2201      	movs	r2, #1
 8000ee2:	fa02 f103 	lsl.w	r1, r2, r3
 8000ee6:	4a05      	ldr	r2, [pc, #20]	@ (8000efc <NVIC_EnableInterrupt+0x2c>)
 8000ee8:	79fb      	ldrb	r3, [r7, #7]
 8000eea:	095b      	lsrs	r3, r3, #5
 8000eec:	b2db      	uxtb	r3, r3
 8000eee:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8000ef2:	bf00      	nop
 8000ef4:	370c      	adds	r7, #12
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	bc80      	pop	{r7}
 8000efa:	4770      	bx	lr
 8000efc:	e000e100 	.word	0xe000e100

08000f00 <RCC_voidInitSysClock>:

#include "RCC_interface.h"  


void RCC_voidInitSysClock()
{
 8000f00:	b480      	push	{r7}
 8000f02:	af00      	add	r7, sp, #0


	    // 1. Enable HSI if selected
	#if CLOCK_TYPE == RCC_HSI
	    RCC_CR |= (1 << RCC_CR_HSION);  // Enable HSI
 8000f04:	4b09      	ldr	r3, [pc, #36]	@ (8000f2c <RCC_voidInitSysClock+0x2c>)
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	4a08      	ldr	r2, [pc, #32]	@ (8000f2c <RCC_voidInitSysClock+0x2c>)
 8000f0a:	f043 0301 	orr.w	r3, r3, #1
 8000f0e:	6013      	str	r3, [r2, #0]
	    // Enable PLL
	    RCC_CR |= (1 << RCC_CR_PLLON);  // Enable PLL
	#endif

	    // 4. Set the main system clock source
	    RCC_CFGR &= ~(0x3 << RCC_CFGR_SW);  // Clear previous values
 8000f10:	4b07      	ldr	r3, [pc, #28]	@ (8000f30 <RCC_voidInitSysClock+0x30>)
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	4a06      	ldr	r2, [pc, #24]	@ (8000f30 <RCC_voidInitSysClock+0x30>)
 8000f16:	f023 0303 	bic.w	r3, r3, #3
 8000f1a:	6013      	str	r3, [r2, #0]
	    RCC_CFGR |= (CLOCK_TYPE << RCC_CFGR_SW);  // Set main clock source
 8000f1c:	4b04      	ldr	r3, [pc, #16]	@ (8000f30 <RCC_voidInitSysClock+0x30>)
 8000f1e:	4a04      	ldr	r2, [pc, #16]	@ (8000f30 <RCC_voidInitSysClock+0x30>)
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	6013      	str	r3, [r2, #0]
}
 8000f24:	bf00      	nop
 8000f26:	46bd      	mov	sp, r7
 8000f28:	bc80      	pop	{r7}
 8000f2a:	4770      	bx	lr
 8000f2c:	40021000 	.word	0x40021000
 8000f30:	40021004 	.word	0x40021004

08000f34 <RCC_voidEnableClock>:



void RCC_voidEnableClock(u8 Copy_u8BusId, u8 Copy_u8PerId) {
 8000f34:	b480      	push	{r7}
 8000f36:	b083      	sub	sp, #12
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	460a      	mov	r2, r1
 8000f3e:	71fb      	strb	r3, [r7, #7]
 8000f40:	4613      	mov	r3, r2
 8000f42:	71bb      	strb	r3, [r7, #6]
    switch (Copy_u8BusId)
 8000f44:	79fb      	ldrb	r3, [r7, #7]
 8000f46:	2b02      	cmp	r3, #2
 8000f48:	d01c      	beq.n	8000f84 <RCC_voidEnableClock+0x50>
 8000f4a:	2b02      	cmp	r3, #2
 8000f4c:	dc25      	bgt.n	8000f9a <RCC_voidEnableClock+0x66>
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d002      	beq.n	8000f58 <RCC_voidEnableClock+0x24>
 8000f52:	2b01      	cmp	r3, #1
 8000f54:	d00b      	beq.n	8000f6e <RCC_voidEnableClock+0x3a>
        case RCC_APB2:
            RCC_APB2ENR |= (1 << Copy_u8PerId);
            break;

    }
}
 8000f56:	e020      	b.n	8000f9a <RCC_voidEnableClock+0x66>
            RCC_AHBENR |= (1 << Copy_u8PerId);
 8000f58:	4b12      	ldr	r3, [pc, #72]	@ (8000fa4 <RCC_voidEnableClock+0x70>)
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	79ba      	ldrb	r2, [r7, #6]
 8000f5e:	2101      	movs	r1, #1
 8000f60:	fa01 f202 	lsl.w	r2, r1, r2
 8000f64:	4611      	mov	r1, r2
 8000f66:	4a0f      	ldr	r2, [pc, #60]	@ (8000fa4 <RCC_voidEnableClock+0x70>)
 8000f68:	430b      	orrs	r3, r1
 8000f6a:	6013      	str	r3, [r2, #0]
            break;
 8000f6c:	e015      	b.n	8000f9a <RCC_voidEnableClock+0x66>
            RCC_APB1ENR |= (1 << Copy_u8PerId);
 8000f6e:	4b0e      	ldr	r3, [pc, #56]	@ (8000fa8 <RCC_voidEnableClock+0x74>)
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	79ba      	ldrb	r2, [r7, #6]
 8000f74:	2101      	movs	r1, #1
 8000f76:	fa01 f202 	lsl.w	r2, r1, r2
 8000f7a:	4611      	mov	r1, r2
 8000f7c:	4a0a      	ldr	r2, [pc, #40]	@ (8000fa8 <RCC_voidEnableClock+0x74>)
 8000f7e:	430b      	orrs	r3, r1
 8000f80:	6013      	str	r3, [r2, #0]
            break;
 8000f82:	e00a      	b.n	8000f9a <RCC_voidEnableClock+0x66>
            RCC_APB2ENR |= (1 << Copy_u8PerId);
 8000f84:	4b09      	ldr	r3, [pc, #36]	@ (8000fac <RCC_voidEnableClock+0x78>)
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	79ba      	ldrb	r2, [r7, #6]
 8000f8a:	2101      	movs	r1, #1
 8000f8c:	fa01 f202 	lsl.w	r2, r1, r2
 8000f90:	4611      	mov	r1, r2
 8000f92:	4a06      	ldr	r2, [pc, #24]	@ (8000fac <RCC_voidEnableClock+0x78>)
 8000f94:	430b      	orrs	r3, r1
 8000f96:	6013      	str	r3, [r2, #0]
            break;
 8000f98:	bf00      	nop
}
 8000f9a:	bf00      	nop
 8000f9c:	370c      	adds	r7, #12
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	bc80      	pop	{r7}
 8000fa2:	4770      	bx	lr
 8000fa4:	40021014 	.word	0x40021014
 8000fa8:	4002101c 	.word	0x4002101c
 8000fac:	40021018 	.word	0x40021018

08000fb0 <STK_delay>:
}




void STK_delay(u32 time, u32 unit) {
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b084      	sub	sp, #16
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
 8000fb8:	6039      	str	r1, [r7, #0]

	f32 ratio = STK_TIMER_FREQ / unit;  //TICKS = ( TIME IN SEC/ UNIT) * TIMER FREQ.
 8000fba:	4a19      	ldr	r2, [pc, #100]	@ (8001020 <STK_delay+0x70>)
 8000fbc:	683b      	ldr	r3, [r7, #0]
 8000fbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	f7ff f98a 	bl	80002dc <__aeabi_ui2f>
 8000fc8:	4603      	mov	r3, r0
 8000fca:	60fb      	str	r3, [r7, #12]
	u32 ticks = time * ratio;
 8000fcc:	6878      	ldr	r0, [r7, #4]
 8000fce:	f7ff f985 	bl	80002dc <__aeabi_ui2f>
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	68f9      	ldr	r1, [r7, #12]
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	f7ff f9d8 	bl	800038c <__aeabi_fmul>
 8000fdc:	4603      	mov	r3, r0
 8000fde:	4618      	mov	r0, r3
 8000fe0:	f7ff fb24 	bl	800062c <__aeabi_f2uiz>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	60bb      	str	r3, [r7, #8]


    STK->LOAD = ticks & STK_LOAD_MASK;
 8000fe8:	4a0e      	ldr	r2, [pc, #56]	@ (8001024 <STK_delay+0x74>)
 8000fea:	68bb      	ldr	r3, [r7, #8]
 8000fec:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8000ff0:	6053      	str	r3, [r2, #4]



    STK->CTRL |= (1 << STK_CTRL_ENABLE); //start timer
 8000ff2:	4b0c      	ldr	r3, [pc, #48]	@ (8001024 <STK_delay+0x74>)
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	4a0b      	ldr	r2, [pc, #44]	@ (8001024 <STK_delay+0x74>)
 8000ff8:	f043 0301 	orr.w	r3, r3, #1
 8000ffc:	6013      	str	r3, [r2, #0]

    while (!(STK->CTRL & (1 << STK_CTRL_COUNTFLAG)));  //waiting flag
 8000ffe:	bf00      	nop
 8001000:	4b08      	ldr	r3, [pc, #32]	@ (8001024 <STK_delay+0x74>)
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001008:	2b00      	cmp	r3, #0
 800100a:	d0f9      	beq.n	8001000 <STK_delay+0x50>

    STK->CTRL &= ~(1 << STK_CTRL_ENABLE);  //stop timer
 800100c:	4b05      	ldr	r3, [pc, #20]	@ (8001024 <STK_delay+0x74>)
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	4a04      	ldr	r2, [pc, #16]	@ (8001024 <STK_delay+0x74>)
 8001012:	f023 0301 	bic.w	r3, r3, #1
 8001016:	6013      	str	r3, [r2, #0]
}
 8001018:	bf00      	nop
 800101a:	3710      	adds	r7, #16
 800101c:	46bd      	mov	sp, r7
 800101e:	bd80      	pop	{r7, pc}
 8001020:	000f4240 	.word	0x000f4240
 8001024:	e000e010 	.word	0xe000e010

08001028 <SysTick_Handler>:

    return time;
}


void SysTick_Handler(void) {
 8001028:	b580      	push	{r7, lr}
 800102a:	b082      	sub	sp, #8
 800102c:	af00      	add	r7, sp, #0

    STK_CallBack();
 800102e:	4b0a      	ldr	r3, [pc, #40]	@ (8001058 <SysTick_Handler+0x30>)
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	4798      	blx	r3


    volatile u32 temp = STK->CTRL; //flag clear
 8001034:	4b09      	ldr	r3, [pc, #36]	@ (800105c <SysTick_Handler+0x34>)
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	607b      	str	r3, [r7, #4]

    if (STK_u8ModeOfInterval == STK_ONEC) {
 800103a:	4b09      	ldr	r3, [pc, #36]	@ (8001060 <SysTick_Handler+0x38>)
 800103c:	781b      	ldrb	r3, [r3, #0]
 800103e:	2b00      	cmp	r3, #0
 8001040:	d105      	bne.n	800104e <SysTick_Handler+0x26>
        STK->CTRL &= ~(1 << STK_CTRL_ENABLE);
 8001042:	4b06      	ldr	r3, [pc, #24]	@ (800105c <SysTick_Handler+0x34>)
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	4a05      	ldr	r2, [pc, #20]	@ (800105c <SysTick_Handler+0x34>)
 8001048:	f023 0301 	bic.w	r3, r3, #1
 800104c:	6013      	str	r3, [r2, #0]
    }
}
 800104e:	bf00      	nop
 8001050:	3708      	adds	r7, #8
 8001052:	46bd      	mov	sp, r7
 8001054:	bd80      	pop	{r7, pc}
 8001056:	bf00      	nop
 8001058:	200000dc 	.word	0x200000dc
 800105c:	e000e010 	.word	0xe000e010
 8001060:	200000e0 	.word	0x200000e0

08001064 <draw>:
snake_t snake = {4, 4, right};
fruit_t fruit;
tail_t tail = { .length = 0 };

// Function to draw the map onto the LED matrix display array
void draw(u8 map[game_height][game_width]) {
 8001064:	b4b0      	push	{r4, r5, r7}
 8001066:	b085      	sub	sp, #20
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
 800106c:	2308      	movs	r3, #8
 800106e:	3b01      	subs	r3, #1
 8001070:	60bb      	str	r3, [r7, #8]
 8001072:	2308      	movs	r3, #8
 8001074:	b2db      	uxtb	r3, r3
 8001076:	2200      	movs	r2, #0
 8001078:	461c      	mov	r4, r3
 800107a:	4615      	mov	r5, r2
 800107c:	f04f 0200 	mov.w	r2, #0
 8001080:	f04f 0300 	mov.w	r3, #0
 8001084:	00eb      	lsls	r3, r5, #3
 8001086:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800108a:	00e2      	lsls	r2, r4, #3
    for (s8 col = 0; col < 8; col++) {
 800108c:	2300      	movs	r3, #0
 800108e:	73fb      	strb	r3, [r7, #15]
 8001090:	e02f      	b.n	80010f2 <draw+0x8e>
        ledmrx_array[col] = 0; // Clear previous column data
 8001092:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001096:	4a1c      	ldr	r2, [pc, #112]	@ (8001108 <draw+0xa4>)
 8001098:	2100      	movs	r1, #0
 800109a:	54d1      	strb	r1, [r2, r3]
        for (s8 row = 7; row >= 0; row--) {
 800109c:	2307      	movs	r3, #7
 800109e:	73bb      	strb	r3, [r7, #14]
 80010a0:	e01d      	b.n	80010de <draw+0x7a>
            ledmrx_array[col] = (ledmrx_array[col] << 1) | map[row][col];
 80010a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010a6:	4a18      	ldr	r2, [pc, #96]	@ (8001108 <draw+0xa4>)
 80010a8:	5cd3      	ldrb	r3, [r2, r3]
 80010aa:	005b      	lsls	r3, r3, #1
 80010ac:	b25a      	sxtb	r2, r3
 80010ae:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80010b2:	2108      	movs	r1, #8
 80010b4:	fb01 f303 	mul.w	r3, r1, r3
 80010b8:	6879      	ldr	r1, [r7, #4]
 80010ba:	4419      	add	r1, r3
 80010bc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010c0:	5ccb      	ldrb	r3, [r1, r3]
 80010c2:	b25b      	sxtb	r3, r3
 80010c4:	4313      	orrs	r3, r2
 80010c6:	b25a      	sxtb	r2, r3
 80010c8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010cc:	b2d1      	uxtb	r1, r2
 80010ce:	4a0e      	ldr	r2, [pc, #56]	@ (8001108 <draw+0xa4>)
 80010d0:	54d1      	strb	r1, [r2, r3]
        for (s8 row = 7; row >= 0; row--) {
 80010d2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80010d6:	b2db      	uxtb	r3, r3
 80010d8:	3b01      	subs	r3, #1
 80010da:	b2db      	uxtb	r3, r3
 80010dc:	73bb      	strb	r3, [r7, #14]
 80010de:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	dadd      	bge.n	80010a2 <draw+0x3e>
    for (s8 col = 0; col < 8; col++) {
 80010e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010ea:	b2db      	uxtb	r3, r3
 80010ec:	3301      	adds	r3, #1
 80010ee:	b2db      	uxtb	r3, r3
 80010f0:	73fb      	strb	r3, [r7, #15]
 80010f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010f6:	2b07      	cmp	r3, #7
 80010f8:	ddcb      	ble.n	8001092 <draw+0x2e>
        }
    }
}
 80010fa:	bf00      	nop
 80010fc:	bf00      	nop
 80010fe:	3714      	adds	r7, #20
 8001100:	46bd      	mov	sp, r7
 8001102:	bcb0      	pop	{r4, r5, r7}
 8001104:	4770      	bx	lr
 8001106:	bf00      	nop
 8001108:	20000124 	.word	0x20000124

0800110c <update>:

// Update the snake's head and tail positions based on its direction
void update() {
 800110c:	b480      	push	{r7}
 800110e:	b083      	sub	sp, #12
 8001110:	af00      	add	r7, sp, #0
    // Remove the current head position from the map
    map[snake.head_row][snake.head_col] = 0;
 8001112:	4b95      	ldr	r3, [pc, #596]	@ (8001368 <update+0x25c>)
 8001114:	f993 3000 	ldrsb.w	r3, [r3]
 8001118:	4618      	mov	r0, r3
 800111a:	4b93      	ldr	r3, [pc, #588]	@ (8001368 <update+0x25c>)
 800111c:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8001120:	4619      	mov	r1, r3
 8001122:	4a92      	ldr	r2, [pc, #584]	@ (800136c <update+0x260>)
 8001124:	00c3      	lsls	r3, r0, #3
 8001126:	4413      	add	r3, r2
 8001128:	440b      	add	r3, r1
 800112a:	2200      	movs	r2, #0
 800112c:	701a      	strb	r2, [r3, #0]

    // Update the head position based on the direction
    if (snake.dir == up) {
 800112e:	4b8e      	ldr	r3, [pc, #568]	@ (8001368 <update+0x25c>)
 8001130:	789b      	ldrb	r3, [r3, #2]
 8001132:	2b00      	cmp	r3, #0
 8001134:	d110      	bne.n	8001158 <update+0x4c>
        snake.head_row = (snake.head_row == 0) ? 7 : snake.head_row - 1;
 8001136:	4b8c      	ldr	r3, [pc, #560]	@ (8001368 <update+0x25c>)
 8001138:	f993 3000 	ldrsb.w	r3, [r3]
 800113c:	2b00      	cmp	r3, #0
 800113e:	d007      	beq.n	8001150 <update+0x44>
 8001140:	4b89      	ldr	r3, [pc, #548]	@ (8001368 <update+0x25c>)
 8001142:	f993 3000 	ldrsb.w	r3, [r3]
 8001146:	b2db      	uxtb	r3, r3
 8001148:	3b01      	subs	r3, #1
 800114a:	b2db      	uxtb	r3, r3
 800114c:	b25b      	sxtb	r3, r3
 800114e:	e000      	b.n	8001152 <update+0x46>
 8001150:	2307      	movs	r3, #7
 8001152:	4a85      	ldr	r2, [pc, #532]	@ (8001368 <update+0x25c>)
 8001154:	7013      	strb	r3, [r2, #0]
 8001156:	e03d      	b.n	80011d4 <update+0xc8>
    } else if (snake.dir == down) {
 8001158:	4b83      	ldr	r3, [pc, #524]	@ (8001368 <update+0x25c>)
 800115a:	789b      	ldrb	r3, [r3, #2]
 800115c:	2b01      	cmp	r3, #1
 800115e:	d110      	bne.n	8001182 <update+0x76>
        snake.head_row = (snake.head_row == 7) ? 0 : snake.head_row + 1;
 8001160:	4b81      	ldr	r3, [pc, #516]	@ (8001368 <update+0x25c>)
 8001162:	f993 3000 	ldrsb.w	r3, [r3]
 8001166:	2b07      	cmp	r3, #7
 8001168:	d007      	beq.n	800117a <update+0x6e>
 800116a:	4b7f      	ldr	r3, [pc, #508]	@ (8001368 <update+0x25c>)
 800116c:	f993 3000 	ldrsb.w	r3, [r3]
 8001170:	b2db      	uxtb	r3, r3
 8001172:	3301      	adds	r3, #1
 8001174:	b2db      	uxtb	r3, r3
 8001176:	b25b      	sxtb	r3, r3
 8001178:	e000      	b.n	800117c <update+0x70>
 800117a:	2300      	movs	r3, #0
 800117c:	4a7a      	ldr	r2, [pc, #488]	@ (8001368 <update+0x25c>)
 800117e:	7013      	strb	r3, [r2, #0]
 8001180:	e028      	b.n	80011d4 <update+0xc8>
    } else if (snake.dir == right) {
 8001182:	4b79      	ldr	r3, [pc, #484]	@ (8001368 <update+0x25c>)
 8001184:	789b      	ldrb	r3, [r3, #2]
 8001186:	2b02      	cmp	r3, #2
 8001188:	d110      	bne.n	80011ac <update+0xa0>
        snake.head_col = (snake.head_col == 7) ? 0 : snake.head_col + 1;
 800118a:	4b77      	ldr	r3, [pc, #476]	@ (8001368 <update+0x25c>)
 800118c:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8001190:	2b07      	cmp	r3, #7
 8001192:	d007      	beq.n	80011a4 <update+0x98>
 8001194:	4b74      	ldr	r3, [pc, #464]	@ (8001368 <update+0x25c>)
 8001196:	f993 3001 	ldrsb.w	r3, [r3, #1]
 800119a:	b2db      	uxtb	r3, r3
 800119c:	3301      	adds	r3, #1
 800119e:	b2db      	uxtb	r3, r3
 80011a0:	b25b      	sxtb	r3, r3
 80011a2:	e000      	b.n	80011a6 <update+0x9a>
 80011a4:	2300      	movs	r3, #0
 80011a6:	4a70      	ldr	r2, [pc, #448]	@ (8001368 <update+0x25c>)
 80011a8:	7053      	strb	r3, [r2, #1]
 80011aa:	e013      	b.n	80011d4 <update+0xc8>
    } else if (snake.dir == left) {
 80011ac:	4b6e      	ldr	r3, [pc, #440]	@ (8001368 <update+0x25c>)
 80011ae:	789b      	ldrb	r3, [r3, #2]
 80011b0:	2b03      	cmp	r3, #3
 80011b2:	d10f      	bne.n	80011d4 <update+0xc8>
        snake.head_col = (snake.head_col == 0) ? 7 : snake.head_col - 1;
 80011b4:	4b6c      	ldr	r3, [pc, #432]	@ (8001368 <update+0x25c>)
 80011b6:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d007      	beq.n	80011ce <update+0xc2>
 80011be:	4b6a      	ldr	r3, [pc, #424]	@ (8001368 <update+0x25c>)
 80011c0:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80011c4:	b2db      	uxtb	r3, r3
 80011c6:	3b01      	subs	r3, #1
 80011c8:	b2db      	uxtb	r3, r3
 80011ca:	b25b      	sxtb	r3, r3
 80011cc:	e000      	b.n	80011d0 <update+0xc4>
 80011ce:	2307      	movs	r3, #7
 80011d0:	4a65      	ldr	r2, [pc, #404]	@ (8001368 <update+0x25c>)
 80011d2:	7053      	strb	r3, [r2, #1]
    }

    // Check for self-collision with tail
    for (u8 w = 0; w < tail.length; w++) {
 80011d4:	2300      	movs	r3, #0
 80011d6:	71fb      	strb	r3, [r7, #7]
 80011d8:	e01a      	b.n	8001210 <update+0x104>
        if (snake.head_row == tail.elements[w][0] && snake.head_col == tail.elements[w][1]) {
 80011da:	4b63      	ldr	r3, [pc, #396]	@ (8001368 <update+0x25c>)
 80011dc:	f993 2000 	ldrsb.w	r2, [r3]
 80011e0:	79fb      	ldrb	r3, [r7, #7]
 80011e2:	4963      	ldr	r1, [pc, #396]	@ (8001370 <update+0x264>)
 80011e4:	f911 3013 	ldrsb.w	r3, [r1, r3, lsl #1]
 80011e8:	429a      	cmp	r2, r3
 80011ea:	d10e      	bne.n	800120a <update+0xfe>
 80011ec:	4b5e      	ldr	r3, [pc, #376]	@ (8001368 <update+0x25c>)
 80011ee:	f993 2001 	ldrsb.w	r2, [r3, #1]
 80011f2:	79fb      	ldrb	r3, [r7, #7]
 80011f4:	495e      	ldr	r1, [pc, #376]	@ (8001370 <update+0x264>)
 80011f6:	005b      	lsls	r3, r3, #1
 80011f8:	440b      	add	r3, r1
 80011fa:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80011fe:	429a      	cmp	r2, r3
 8001200:	d103      	bne.n	800120a <update+0xfe>
            win = 0;  // Game over on self-collision
 8001202:	4b5c      	ldr	r3, [pc, #368]	@ (8001374 <update+0x268>)
 8001204:	2200      	movs	r2, #0
 8001206:	701a      	strb	r2, [r3, #0]
            return;
 8001208:	e0a9      	b.n	800135e <update+0x252>
    for (u8 w = 0; w < tail.length; w++) {
 800120a:	79fb      	ldrb	r3, [r7, #7]
 800120c:	3301      	adds	r3, #1
 800120e:	71fb      	strb	r3, [r7, #7]
 8001210:	4b57      	ldr	r3, [pc, #348]	@ (8001370 <update+0x264>)
 8001212:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001216:	79fa      	ldrb	r2, [r7, #7]
 8001218:	429a      	cmp	r2, r3
 800121a:	d3de      	bcc.n	80011da <update+0xce>
        }
    }

    // Move the tail segments by shifting them forward
    if (tail.length > 0) {
 800121c:	4b54      	ldr	r3, [pc, #336]	@ (8001370 <update+0x264>)
 800121e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001222:	2b00      	cmp	r3, #0
 8001224:	d032      	beq.n	800128c <update+0x180>
        for (s8 t = tail.length; t > 0; t--) {
 8001226:	4b52      	ldr	r3, [pc, #328]	@ (8001370 <update+0x264>)
 8001228:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800122c:	71bb      	strb	r3, [r7, #6]
 800122e:	e01f      	b.n	8001270 <update+0x164>
            tail.elements[t][0] = tail.elements[t - 1][0];
 8001230:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001234:	1e5a      	subs	r2, r3, #1
 8001236:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800123a:	494d      	ldr	r1, [pc, #308]	@ (8001370 <update+0x264>)
 800123c:	f911 1012 	ldrsb.w	r1, [r1, r2, lsl #1]
 8001240:	4a4b      	ldr	r2, [pc, #300]	@ (8001370 <update+0x264>)
 8001242:	f802 1013 	strb.w	r1, [r2, r3, lsl #1]
            tail.elements[t][1] = tail.elements[t - 1][1];
 8001246:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800124a:	3b01      	subs	r3, #1
 800124c:	f997 2006 	ldrsb.w	r2, [r7, #6]
 8001250:	4947      	ldr	r1, [pc, #284]	@ (8001370 <update+0x264>)
 8001252:	005b      	lsls	r3, r3, #1
 8001254:	440b      	add	r3, r1
 8001256:	f993 0001 	ldrsb.w	r0, [r3, #1]
 800125a:	4945      	ldr	r1, [pc, #276]	@ (8001370 <update+0x264>)
 800125c:	0053      	lsls	r3, r2, #1
 800125e:	440b      	add	r3, r1
 8001260:	4602      	mov	r2, r0
 8001262:	705a      	strb	r2, [r3, #1]
        for (s8 t = tail.length; t > 0; t--) {
 8001264:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001268:	b2db      	uxtb	r3, r3
 800126a:	3b01      	subs	r3, #1
 800126c:	b2db      	uxtb	r3, r3
 800126e:	71bb      	strb	r3, [r7, #6]
 8001270:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001274:	2b00      	cmp	r3, #0
 8001276:	dcdb      	bgt.n	8001230 <update+0x124>
        }
        // Set the first tail segment to the previous head position
        tail.elements[0][0] = snake.head_row;
 8001278:	4b3b      	ldr	r3, [pc, #236]	@ (8001368 <update+0x25c>)
 800127a:	f993 2000 	ldrsb.w	r2, [r3]
 800127e:	4b3c      	ldr	r3, [pc, #240]	@ (8001370 <update+0x264>)
 8001280:	701a      	strb	r2, [r3, #0]
        tail.elements[0][1] = snake.head_col;
 8001282:	4b39      	ldr	r3, [pc, #228]	@ (8001368 <update+0x25c>)
 8001284:	f993 2001 	ldrsb.w	r2, [r3, #1]
 8001288:	4b39      	ldr	r3, [pc, #228]	@ (8001370 <update+0x264>)
 800128a:	705a      	strb	r2, [r3, #1]
    }

    // Check if snake eats the fruit
    if (snake.head_row == fruit.fruit_row && snake.head_col == fruit.fruit_col) {
 800128c:	4b36      	ldr	r3, [pc, #216]	@ (8001368 <update+0x25c>)
 800128e:	f993 2000 	ldrsb.w	r2, [r3]
 8001292:	4b39      	ldr	r3, [pc, #228]	@ (8001378 <update+0x26c>)
 8001294:	f993 3000 	ldrsb.w	r3, [r3]
 8001298:	429a      	cmp	r2, r3
 800129a:	d118      	bne.n	80012ce <update+0x1c2>
 800129c:	4b32      	ldr	r3, [pc, #200]	@ (8001368 <update+0x25c>)
 800129e:	f993 2001 	ldrsb.w	r2, [r3, #1]
 80012a2:	4b35      	ldr	r3, [pc, #212]	@ (8001378 <update+0x26c>)
 80012a4:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80012a8:	429a      	cmp	r2, r3
 80012aa:	d110      	bne.n	80012ce <update+0x1c2>
        fruit_flag = 0;  // Fruit consumed
 80012ac:	4b33      	ldr	r3, [pc, #204]	@ (800137c <update+0x270>)
 80012ae:	2200      	movs	r2, #0
 80012b0:	701a      	strb	r2, [r3, #0]
        if (tail.length < 29) tail.length++;  // Increase length up to a limit
 80012b2:	4b2f      	ldr	r3, [pc, #188]	@ (8001370 <update+0x264>)
 80012b4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80012b8:	2b1c      	cmp	r3, #28
 80012ba:	d824      	bhi.n	8001306 <update+0x1fa>
 80012bc:	4b2c      	ldr	r3, [pc, #176]	@ (8001370 <update+0x264>)
 80012be:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80012c2:	3301      	adds	r3, #1
 80012c4:	b2da      	uxtb	r2, r3
 80012c6:	4b2a      	ldr	r3, [pc, #168]	@ (8001370 <update+0x264>)
 80012c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 80012cc:	e01b      	b.n	8001306 <update+0x1fa>
    } else {
        // Clear the end of the tail segment on the map if length is exceeded
        if (tail.length > 0) {
 80012ce:	4b28      	ldr	r3, [pc, #160]	@ (8001370 <update+0x264>)
 80012d0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d016      	beq.n	8001306 <update+0x1fa>
            map[tail.elements[tail.length][0]][tail.elements[tail.length][1]] = 0;
 80012d8:	4b25      	ldr	r3, [pc, #148]	@ (8001370 <update+0x264>)
 80012da:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80012de:	461a      	mov	r2, r3
 80012e0:	4b23      	ldr	r3, [pc, #140]	@ (8001370 <update+0x264>)
 80012e2:	f913 3012 	ldrsb.w	r3, [r3, r2, lsl #1]
 80012e6:	4618      	mov	r0, r3
 80012e8:	4b21      	ldr	r3, [pc, #132]	@ (8001370 <update+0x264>)
 80012ea:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80012ee:	4a20      	ldr	r2, [pc, #128]	@ (8001370 <update+0x264>)
 80012f0:	005b      	lsls	r3, r3, #1
 80012f2:	4413      	add	r3, r2
 80012f4:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80012f8:	4619      	mov	r1, r3
 80012fa:	4a1c      	ldr	r2, [pc, #112]	@ (800136c <update+0x260>)
 80012fc:	00c3      	lsls	r3, r0, #3
 80012fe:	4413      	add	r3, r2
 8001300:	440b      	add	r3, r1
 8001302:	2200      	movs	r2, #0
 8001304:	701a      	strb	r2, [r3, #0]
        }
    }

    // Update map with new head and tail positions
    map[snake.head_row][snake.head_col] = 1;
 8001306:	4b18      	ldr	r3, [pc, #96]	@ (8001368 <update+0x25c>)
 8001308:	f993 3000 	ldrsb.w	r3, [r3]
 800130c:	4618      	mov	r0, r3
 800130e:	4b16      	ldr	r3, [pc, #88]	@ (8001368 <update+0x25c>)
 8001310:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8001314:	4619      	mov	r1, r3
 8001316:	4a15      	ldr	r2, [pc, #84]	@ (800136c <update+0x260>)
 8001318:	00c3      	lsls	r3, r0, #3
 800131a:	4413      	add	r3, r2
 800131c:	440b      	add	r3, r1
 800131e:	2201      	movs	r2, #1
 8001320:	701a      	strb	r2, [r3, #0]
    for (u8 t = 0; t < tail.length; t++) {
 8001322:	2300      	movs	r3, #0
 8001324:	717b      	strb	r3, [r7, #5]
 8001326:	e014      	b.n	8001352 <update+0x246>
        map[tail.elements[t][0]][tail.elements[t][1]] = 1;
 8001328:	797b      	ldrb	r3, [r7, #5]
 800132a:	4a11      	ldr	r2, [pc, #68]	@ (8001370 <update+0x264>)
 800132c:	f912 3013 	ldrsb.w	r3, [r2, r3, lsl #1]
 8001330:	4618      	mov	r0, r3
 8001332:	797b      	ldrb	r3, [r7, #5]
 8001334:	4a0e      	ldr	r2, [pc, #56]	@ (8001370 <update+0x264>)
 8001336:	005b      	lsls	r3, r3, #1
 8001338:	4413      	add	r3, r2
 800133a:	f993 3001 	ldrsb.w	r3, [r3, #1]
 800133e:	4619      	mov	r1, r3
 8001340:	4a0a      	ldr	r2, [pc, #40]	@ (800136c <update+0x260>)
 8001342:	00c3      	lsls	r3, r0, #3
 8001344:	4413      	add	r3, r2
 8001346:	440b      	add	r3, r1
 8001348:	2201      	movs	r2, #1
 800134a:	701a      	strb	r2, [r3, #0]
    for (u8 t = 0; t < tail.length; t++) {
 800134c:	797b      	ldrb	r3, [r7, #5]
 800134e:	3301      	adds	r3, #1
 8001350:	717b      	strb	r3, [r7, #5]
 8001352:	4b07      	ldr	r3, [pc, #28]	@ (8001370 <update+0x264>)
 8001354:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001358:	797a      	ldrb	r2, [r7, #5]
 800135a:	429a      	cmp	r2, r3
 800135c:	d3e4      	bcc.n	8001328 <update+0x21c>
    }
}
 800135e:	370c      	adds	r7, #12
 8001360:	46bd      	mov	sp, r7
 8001362:	bc80      	pop	{r7}
 8001364:	4770      	bx	lr
 8001366:	bf00      	nop
 8001368:	20000020 	.word	0x20000020
 800136c:	200000e4 	.word	0x200000e4
 8001370:	20000134 	.word	0x20000134
 8001374:	20000000 	.word	0x20000000
 8001378:	20000130 	.word	0x20000130
 800137c:	2000012c 	.word	0x2000012c

08001380 <generate>:

// Generate a new fruit in a random location not occupied by the snake
void generate() {
 8001380:	b580      	push	{r7, lr}
 8001382:	af00      	add	r7, sp, #0
    if (fruit_flag == 0) {
 8001384:	4b1f      	ldr	r3, [pc, #124]	@ (8001404 <generate+0x84>)
 8001386:	781b      	ldrb	r3, [r3, #0]
 8001388:	2b00      	cmp	r3, #0
 800138a:	d139      	bne.n	8001400 <generate+0x80>
        do {
            fruit.fruit_row = rand() % 8;
 800138c:	f000 fa88 	bl	80018a0 <rand>
 8001390:	4603      	mov	r3, r0
 8001392:	425a      	negs	r2, r3
 8001394:	f003 0307 	and.w	r3, r3, #7
 8001398:	f002 0207 	and.w	r2, r2, #7
 800139c:	bf58      	it	pl
 800139e:	4253      	negpl	r3, r2
 80013a0:	b25a      	sxtb	r2, r3
 80013a2:	4b19      	ldr	r3, [pc, #100]	@ (8001408 <generate+0x88>)
 80013a4:	701a      	strb	r2, [r3, #0]
            fruit.fruit_col = rand() % 8;
 80013a6:	f000 fa7b 	bl	80018a0 <rand>
 80013aa:	4603      	mov	r3, r0
 80013ac:	425a      	negs	r2, r3
 80013ae:	f003 0307 	and.w	r3, r3, #7
 80013b2:	f002 0207 	and.w	r2, r2, #7
 80013b6:	bf58      	it	pl
 80013b8:	4253      	negpl	r3, r2
 80013ba:	b25a      	sxtb	r2, r3
 80013bc:	4b12      	ldr	r3, [pc, #72]	@ (8001408 <generate+0x88>)
 80013be:	705a      	strb	r2, [r3, #1]
        } while (map[fruit.fruit_row][fruit.fruit_col] == 1);  // Ensure fruit is not on the snake
 80013c0:	4b11      	ldr	r3, [pc, #68]	@ (8001408 <generate+0x88>)
 80013c2:	f993 3000 	ldrsb.w	r3, [r3]
 80013c6:	4618      	mov	r0, r3
 80013c8:	4b0f      	ldr	r3, [pc, #60]	@ (8001408 <generate+0x88>)
 80013ca:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80013ce:	4619      	mov	r1, r3
 80013d0:	4a0e      	ldr	r2, [pc, #56]	@ (800140c <generate+0x8c>)
 80013d2:	00c3      	lsls	r3, r0, #3
 80013d4:	4413      	add	r3, r2
 80013d6:	440b      	add	r3, r1
 80013d8:	781b      	ldrb	r3, [r3, #0]
 80013da:	2b01      	cmp	r3, #1
 80013dc:	d0d6      	beq.n	800138c <generate+0xc>
        map[fruit.fruit_row][fruit.fruit_col] = 1;
 80013de:	4b0a      	ldr	r3, [pc, #40]	@ (8001408 <generate+0x88>)
 80013e0:	f993 3000 	ldrsb.w	r3, [r3]
 80013e4:	4618      	mov	r0, r3
 80013e6:	4b08      	ldr	r3, [pc, #32]	@ (8001408 <generate+0x88>)
 80013e8:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80013ec:	4619      	mov	r1, r3
 80013ee:	4a07      	ldr	r2, [pc, #28]	@ (800140c <generate+0x8c>)
 80013f0:	00c3      	lsls	r3, r0, #3
 80013f2:	4413      	add	r3, r2
 80013f4:	440b      	add	r3, r1
 80013f6:	2201      	movs	r2, #1
 80013f8:	701a      	strb	r2, [r3, #0]
        fruit_flag = 1;  // Fruit placed
 80013fa:	4b02      	ldr	r3, [pc, #8]	@ (8001404 <generate+0x84>)
 80013fc:	2201      	movs	r2, #1
 80013fe:	701a      	strb	r2, [r3, #0]
    }
}
 8001400:	bf00      	nop
 8001402:	bd80      	pop	{r7, pc}
 8001404:	2000012c 	.word	0x2000012c
 8001408:	20000130 	.word	0x20000130
 800140c:	200000e4 	.word	0x200000e4

08001410 <main>:

int main() {
 8001410:	b580      	push	{r7, lr}
 8001412:	b084      	sub	sp, #16
 8001414:	af00      	add	r7, sp, #0
    RCC_voidInitSysClock();
 8001416:	f7ff fd73 	bl	8000f00 <RCC_voidInitSysClock>
    NVIC_Init();
 800141a:	f7ff fd4b 	bl	8000eb4 <NVIC_Init>
    NVIC_EnableInterrupt(NVIC_EXTI0);
 800141e:	2006      	movs	r0, #6
 8001420:	f7ff fd56 	bl	8000ed0 <NVIC_EnableInterrupt>
    NVIC_EnableInterrupt(NVIC_EXTI1);
 8001424:	2007      	movs	r0, #7
 8001426:	f7ff fd53 	bl	8000ed0 <NVIC_EnableInterrupt>
    NVIC_EnableInterrupt(NVIC_EXTI2);
 800142a:	2008      	movs	r0, #8
 800142c:	f7ff fd50 	bl	8000ed0 <NVIC_EnableInterrupt>
    NVIC_EnableInterrupt(NVIC_EXTI3);
 8001430:	2009      	movs	r0, #9
 8001432:	f7ff fd4d 	bl	8000ed0 <NVIC_EnableInterrupt>
    RCC_voidEnableClock(RCC_APB2, RCC_GPIOA);
 8001436:	2102      	movs	r1, #2
 8001438:	2002      	movs	r0, #2
 800143a:	f7ff fd7b 	bl	8000f34 <RCC_voidEnableClock>
    RCC_voidEnableClock(RCC_APB2, RCC_GPIOB);
 800143e:	2103      	movs	r1, #3
 8001440:	2002      	movs	r0, #2
 8001442:	f7ff fd77 	bl	8000f34 <RCC_voidEnableClock>
    LDMX_voidInit();
 8001446:	f7ff fa49 	bl	80008dc <LDMX_voidInit>
    LCD_voidLCDInit();
 800144a:	f7ff f961 	bl	8000710 <LCD_voidLCDInit>
    LCD_voidGoTo(4,1);
 800144e:	2101      	movs	r1, #1
 8001450:	2004      	movs	r0, #4
 8001452:	f7ff f99b 	bl	800078c <LCD_voidGoTo>
    LCD_voidWriteStrig("Welcome to");
 8001456:	487f      	ldr	r0, [pc, #508]	@ (8001654 <main+0x244>)
 8001458:	f7ff f9ca 	bl	80007f0 <LCD_voidWriteStrig>
    LCD_voidGoTo(4,2);
 800145c:	2102      	movs	r1, #2
 800145e:	2004      	movs	r0, #4
 8001460:	f7ff f994 	bl	800078c <LCD_voidGoTo>
    LCD_voidWriteStrig("Snake game");
 8001464:	487c      	ldr	r0, [pc, #496]	@ (8001658 <main+0x248>)
 8001466:	f7ff f9c3 	bl	80007f0 <LCD_voidWriteStrig>
    for(int j = 0;j< 100000;j++);
 800146a:	2300      	movs	r3, #0
 800146c:	60fb      	str	r3, [r7, #12]
 800146e:	e002      	b.n	8001476 <main+0x66>
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	3301      	adds	r3, #1
 8001474:	60fb      	str	r3, [r7, #12]
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	4a78      	ldr	r2, [pc, #480]	@ (800165c <main+0x24c>)
 800147a:	4293      	cmp	r3, r2
 800147c:	ddf8      	ble.n	8001470 <main+0x60>
    LCD_ClrLCD();
 800147e:	f7ff f9ab 	bl	80007d8 <LCD_ClrLCD>
    if(snake.dir == up){
 8001482:	4b77      	ldr	r3, [pc, #476]	@ (8001660 <main+0x250>)
 8001484:	789b      	ldrb	r3, [r3, #2]
 8001486:	2b00      	cmp	r3, #0
 8001488:	d115      	bne.n	80014b6 <main+0xa6>
    	LCD_voidGoTo(1, 1);
 800148a:	2101      	movs	r1, #1
 800148c:	2001      	movs	r0, #1
 800148e:	f7ff f97d 	bl	800078c <LCD_voidGoTo>
    	LCD_voidWriteStrig("Direction :");
 8001492:	4874      	ldr	r0, [pc, #464]	@ (8001664 <main+0x254>)
 8001494:	f7ff f9ac 	bl	80007f0 <LCD_voidWriteStrig>
    	LCD_voidGoTo(12, 1);
 8001498:	2101      	movs	r1, #1
 800149a:	200c      	movs	r0, #12
 800149c:	f7ff f976 	bl	800078c <LCD_voidGoTo>
    	LCD_voidWriteStrig(upd);
 80014a0:	4871      	ldr	r0, [pc, #452]	@ (8001668 <main+0x258>)
 80014a2:	f7ff f9a5 	bl	80007f0 <LCD_voidWriteStrig>
    	LCD_voidGoTo(14, 1);
 80014a6:	2101      	movs	r1, #1
 80014a8:	200e      	movs	r0, #14
 80014aa:	f7ff f96f 	bl	800078c <LCD_voidGoTo>
    	LCD_voidWriteStrig("   ");
 80014ae:	486f      	ldr	r0, [pc, #444]	@ (800166c <main+0x25c>)
 80014b0:	f7ff f99e 	bl	80007f0 <LCD_voidWriteStrig>
 80014b4:	e04c      	b.n	8001550 <main+0x140>
    }
    else if(snake.dir == right){
 80014b6:	4b6a      	ldr	r3, [pc, #424]	@ (8001660 <main+0x250>)
 80014b8:	789b      	ldrb	r3, [r3, #2]
 80014ba:	2b02      	cmp	r3, #2
 80014bc:	d115      	bne.n	80014ea <main+0xda>
    	LCD_voidGoTo(1, 1);
 80014be:	2101      	movs	r1, #1
 80014c0:	2001      	movs	r0, #1
 80014c2:	f7ff f963 	bl	800078c <LCD_voidGoTo>
    	LCD_voidWriteStrig("Direction :");
 80014c6:	4867      	ldr	r0, [pc, #412]	@ (8001664 <main+0x254>)
 80014c8:	f7ff f992 	bl	80007f0 <LCD_voidWriteStrig>
    	LCD_voidGoTo(12, 1);
 80014cc:	2101      	movs	r1, #1
 80014ce:	200c      	movs	r0, #12
 80014d0:	f7ff f95c 	bl	800078c <LCD_voidGoTo>
    	LCD_voidWriteStrig(rtd);
 80014d4:	4866      	ldr	r0, [pc, #408]	@ (8001670 <main+0x260>)
 80014d6:	f7ff f98b 	bl	80007f0 <LCD_voidWriteStrig>
    	LCD_voidGoTo(16, 1);
 80014da:	2101      	movs	r1, #1
 80014dc:	2010      	movs	r0, #16
 80014de:	f7ff f955 	bl	800078c <LCD_voidGoTo>
    	LCD_voidWriteStrig("");
 80014e2:	4864      	ldr	r0, [pc, #400]	@ (8001674 <main+0x264>)
 80014e4:	f7ff f984 	bl	80007f0 <LCD_voidWriteStrig>
 80014e8:	e032      	b.n	8001550 <main+0x140>
    }
    else if(snake.dir == left){
 80014ea:	4b5d      	ldr	r3, [pc, #372]	@ (8001660 <main+0x250>)
 80014ec:	789b      	ldrb	r3, [r3, #2]
 80014ee:	2b03      	cmp	r3, #3
 80014f0:	d115      	bne.n	800151e <main+0x10e>
    	LCD_voidGoTo(1, 1);
 80014f2:	2101      	movs	r1, #1
 80014f4:	2001      	movs	r0, #1
 80014f6:	f7ff f949 	bl	800078c <LCD_voidGoTo>
    	LCD_voidWriteStrig("Direction :");
 80014fa:	485a      	ldr	r0, [pc, #360]	@ (8001664 <main+0x254>)
 80014fc:	f7ff f978 	bl	80007f0 <LCD_voidWriteStrig>
    	LCD_voidGoTo(12, 1);
 8001500:	2101      	movs	r1, #1
 8001502:	200c      	movs	r0, #12
 8001504:	f7ff f942 	bl	800078c <LCD_voidGoTo>
    	LCD_voidWriteStrig(ltd);
 8001508:	485b      	ldr	r0, [pc, #364]	@ (8001678 <main+0x268>)
 800150a:	f7ff f971 	bl	80007f0 <LCD_voidWriteStrig>
    	LCD_voidGoTo(16, 1);
 800150e:	2101      	movs	r1, #1
 8001510:	2010      	movs	r0, #16
 8001512:	f7ff f93b 	bl	800078c <LCD_voidGoTo>
    	LCD_voidWriteStrig(" ");
 8001516:	4859      	ldr	r0, [pc, #356]	@ (800167c <main+0x26c>)
 8001518:	f7ff f96a 	bl	80007f0 <LCD_voidWriteStrig>
 800151c:	e018      	b.n	8001550 <main+0x140>
    }
    else if(snake.dir == down){
 800151e:	4b50      	ldr	r3, [pc, #320]	@ (8001660 <main+0x250>)
 8001520:	789b      	ldrb	r3, [r3, #2]
 8001522:	2b01      	cmp	r3, #1
 8001524:	d114      	bne.n	8001550 <main+0x140>
    	LCD_voidGoTo(1, 1);
 8001526:	2101      	movs	r1, #1
 8001528:	2001      	movs	r0, #1
 800152a:	f7ff f92f 	bl	800078c <LCD_voidGoTo>
    	LCD_voidWriteStrig("Direction :");
 800152e:	484d      	ldr	r0, [pc, #308]	@ (8001664 <main+0x254>)
 8001530:	f7ff f95e 	bl	80007f0 <LCD_voidWriteStrig>
    	LCD_voidGoTo(12, 1);
 8001534:	2101      	movs	r1, #1
 8001536:	200c      	movs	r0, #12
 8001538:	f7ff f928 	bl	800078c <LCD_voidGoTo>
    	LCD_voidWriteStrig(dnd);
 800153c:	4850      	ldr	r0, [pc, #320]	@ (8001680 <main+0x270>)
 800153e:	f7ff f957 	bl	80007f0 <LCD_voidWriteStrig>
    	LCD_voidGoTo(16, 1);
 8001542:	2101      	movs	r1, #1
 8001544:	2010      	movs	r0, #16
 8001546:	f7ff f921 	bl	800078c <LCD_voidGoTo>
    	LCD_voidWriteStrig(" ");
 800154a:	484c      	ldr	r0, [pc, #304]	@ (800167c <main+0x26c>)
 800154c:	f7ff f950 	bl	80007f0 <LCD_voidWriteStrig>
    }

    srand(time(0));  // Seed random number generator
 8001550:	2000      	movs	r0, #0
 8001552:	f000 faf1 	bl	8001b38 <time>
 8001556:	4602      	mov	r2, r0
 8001558:	460b      	mov	r3, r1
 800155a:	4613      	mov	r3, r2
 800155c:	4618      	mov	r0, r3
 800155e:	f000 f971 	bl	8001844 <srand>

    tail.length = 1; // Initialize tail length to 0 (no tail segments initially)
 8001562:	4b48      	ldr	r3, [pc, #288]	@ (8001684 <main+0x274>)
 8001564:	2201      	movs	r2, #1
 8001566:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    map[snake.head_row][snake.head_col] = 1;  // Initialize snake head on the map
 800156a:	4b3d      	ldr	r3, [pc, #244]	@ (8001660 <main+0x250>)
 800156c:	f993 3000 	ldrsb.w	r3, [r3]
 8001570:	4618      	mov	r0, r3
 8001572:	4b3b      	ldr	r3, [pc, #236]	@ (8001660 <main+0x250>)
 8001574:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8001578:	4619      	mov	r1, r3
 800157a:	4a43      	ldr	r2, [pc, #268]	@ (8001688 <main+0x278>)
 800157c:	00c3      	lsls	r3, r0, #3
 800157e:	4413      	add	r3, r2
 8001580:	440b      	add	r3, r1
 8001582:	2201      	movs	r2, #1
 8001584:	701a      	strb	r2, [r3, #0]


        while (win) {
 8001586:	e042      	b.n	800160e <main+0x1fe>
            update();
 8001588:	f7ff fdc0 	bl	800110c <update>
            draw(map);
 800158c:	483e      	ldr	r0, [pc, #248]	@ (8001688 <main+0x278>)
 800158e:	f7ff fd69 	bl	8001064 <draw>
            generate();
 8001592:	f7ff fef5 	bl	8001380 <generate>
            LCD_voidGoTo(1, 2);
 8001596:	2102      	movs	r1, #2
 8001598:	2001      	movs	r0, #1
 800159a:	f7ff f8f7 	bl	800078c <LCD_voidGoTo>
            LCD_voidWriteStrig("snake tall: ");
 800159e:	483b      	ldr	r0, [pc, #236]	@ (800168c <main+0x27c>)
 80015a0:	f7ff f926 	bl	80007f0 <LCD_voidWriteStrig>
            LCD_voidGoTo(13, 2);
 80015a4:	2102      	movs	r1, #2
 80015a6:	200d      	movs	r0, #13
 80015a8:	f7ff f8f0 	bl	800078c <LCD_voidGoTo>
            LCD_voidWriteNum(tail.length);
 80015ac:	4b35      	ldr	r3, [pc, #212]	@ (8001684 <main+0x274>)
 80015ae:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80015b2:	4618      	mov	r0, r3
 80015b4:	f7ff f938 	bl	8000828 <LCD_voidWriteNum>
            LCD_voidGoTo(14, 2);
 80015b8:	2102      	movs	r1, #2
 80015ba:	200e      	movs	r0, #14
 80015bc:	f7ff f8e6 	bl	800078c <LCD_voidGoTo>
            LCD_voidWriteStrig("   ");
 80015c0:	482a      	ldr	r0, [pc, #168]	@ (800166c <main+0x25c>)
 80015c2:	f7ff f915 	bl	80007f0 <LCD_voidWriteStrig>
            for (u8 w = 0; w < 15; w++) {
 80015c6:	2300      	movs	r3, #0
 80015c8:	72fb      	strb	r3, [r7, #11]
 80015ca:	e005      	b.n	80015d8 <main+0x1c8>
                LDMX_voidDisplay(ledmrx_array);
 80015cc:	4830      	ldr	r0, [pc, #192]	@ (8001690 <main+0x280>)
 80015ce:	f7ff f993 	bl	80008f8 <LDMX_voidDisplay>
            for (u8 w = 0; w < 15; w++) {
 80015d2:	7afb      	ldrb	r3, [r7, #11]
 80015d4:	3301      	adds	r3, #1
 80015d6:	72fb      	strb	r3, [r7, #11]
 80015d8:	7afb      	ldrb	r3, [r7, #11]
 80015da:	2b0e      	cmp	r3, #14
 80015dc:	d9f6      	bls.n	80015cc <main+0x1bc>
            }
            EXTI_voidConfigure(EXTI_LINE0, PORTB, EXTI_RISING_EDGE, Exti0_fun);
 80015de:	4b2d      	ldr	r3, [pc, #180]	@ (8001694 <main+0x284>)
 80015e0:	2200      	movs	r2, #0
 80015e2:	2101      	movs	r1, #1
 80015e4:	2000      	movs	r0, #0
 80015e6:	f7ff f9b9 	bl	800095c <EXTI_voidConfigure>
            EXTI_voidConfigure(EXTI_LINE1, PORTB, EXTI_RISING_EDGE, Exti1_fun);
 80015ea:	4b2b      	ldr	r3, [pc, #172]	@ (8001698 <main+0x288>)
 80015ec:	2200      	movs	r2, #0
 80015ee:	2101      	movs	r1, #1
 80015f0:	2001      	movs	r0, #1
 80015f2:	f7ff f9b3 	bl	800095c <EXTI_voidConfigure>
            EXTI_voidConfigure(EXTI_LINE2, PORTB, EXTI_RISING_EDGE, Exti2_fun);
 80015f6:	4b29      	ldr	r3, [pc, #164]	@ (800169c <main+0x28c>)
 80015f8:	2200      	movs	r2, #0
 80015fa:	2101      	movs	r1, #1
 80015fc:	2002      	movs	r0, #2
 80015fe:	f7ff f9ad 	bl	800095c <EXTI_voidConfigure>
            EXTI_voidConfigure(EXTI_LINE3, PORTB, EXTI_RISING_EDGE, Exti3_fun);
 8001602:	4b27      	ldr	r3, [pc, #156]	@ (80016a0 <main+0x290>)
 8001604:	2200      	movs	r2, #0
 8001606:	2101      	movs	r1, #1
 8001608:	2003      	movs	r0, #3
 800160a:	f7ff f9a7 	bl	800095c <EXTI_voidConfigure>
        while (win) {
 800160e:	4b25      	ldr	r3, [pc, #148]	@ (80016a4 <main+0x294>)
 8001610:	781b      	ldrb	r3, [r3, #0]
 8001612:	2b00      	cmp	r3, #0
 8001614:	d1b8      	bne.n	8001588 <main+0x178>
        }

    LCD_ClrLCD();
 8001616:	f7ff f8df 	bl	80007d8 <LCD_ClrLCD>
    for(int m = 0;m < 50;m++);
 800161a:	2300      	movs	r3, #0
 800161c:	607b      	str	r3, [r7, #4]
 800161e:	e002      	b.n	8001626 <main+0x216>
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	3301      	adds	r3, #1
 8001624:	607b      	str	r3, [r7, #4]
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	2b31      	cmp	r3, #49	@ 0x31
 800162a:	ddf9      	ble.n	8001620 <main+0x210>
    LCD_voidGoTo(7, 1);
 800162c:	2101      	movs	r1, #1
 800162e:	2007      	movs	r0, #7
 8001630:	f7ff f8ac 	bl	800078c <LCD_voidGoTo>
    LCD_voidWriteStrig("GAME ");
 8001634:	481c      	ldr	r0, [pc, #112]	@ (80016a8 <main+0x298>)
 8001636:	f7ff f8db 	bl	80007f0 <LCD_voidWriteStrig>
    LCD_voidGoTo(6, 2);
 800163a:	2102      	movs	r1, #2
 800163c:	2006      	movs	r0, #6
 800163e:	f7ff f8a5 	bl	800078c <LCD_voidGoTo>
    LCD_voidWriteStrig("OVER!!!");
 8001642:	481a      	ldr	r0, [pc, #104]	@ (80016ac <main+0x29c>)
 8001644:	f7ff f8d4 	bl	80007f0 <LCD_voidWriteStrig>

    return 0;
 8001648:	2300      	movs	r3, #0
}
 800164a:	4618      	mov	r0, r3
 800164c:	3710      	adds	r7, #16
 800164e:	46bd      	mov	sp, r7
 8001650:	bd80      	pop	{r7, pc}
 8001652:	bf00      	nop
 8001654:	08002988 	.word	0x08002988
 8001658:	08002994 	.word	0x08002994
 800165c:	0001869f 	.word	0x0001869f
 8001660:	20000020 	.word	0x20000020
 8001664:	080029a0 	.word	0x080029a0
 8001668:	20000004 	.word	0x20000004
 800166c:	080029ac 	.word	0x080029ac
 8001670:	20000008 	.word	0x20000008
 8001674:	080029b0 	.word	0x080029b0
 8001678:	20000010 	.word	0x20000010
 800167c:	080029b4 	.word	0x080029b4
 8001680:	20000018 	.word	0x20000018
 8001684:	20000134 	.word	0x20000134
 8001688:	200000e4 	.word	0x200000e4
 800168c:	080029b8 	.word	0x080029b8
 8001690:	20000124 	.word	0x20000124
 8001694:	080016b1 	.word	0x080016b1
 8001698:	08001701 	.word	0x08001701
 800169c:	08001751 	.word	0x08001751
 80016a0:	080017a1 	.word	0x080017a1
 80016a4:	20000000 	.word	0x20000000
 80016a8:	080029c8 	.word	0x080029c8
 80016ac:	080029d0 	.word	0x080029d0

080016b0 <Exti0_fun>:

void Exti0_fun() { if (snake.dir != down){
 80016b0:	b580      	push	{r7, lr}
 80016b2:	af00      	add	r7, sp, #0
 80016b4:	4b0e      	ldr	r3, [pc, #56]	@ (80016f0 <Exti0_fun+0x40>)
 80016b6:	789b      	ldrb	r3, [r3, #2]
 80016b8:	2b01      	cmp	r3, #1
 80016ba:	d017      	beq.n	80016ec <Exti0_fun+0x3c>
	snake.dir = up;
 80016bc:	4b0c      	ldr	r3, [pc, #48]	@ (80016f0 <Exti0_fun+0x40>)
 80016be:	2200      	movs	r2, #0
 80016c0:	709a      	strb	r2, [r3, #2]
	LCD_voidGoTo(1, 1);
 80016c2:	2101      	movs	r1, #1
 80016c4:	2001      	movs	r0, #1
 80016c6:	f7ff f861 	bl	800078c <LCD_voidGoTo>
	LCD_voidWriteStrig("Direction :");
 80016ca:	480a      	ldr	r0, [pc, #40]	@ (80016f4 <Exti0_fun+0x44>)
 80016cc:	f7ff f890 	bl	80007f0 <LCD_voidWriteStrig>
	LCD_voidGoTo(12, 1);
 80016d0:	2101      	movs	r1, #1
 80016d2:	200c      	movs	r0, #12
 80016d4:	f7ff f85a 	bl	800078c <LCD_voidGoTo>
	LCD_voidWriteStrig(upd);
 80016d8:	4807      	ldr	r0, [pc, #28]	@ (80016f8 <Exti0_fun+0x48>)
 80016da:	f7ff f889 	bl	80007f0 <LCD_voidWriteStrig>
	LCD_voidGoTo(14, 1);
 80016de:	2101      	movs	r1, #1
 80016e0:	200e      	movs	r0, #14
 80016e2:	f7ff f853 	bl	800078c <LCD_voidGoTo>
	LCD_voidWriteStrig("   ");
 80016e6:	4805      	ldr	r0, [pc, #20]	@ (80016fc <Exti0_fun+0x4c>)
 80016e8:	f7ff f882 	bl	80007f0 <LCD_voidWriteStrig>
}
}
 80016ec:	bf00      	nop
 80016ee:	bd80      	pop	{r7, pc}
 80016f0:	20000020 	.word	0x20000020
 80016f4:	080029a0 	.word	0x080029a0
 80016f8:	20000004 	.word	0x20000004
 80016fc:	080029ac 	.word	0x080029ac

08001700 <Exti1_fun>:
void Exti1_fun() { if (snake.dir != left){
 8001700:	b580      	push	{r7, lr}
 8001702:	af00      	add	r7, sp, #0
 8001704:	4b0e      	ldr	r3, [pc, #56]	@ (8001740 <Exti1_fun+0x40>)
 8001706:	789b      	ldrb	r3, [r3, #2]
 8001708:	2b03      	cmp	r3, #3
 800170a:	d017      	beq.n	800173c <Exti1_fun+0x3c>
	snake.dir = right;
 800170c:	4b0c      	ldr	r3, [pc, #48]	@ (8001740 <Exti1_fun+0x40>)
 800170e:	2202      	movs	r2, #2
 8001710:	709a      	strb	r2, [r3, #2]
	LCD_voidGoTo(1, 1);
 8001712:	2101      	movs	r1, #1
 8001714:	2001      	movs	r0, #1
 8001716:	f7ff f839 	bl	800078c <LCD_voidGoTo>
	LCD_voidWriteStrig("Direction :");
 800171a:	480a      	ldr	r0, [pc, #40]	@ (8001744 <Exti1_fun+0x44>)
 800171c:	f7ff f868 	bl	80007f0 <LCD_voidWriteStrig>
	LCD_voidGoTo(12, 1);
 8001720:	2101      	movs	r1, #1
 8001722:	200c      	movs	r0, #12
 8001724:	f7ff f832 	bl	800078c <LCD_voidGoTo>
	LCD_voidWriteStrig(rtd);
 8001728:	4807      	ldr	r0, [pc, #28]	@ (8001748 <Exti1_fun+0x48>)
 800172a:	f7ff f861 	bl	80007f0 <LCD_voidWriteStrig>
	LCD_voidGoTo(16, 1);
 800172e:	2101      	movs	r1, #1
 8001730:	2010      	movs	r0, #16
 8001732:	f7ff f82b 	bl	800078c <LCD_voidGoTo>
	LCD_voidWriteStrig("");
 8001736:	4805      	ldr	r0, [pc, #20]	@ (800174c <Exti1_fun+0x4c>)
 8001738:	f7ff f85a 	bl	80007f0 <LCD_voidWriteStrig>
}
}
 800173c:	bf00      	nop
 800173e:	bd80      	pop	{r7, pc}
 8001740:	20000020 	.word	0x20000020
 8001744:	080029a0 	.word	0x080029a0
 8001748:	20000008 	.word	0x20000008
 800174c:	080029b0 	.word	0x080029b0

08001750 <Exti2_fun>:
void Exti2_fun() { if (snake.dir != right){
 8001750:	b580      	push	{r7, lr}
 8001752:	af00      	add	r7, sp, #0
 8001754:	4b0e      	ldr	r3, [pc, #56]	@ (8001790 <Exti2_fun+0x40>)
 8001756:	789b      	ldrb	r3, [r3, #2]
 8001758:	2b02      	cmp	r3, #2
 800175a:	d017      	beq.n	800178c <Exti2_fun+0x3c>
	snake.dir = left;
 800175c:	4b0c      	ldr	r3, [pc, #48]	@ (8001790 <Exti2_fun+0x40>)
 800175e:	2203      	movs	r2, #3
 8001760:	709a      	strb	r2, [r3, #2]
	LCD_voidGoTo(1, 1);
 8001762:	2101      	movs	r1, #1
 8001764:	2001      	movs	r0, #1
 8001766:	f7ff f811 	bl	800078c <LCD_voidGoTo>
	LCD_voidWriteStrig("Direction :");
 800176a:	480a      	ldr	r0, [pc, #40]	@ (8001794 <Exti2_fun+0x44>)
 800176c:	f7ff f840 	bl	80007f0 <LCD_voidWriteStrig>
	LCD_voidGoTo(12, 1);
 8001770:	2101      	movs	r1, #1
 8001772:	200c      	movs	r0, #12
 8001774:	f7ff f80a 	bl	800078c <LCD_voidGoTo>
	LCD_voidWriteStrig(ltd);
 8001778:	4807      	ldr	r0, [pc, #28]	@ (8001798 <Exti2_fun+0x48>)
 800177a:	f7ff f839 	bl	80007f0 <LCD_voidWriteStrig>
	LCD_voidGoTo(16, 1);
 800177e:	2101      	movs	r1, #1
 8001780:	2010      	movs	r0, #16
 8001782:	f7ff f803 	bl	800078c <LCD_voidGoTo>
	LCD_voidWriteStrig(" ");
 8001786:	4805      	ldr	r0, [pc, #20]	@ (800179c <Exti2_fun+0x4c>)
 8001788:	f7ff f832 	bl	80007f0 <LCD_voidWriteStrig>
}
}
 800178c:	bf00      	nop
 800178e:	bd80      	pop	{r7, pc}
 8001790:	20000020 	.word	0x20000020
 8001794:	080029a0 	.word	0x080029a0
 8001798:	20000010 	.word	0x20000010
 800179c:	080029b4 	.word	0x080029b4

080017a0 <Exti3_fun>:
void Exti3_fun() { if (snake.dir != up){
 80017a0:	b580      	push	{r7, lr}
 80017a2:	af00      	add	r7, sp, #0
 80017a4:	4b0e      	ldr	r3, [pc, #56]	@ (80017e0 <Exti3_fun+0x40>)
 80017a6:	789b      	ldrb	r3, [r3, #2]
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d017      	beq.n	80017dc <Exti3_fun+0x3c>
	snake.dir = down;
 80017ac:	4b0c      	ldr	r3, [pc, #48]	@ (80017e0 <Exti3_fun+0x40>)
 80017ae:	2201      	movs	r2, #1
 80017b0:	709a      	strb	r2, [r3, #2]
	LCD_voidGoTo(1, 1);
 80017b2:	2101      	movs	r1, #1
 80017b4:	2001      	movs	r0, #1
 80017b6:	f7fe ffe9 	bl	800078c <LCD_voidGoTo>
	LCD_voidWriteStrig("Direction :");
 80017ba:	480a      	ldr	r0, [pc, #40]	@ (80017e4 <Exti3_fun+0x44>)
 80017bc:	f7ff f818 	bl	80007f0 <LCD_voidWriteStrig>
	LCD_voidGoTo(12, 1);
 80017c0:	2101      	movs	r1, #1
 80017c2:	200c      	movs	r0, #12
 80017c4:	f7fe ffe2 	bl	800078c <LCD_voidGoTo>
	LCD_voidWriteStrig(dnd);
 80017c8:	4807      	ldr	r0, [pc, #28]	@ (80017e8 <Exti3_fun+0x48>)
 80017ca:	f7ff f811 	bl	80007f0 <LCD_voidWriteStrig>
	LCD_voidGoTo(16, 1);
 80017ce:	2101      	movs	r1, #1
 80017d0:	2010      	movs	r0, #16
 80017d2:	f7fe ffdb 	bl	800078c <LCD_voidGoTo>
	LCD_voidWriteStrig(" ");
 80017d6:	4805      	ldr	r0, [pc, #20]	@ (80017ec <Exti3_fun+0x4c>)
 80017d8:	f7ff f80a 	bl	80007f0 <LCD_voidWriteStrig>
}
}
 80017dc:	bf00      	nop
 80017de:	bd80      	pop	{r7, pc}
 80017e0:	20000020 	.word	0x20000020
 80017e4:	080029a0 	.word	0x080029a0
 80017e8:	20000018 	.word	0x20000018
 80017ec:	080029b4 	.word	0x080029b4

080017f0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80017f0:	480d      	ldr	r0, [pc, #52]	@ (8001828 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80017f2:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80017f4:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80017f8:	480c      	ldr	r0, [pc, #48]	@ (800182c <LoopForever+0x6>)
  ldr r1, =_edata
 80017fa:	490d      	ldr	r1, [pc, #52]	@ (8001830 <LoopForever+0xa>)
  ldr r2, =_sidata
 80017fc:	4a0d      	ldr	r2, [pc, #52]	@ (8001834 <LoopForever+0xe>)
  movs r3, #0
 80017fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001800:	e002      	b.n	8001808 <LoopCopyDataInit>

08001802 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001802:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001804:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001806:	3304      	adds	r3, #4

08001808 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001808:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800180a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800180c:	d3f9      	bcc.n	8001802 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800180e:	4a0a      	ldr	r2, [pc, #40]	@ (8001838 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001810:	4c0a      	ldr	r4, [pc, #40]	@ (800183c <LoopForever+0x16>)
  movs r3, #0
 8001812:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001814:	e001      	b.n	800181a <LoopFillZerobss>

08001816 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001816:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001818:	3204      	adds	r2, #4

0800181a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800181a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800181c:	d3fb      	bcc.n	8001816 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800181e:	f000 f9ff 	bl	8001c20 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001822:	f7ff fdf5 	bl	8001410 <main>

08001826 <LoopForever>:

LoopForever:
  b LoopForever
 8001826:	e7fe      	b.n	8001826 <LoopForever>
  ldr   r0, =_estack
 8001828:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 800182c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001830:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 8001834:	08002ac0 	.word	0x08002ac0
  ldr r2, =_sbss
 8001838:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 800183c:	200002c4 	.word	0x200002c4

08001840 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001840:	e7fe      	b.n	8001840 <ADC1_2_IRQHandler>
	...

08001844 <srand>:
 8001844:	b538      	push	{r3, r4, r5, lr}
 8001846:	4b10      	ldr	r3, [pc, #64]	@ (8001888 <srand+0x44>)
 8001848:	4604      	mov	r4, r0
 800184a:	681d      	ldr	r5, [r3, #0]
 800184c:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 800184e:	b9b3      	cbnz	r3, 800187e <srand+0x3a>
 8001850:	2018      	movs	r0, #24
 8001852:	f000 fa73 	bl	8001d3c <malloc>
 8001856:	4602      	mov	r2, r0
 8001858:	6328      	str	r0, [r5, #48]	@ 0x30
 800185a:	b920      	cbnz	r0, 8001866 <srand+0x22>
 800185c:	2146      	movs	r1, #70	@ 0x46
 800185e:	4b0b      	ldr	r3, [pc, #44]	@ (800188c <srand+0x48>)
 8001860:	480b      	ldr	r0, [pc, #44]	@ (8001890 <srand+0x4c>)
 8001862:	f000 fa05 	bl	8001c70 <__assert_func>
 8001866:	490b      	ldr	r1, [pc, #44]	@ (8001894 <srand+0x50>)
 8001868:	4b0b      	ldr	r3, [pc, #44]	@ (8001898 <srand+0x54>)
 800186a:	e9c0 1300 	strd	r1, r3, [r0]
 800186e:	4b0b      	ldr	r3, [pc, #44]	@ (800189c <srand+0x58>)
 8001870:	2100      	movs	r1, #0
 8001872:	6083      	str	r3, [r0, #8]
 8001874:	230b      	movs	r3, #11
 8001876:	8183      	strh	r3, [r0, #12]
 8001878:	2001      	movs	r0, #1
 800187a:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800187e:	2200      	movs	r2, #0
 8001880:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8001882:	611c      	str	r4, [r3, #16]
 8001884:	615a      	str	r2, [r3, #20]
 8001886:	bd38      	pop	{r3, r4, r5, pc}
 8001888:	20000030 	.word	0x20000030
 800188c:	080029d8 	.word	0x080029d8
 8001890:	080029ef 	.word	0x080029ef
 8001894:	abcd330e 	.word	0xabcd330e
 8001898:	e66d1234 	.word	0xe66d1234
 800189c:	0005deec 	.word	0x0005deec

080018a0 <rand>:
 80018a0:	4b16      	ldr	r3, [pc, #88]	@ (80018fc <rand+0x5c>)
 80018a2:	b510      	push	{r4, lr}
 80018a4:	681c      	ldr	r4, [r3, #0]
 80018a6:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80018a8:	b9b3      	cbnz	r3, 80018d8 <rand+0x38>
 80018aa:	2018      	movs	r0, #24
 80018ac:	f000 fa46 	bl	8001d3c <malloc>
 80018b0:	4602      	mov	r2, r0
 80018b2:	6320      	str	r0, [r4, #48]	@ 0x30
 80018b4:	b920      	cbnz	r0, 80018c0 <rand+0x20>
 80018b6:	2152      	movs	r1, #82	@ 0x52
 80018b8:	4b11      	ldr	r3, [pc, #68]	@ (8001900 <rand+0x60>)
 80018ba:	4812      	ldr	r0, [pc, #72]	@ (8001904 <rand+0x64>)
 80018bc:	f000 f9d8 	bl	8001c70 <__assert_func>
 80018c0:	4911      	ldr	r1, [pc, #68]	@ (8001908 <rand+0x68>)
 80018c2:	4b12      	ldr	r3, [pc, #72]	@ (800190c <rand+0x6c>)
 80018c4:	e9c0 1300 	strd	r1, r3, [r0]
 80018c8:	4b11      	ldr	r3, [pc, #68]	@ (8001910 <rand+0x70>)
 80018ca:	2100      	movs	r1, #0
 80018cc:	6083      	str	r3, [r0, #8]
 80018ce:	230b      	movs	r3, #11
 80018d0:	8183      	strh	r3, [r0, #12]
 80018d2:	2001      	movs	r0, #1
 80018d4:	e9c2 0104 	strd	r0, r1, [r2, #16]
 80018d8:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80018da:	480e      	ldr	r0, [pc, #56]	@ (8001914 <rand+0x74>)
 80018dc:	690b      	ldr	r3, [r1, #16]
 80018de:	694c      	ldr	r4, [r1, #20]
 80018e0:	4358      	muls	r0, r3
 80018e2:	4a0d      	ldr	r2, [pc, #52]	@ (8001918 <rand+0x78>)
 80018e4:	fb02 0004 	mla	r0, r2, r4, r0
 80018e8:	fba3 3202 	umull	r3, r2, r3, r2
 80018ec:	3301      	adds	r3, #1
 80018ee:	eb40 0002 	adc.w	r0, r0, r2
 80018f2:	e9c1 3004 	strd	r3, r0, [r1, #16]
 80018f6:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 80018fa:	bd10      	pop	{r4, pc}
 80018fc:	20000030 	.word	0x20000030
 8001900:	080029d8 	.word	0x080029d8
 8001904:	080029ef 	.word	0x080029ef
 8001908:	abcd330e 	.word	0xabcd330e
 800190c:	e66d1234 	.word	0xe66d1234
 8001910:	0005deec 	.word	0x0005deec
 8001914:	5851f42d 	.word	0x5851f42d
 8001918:	4c957f2d 	.word	0x4c957f2d

0800191c <std>:
 800191c:	2300      	movs	r3, #0
 800191e:	b510      	push	{r4, lr}
 8001920:	4604      	mov	r4, r0
 8001922:	e9c0 3300 	strd	r3, r3, [r0]
 8001926:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800192a:	6083      	str	r3, [r0, #8]
 800192c:	8181      	strh	r1, [r0, #12]
 800192e:	6643      	str	r3, [r0, #100]	@ 0x64
 8001930:	81c2      	strh	r2, [r0, #14]
 8001932:	6183      	str	r3, [r0, #24]
 8001934:	4619      	mov	r1, r3
 8001936:	2208      	movs	r2, #8
 8001938:	305c      	adds	r0, #92	@ 0x5c
 800193a:	f000 f8f4 	bl	8001b26 <memset>
 800193e:	4b0d      	ldr	r3, [pc, #52]	@ (8001974 <std+0x58>)
 8001940:	6224      	str	r4, [r4, #32]
 8001942:	6263      	str	r3, [r4, #36]	@ 0x24
 8001944:	4b0c      	ldr	r3, [pc, #48]	@ (8001978 <std+0x5c>)
 8001946:	62a3      	str	r3, [r4, #40]	@ 0x28
 8001948:	4b0c      	ldr	r3, [pc, #48]	@ (800197c <std+0x60>)
 800194a:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800194c:	4b0c      	ldr	r3, [pc, #48]	@ (8001980 <std+0x64>)
 800194e:	6323      	str	r3, [r4, #48]	@ 0x30
 8001950:	4b0c      	ldr	r3, [pc, #48]	@ (8001984 <std+0x68>)
 8001952:	429c      	cmp	r4, r3
 8001954:	d006      	beq.n	8001964 <std+0x48>
 8001956:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800195a:	4294      	cmp	r4, r2
 800195c:	d002      	beq.n	8001964 <std+0x48>
 800195e:	33d0      	adds	r3, #208	@ 0xd0
 8001960:	429c      	cmp	r4, r3
 8001962:	d105      	bne.n	8001970 <std+0x54>
 8001964:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8001968:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800196c:	f000 b97c 	b.w	8001c68 <__retarget_lock_init_recursive>
 8001970:	bd10      	pop	{r4, pc}
 8001972:	bf00      	nop
 8001974:	08001aa1 	.word	0x08001aa1
 8001978:	08001ac3 	.word	0x08001ac3
 800197c:	08001afb 	.word	0x08001afb
 8001980:	08001b1f 	.word	0x08001b1f
 8001984:	20000174 	.word	0x20000174

08001988 <stdio_exit_handler>:
 8001988:	4a02      	ldr	r2, [pc, #8]	@ (8001994 <stdio_exit_handler+0xc>)
 800198a:	4903      	ldr	r1, [pc, #12]	@ (8001998 <stdio_exit_handler+0x10>)
 800198c:	4803      	ldr	r0, [pc, #12]	@ (800199c <stdio_exit_handler+0x14>)
 800198e:	f000 b869 	b.w	8001a64 <_fwalk_sglue>
 8001992:	bf00      	nop
 8001994:	20000024 	.word	0x20000024
 8001998:	08001fa9 	.word	0x08001fa9
 800199c:	20000034 	.word	0x20000034

080019a0 <cleanup_stdio>:
 80019a0:	6841      	ldr	r1, [r0, #4]
 80019a2:	4b0c      	ldr	r3, [pc, #48]	@ (80019d4 <cleanup_stdio+0x34>)
 80019a4:	b510      	push	{r4, lr}
 80019a6:	4299      	cmp	r1, r3
 80019a8:	4604      	mov	r4, r0
 80019aa:	d001      	beq.n	80019b0 <cleanup_stdio+0x10>
 80019ac:	f000 fafc 	bl	8001fa8 <_fflush_r>
 80019b0:	68a1      	ldr	r1, [r4, #8]
 80019b2:	4b09      	ldr	r3, [pc, #36]	@ (80019d8 <cleanup_stdio+0x38>)
 80019b4:	4299      	cmp	r1, r3
 80019b6:	d002      	beq.n	80019be <cleanup_stdio+0x1e>
 80019b8:	4620      	mov	r0, r4
 80019ba:	f000 faf5 	bl	8001fa8 <_fflush_r>
 80019be:	68e1      	ldr	r1, [r4, #12]
 80019c0:	4b06      	ldr	r3, [pc, #24]	@ (80019dc <cleanup_stdio+0x3c>)
 80019c2:	4299      	cmp	r1, r3
 80019c4:	d004      	beq.n	80019d0 <cleanup_stdio+0x30>
 80019c6:	4620      	mov	r0, r4
 80019c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80019cc:	f000 baec 	b.w	8001fa8 <_fflush_r>
 80019d0:	bd10      	pop	{r4, pc}
 80019d2:	bf00      	nop
 80019d4:	20000174 	.word	0x20000174
 80019d8:	200001dc 	.word	0x200001dc
 80019dc:	20000244 	.word	0x20000244

080019e0 <global_stdio_init.part.0>:
 80019e0:	b510      	push	{r4, lr}
 80019e2:	4b0b      	ldr	r3, [pc, #44]	@ (8001a10 <global_stdio_init.part.0+0x30>)
 80019e4:	4c0b      	ldr	r4, [pc, #44]	@ (8001a14 <global_stdio_init.part.0+0x34>)
 80019e6:	4a0c      	ldr	r2, [pc, #48]	@ (8001a18 <global_stdio_init.part.0+0x38>)
 80019e8:	4620      	mov	r0, r4
 80019ea:	601a      	str	r2, [r3, #0]
 80019ec:	2104      	movs	r1, #4
 80019ee:	2200      	movs	r2, #0
 80019f0:	f7ff ff94 	bl	800191c <std>
 80019f4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80019f8:	2201      	movs	r2, #1
 80019fa:	2109      	movs	r1, #9
 80019fc:	f7ff ff8e 	bl	800191c <std>
 8001a00:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8001a04:	2202      	movs	r2, #2
 8001a06:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001a0a:	2112      	movs	r1, #18
 8001a0c:	f7ff bf86 	b.w	800191c <std>
 8001a10:	200002ac 	.word	0x200002ac
 8001a14:	20000174 	.word	0x20000174
 8001a18:	08001989 	.word	0x08001989

08001a1c <__sfp_lock_acquire>:
 8001a1c:	4801      	ldr	r0, [pc, #4]	@ (8001a24 <__sfp_lock_acquire+0x8>)
 8001a1e:	f000 b924 	b.w	8001c6a <__retarget_lock_acquire_recursive>
 8001a22:	bf00      	nop
 8001a24:	200002b5 	.word	0x200002b5

08001a28 <__sfp_lock_release>:
 8001a28:	4801      	ldr	r0, [pc, #4]	@ (8001a30 <__sfp_lock_release+0x8>)
 8001a2a:	f000 b91f 	b.w	8001c6c <__retarget_lock_release_recursive>
 8001a2e:	bf00      	nop
 8001a30:	200002b5 	.word	0x200002b5

08001a34 <__sinit>:
 8001a34:	b510      	push	{r4, lr}
 8001a36:	4604      	mov	r4, r0
 8001a38:	f7ff fff0 	bl	8001a1c <__sfp_lock_acquire>
 8001a3c:	6a23      	ldr	r3, [r4, #32]
 8001a3e:	b11b      	cbz	r3, 8001a48 <__sinit+0x14>
 8001a40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001a44:	f7ff bff0 	b.w	8001a28 <__sfp_lock_release>
 8001a48:	4b04      	ldr	r3, [pc, #16]	@ (8001a5c <__sinit+0x28>)
 8001a4a:	6223      	str	r3, [r4, #32]
 8001a4c:	4b04      	ldr	r3, [pc, #16]	@ (8001a60 <__sinit+0x2c>)
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d1f5      	bne.n	8001a40 <__sinit+0xc>
 8001a54:	f7ff ffc4 	bl	80019e0 <global_stdio_init.part.0>
 8001a58:	e7f2      	b.n	8001a40 <__sinit+0xc>
 8001a5a:	bf00      	nop
 8001a5c:	080019a1 	.word	0x080019a1
 8001a60:	200002ac 	.word	0x200002ac

08001a64 <_fwalk_sglue>:
 8001a64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001a68:	4607      	mov	r7, r0
 8001a6a:	4688      	mov	r8, r1
 8001a6c:	4614      	mov	r4, r2
 8001a6e:	2600      	movs	r6, #0
 8001a70:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8001a74:	f1b9 0901 	subs.w	r9, r9, #1
 8001a78:	d505      	bpl.n	8001a86 <_fwalk_sglue+0x22>
 8001a7a:	6824      	ldr	r4, [r4, #0]
 8001a7c:	2c00      	cmp	r4, #0
 8001a7e:	d1f7      	bne.n	8001a70 <_fwalk_sglue+0xc>
 8001a80:	4630      	mov	r0, r6
 8001a82:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001a86:	89ab      	ldrh	r3, [r5, #12]
 8001a88:	2b01      	cmp	r3, #1
 8001a8a:	d907      	bls.n	8001a9c <_fwalk_sglue+0x38>
 8001a8c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8001a90:	3301      	adds	r3, #1
 8001a92:	d003      	beq.n	8001a9c <_fwalk_sglue+0x38>
 8001a94:	4629      	mov	r1, r5
 8001a96:	4638      	mov	r0, r7
 8001a98:	47c0      	blx	r8
 8001a9a:	4306      	orrs	r6, r0
 8001a9c:	3568      	adds	r5, #104	@ 0x68
 8001a9e:	e7e9      	b.n	8001a74 <_fwalk_sglue+0x10>

08001aa0 <__sread>:
 8001aa0:	b510      	push	{r4, lr}
 8001aa2:	460c      	mov	r4, r1
 8001aa4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001aa8:	f000 f896 	bl	8001bd8 <_read_r>
 8001aac:	2800      	cmp	r0, #0
 8001aae:	bfab      	itete	ge
 8001ab0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8001ab2:	89a3      	ldrhlt	r3, [r4, #12]
 8001ab4:	181b      	addge	r3, r3, r0
 8001ab6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8001aba:	bfac      	ite	ge
 8001abc:	6563      	strge	r3, [r4, #84]	@ 0x54
 8001abe:	81a3      	strhlt	r3, [r4, #12]
 8001ac0:	bd10      	pop	{r4, pc}

08001ac2 <__swrite>:
 8001ac2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001ac6:	461f      	mov	r7, r3
 8001ac8:	898b      	ldrh	r3, [r1, #12]
 8001aca:	4605      	mov	r5, r0
 8001acc:	05db      	lsls	r3, r3, #23
 8001ace:	460c      	mov	r4, r1
 8001ad0:	4616      	mov	r6, r2
 8001ad2:	d505      	bpl.n	8001ae0 <__swrite+0x1e>
 8001ad4:	2302      	movs	r3, #2
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001adc:	f000 f86a 	bl	8001bb4 <_lseek_r>
 8001ae0:	89a3      	ldrh	r3, [r4, #12]
 8001ae2:	4632      	mov	r2, r6
 8001ae4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001ae8:	81a3      	strh	r3, [r4, #12]
 8001aea:	4628      	mov	r0, r5
 8001aec:	463b      	mov	r3, r7
 8001aee:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001af2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001af6:	f000 b881 	b.w	8001bfc <_write_r>

08001afa <__sseek>:
 8001afa:	b510      	push	{r4, lr}
 8001afc:	460c      	mov	r4, r1
 8001afe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001b02:	f000 f857 	bl	8001bb4 <_lseek_r>
 8001b06:	1c43      	adds	r3, r0, #1
 8001b08:	89a3      	ldrh	r3, [r4, #12]
 8001b0a:	bf15      	itete	ne
 8001b0c:	6560      	strne	r0, [r4, #84]	@ 0x54
 8001b0e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8001b12:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8001b16:	81a3      	strheq	r3, [r4, #12]
 8001b18:	bf18      	it	ne
 8001b1a:	81a3      	strhne	r3, [r4, #12]
 8001b1c:	bd10      	pop	{r4, pc}

08001b1e <__sclose>:
 8001b1e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001b22:	f000 b825 	b.w	8001b70 <_close_r>

08001b26 <memset>:
 8001b26:	4603      	mov	r3, r0
 8001b28:	4402      	add	r2, r0
 8001b2a:	4293      	cmp	r3, r2
 8001b2c:	d100      	bne.n	8001b30 <memset+0xa>
 8001b2e:	4770      	bx	lr
 8001b30:	f803 1b01 	strb.w	r1, [r3], #1
 8001b34:	e7f9      	b.n	8001b2a <memset+0x4>
	...

08001b38 <time>:
 8001b38:	b5df      	push	{r0, r1, r2, r3, r4, r6, r7, lr}
 8001b3a:	f04f 36ff 	mov.w	r6, #4294967295
 8001b3e:	f04f 37ff 	mov.w	r7, #4294967295
 8001b42:	4b0a      	ldr	r3, [pc, #40]	@ (8001b6c <time+0x34>)
 8001b44:	4604      	mov	r4, r0
 8001b46:	2200      	movs	r2, #0
 8001b48:	4669      	mov	r1, sp
 8001b4a:	6818      	ldr	r0, [r3, #0]
 8001b4c:	e9cd 6700 	strd	r6, r7, [sp]
 8001b50:	f000 f81e 	bl	8001b90 <_gettimeofday_r>
 8001b54:	2800      	cmp	r0, #0
 8001b56:	da01      	bge.n	8001b5c <time+0x24>
 8001b58:	e9cd 6700 	strd	r6, r7, [sp]
 8001b5c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8001b60:	b10c      	cbz	r4, 8001b66 <time+0x2e>
 8001b62:	e9c4 0100 	strd	r0, r1, [r4]
 8001b66:	b004      	add	sp, #16
 8001b68:	bdd0      	pop	{r4, r6, r7, pc}
 8001b6a:	bf00      	nop
 8001b6c:	20000030 	.word	0x20000030

08001b70 <_close_r>:
 8001b70:	b538      	push	{r3, r4, r5, lr}
 8001b72:	2300      	movs	r3, #0
 8001b74:	4d05      	ldr	r5, [pc, #20]	@ (8001b8c <_close_r+0x1c>)
 8001b76:	4604      	mov	r4, r0
 8001b78:	4608      	mov	r0, r1
 8001b7a:	602b      	str	r3, [r5, #0]
 8001b7c:	f000 fea0 	bl	80028c0 <_close>
 8001b80:	1c43      	adds	r3, r0, #1
 8001b82:	d102      	bne.n	8001b8a <_close_r+0x1a>
 8001b84:	682b      	ldr	r3, [r5, #0]
 8001b86:	b103      	cbz	r3, 8001b8a <_close_r+0x1a>
 8001b88:	6023      	str	r3, [r4, #0]
 8001b8a:	bd38      	pop	{r3, r4, r5, pc}
 8001b8c:	200002b0 	.word	0x200002b0

08001b90 <_gettimeofday_r>:
 8001b90:	b538      	push	{r3, r4, r5, lr}
 8001b92:	2300      	movs	r3, #0
 8001b94:	4d06      	ldr	r5, [pc, #24]	@ (8001bb0 <_gettimeofday_r+0x20>)
 8001b96:	4604      	mov	r4, r0
 8001b98:	4608      	mov	r0, r1
 8001b9a:	4611      	mov	r1, r2
 8001b9c:	602b      	str	r3, [r5, #0]
 8001b9e:	f000 fea7 	bl	80028f0 <_gettimeofday>
 8001ba2:	1c43      	adds	r3, r0, #1
 8001ba4:	d102      	bne.n	8001bac <_gettimeofday_r+0x1c>
 8001ba6:	682b      	ldr	r3, [r5, #0]
 8001ba8:	b103      	cbz	r3, 8001bac <_gettimeofday_r+0x1c>
 8001baa:	6023      	str	r3, [r4, #0]
 8001bac:	bd38      	pop	{r3, r4, r5, pc}
 8001bae:	bf00      	nop
 8001bb0:	200002b0 	.word	0x200002b0

08001bb4 <_lseek_r>:
 8001bb4:	b538      	push	{r3, r4, r5, lr}
 8001bb6:	4604      	mov	r4, r0
 8001bb8:	4608      	mov	r0, r1
 8001bba:	4611      	mov	r1, r2
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	4d05      	ldr	r5, [pc, #20]	@ (8001bd4 <_lseek_r+0x20>)
 8001bc0:	602a      	str	r2, [r5, #0]
 8001bc2:	461a      	mov	r2, r3
 8001bc4:	f000 feac 	bl	8002920 <_lseek>
 8001bc8:	1c43      	adds	r3, r0, #1
 8001bca:	d102      	bne.n	8001bd2 <_lseek_r+0x1e>
 8001bcc:	682b      	ldr	r3, [r5, #0]
 8001bce:	b103      	cbz	r3, 8001bd2 <_lseek_r+0x1e>
 8001bd0:	6023      	str	r3, [r4, #0]
 8001bd2:	bd38      	pop	{r3, r4, r5, pc}
 8001bd4:	200002b0 	.word	0x200002b0

08001bd8 <_read_r>:
 8001bd8:	b538      	push	{r3, r4, r5, lr}
 8001bda:	4604      	mov	r4, r0
 8001bdc:	4608      	mov	r0, r1
 8001bde:	4611      	mov	r1, r2
 8001be0:	2200      	movs	r2, #0
 8001be2:	4d05      	ldr	r5, [pc, #20]	@ (8001bf8 <_read_r+0x20>)
 8001be4:	602a      	str	r2, [r5, #0]
 8001be6:	461a      	mov	r2, r3
 8001be8:	f000 fea2 	bl	8002930 <_read>
 8001bec:	1c43      	adds	r3, r0, #1
 8001bee:	d102      	bne.n	8001bf6 <_read_r+0x1e>
 8001bf0:	682b      	ldr	r3, [r5, #0]
 8001bf2:	b103      	cbz	r3, 8001bf6 <_read_r+0x1e>
 8001bf4:	6023      	str	r3, [r4, #0]
 8001bf6:	bd38      	pop	{r3, r4, r5, pc}
 8001bf8:	200002b0 	.word	0x200002b0

08001bfc <_write_r>:
 8001bfc:	b538      	push	{r3, r4, r5, lr}
 8001bfe:	4604      	mov	r4, r0
 8001c00:	4608      	mov	r0, r1
 8001c02:	4611      	mov	r1, r2
 8001c04:	2200      	movs	r2, #0
 8001c06:	4d05      	ldr	r5, [pc, #20]	@ (8001c1c <_write_r+0x20>)
 8001c08:	602a      	str	r2, [r5, #0]
 8001c0a:	461a      	mov	r2, r3
 8001c0c:	f000 fea6 	bl	800295c <_write>
 8001c10:	1c43      	adds	r3, r0, #1
 8001c12:	d102      	bne.n	8001c1a <_write_r+0x1e>
 8001c14:	682b      	ldr	r3, [r5, #0]
 8001c16:	b103      	cbz	r3, 8001c1a <_write_r+0x1e>
 8001c18:	6023      	str	r3, [r4, #0]
 8001c1a:	bd38      	pop	{r3, r4, r5, pc}
 8001c1c:	200002b0 	.word	0x200002b0

08001c20 <__libc_init_array>:
 8001c20:	b570      	push	{r4, r5, r6, lr}
 8001c22:	2600      	movs	r6, #0
 8001c24:	4d0c      	ldr	r5, [pc, #48]	@ (8001c58 <__libc_init_array+0x38>)
 8001c26:	4c0d      	ldr	r4, [pc, #52]	@ (8001c5c <__libc_init_array+0x3c>)
 8001c28:	1b64      	subs	r4, r4, r5
 8001c2a:	10a4      	asrs	r4, r4, #2
 8001c2c:	42a6      	cmp	r6, r4
 8001c2e:	d109      	bne.n	8001c44 <__libc_init_array+0x24>
 8001c30:	f000 fe9e 	bl	8002970 <_init>
 8001c34:	2600      	movs	r6, #0
 8001c36:	4d0a      	ldr	r5, [pc, #40]	@ (8001c60 <__libc_init_array+0x40>)
 8001c38:	4c0a      	ldr	r4, [pc, #40]	@ (8001c64 <__libc_init_array+0x44>)
 8001c3a:	1b64      	subs	r4, r4, r5
 8001c3c:	10a4      	asrs	r4, r4, #2
 8001c3e:	42a6      	cmp	r6, r4
 8001c40:	d105      	bne.n	8001c4e <__libc_init_array+0x2e>
 8001c42:	bd70      	pop	{r4, r5, r6, pc}
 8001c44:	f855 3b04 	ldr.w	r3, [r5], #4
 8001c48:	4798      	blx	r3
 8001c4a:	3601      	adds	r6, #1
 8001c4c:	e7ee      	b.n	8001c2c <__libc_init_array+0xc>
 8001c4e:	f855 3b04 	ldr.w	r3, [r5], #4
 8001c52:	4798      	blx	r3
 8001c54:	3601      	adds	r6, #1
 8001c56:	e7f2      	b.n	8001c3e <__libc_init_array+0x1e>
 8001c58:	08002ab8 	.word	0x08002ab8
 8001c5c:	08002ab8 	.word	0x08002ab8
 8001c60:	08002ab8 	.word	0x08002ab8
 8001c64:	08002abc 	.word	0x08002abc

08001c68 <__retarget_lock_init_recursive>:
 8001c68:	4770      	bx	lr

08001c6a <__retarget_lock_acquire_recursive>:
 8001c6a:	4770      	bx	lr

08001c6c <__retarget_lock_release_recursive>:
 8001c6c:	4770      	bx	lr
	...

08001c70 <__assert_func>:
 8001c70:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8001c72:	4614      	mov	r4, r2
 8001c74:	461a      	mov	r2, r3
 8001c76:	4b09      	ldr	r3, [pc, #36]	@ (8001c9c <__assert_func+0x2c>)
 8001c78:	4605      	mov	r5, r0
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	68d8      	ldr	r0, [r3, #12]
 8001c7e:	b954      	cbnz	r4, 8001c96 <__assert_func+0x26>
 8001c80:	4b07      	ldr	r3, [pc, #28]	@ (8001ca0 <__assert_func+0x30>)
 8001c82:	461c      	mov	r4, r3
 8001c84:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8001c88:	9100      	str	r1, [sp, #0]
 8001c8a:	462b      	mov	r3, r5
 8001c8c:	4905      	ldr	r1, [pc, #20]	@ (8001ca4 <__assert_func+0x34>)
 8001c8e:	f000 f9b3 	bl	8001ff8 <fiprintf>
 8001c92:	f000 f9d3 	bl	800203c <abort>
 8001c96:	4b04      	ldr	r3, [pc, #16]	@ (8001ca8 <__assert_func+0x38>)
 8001c98:	e7f4      	b.n	8001c84 <__assert_func+0x14>
 8001c9a:	bf00      	nop
 8001c9c:	20000030 	.word	0x20000030
 8001ca0:	08002a82 	.word	0x08002a82
 8001ca4:	08002a54 	.word	0x08002a54
 8001ca8:	08002a47 	.word	0x08002a47

08001cac <_free_r>:
 8001cac:	b538      	push	{r3, r4, r5, lr}
 8001cae:	4605      	mov	r5, r0
 8001cb0:	2900      	cmp	r1, #0
 8001cb2:	d040      	beq.n	8001d36 <_free_r+0x8a>
 8001cb4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001cb8:	1f0c      	subs	r4, r1, #4
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	bfb8      	it	lt
 8001cbe:	18e4      	addlt	r4, r4, r3
 8001cc0:	f000 f8e6 	bl	8001e90 <__malloc_lock>
 8001cc4:	4a1c      	ldr	r2, [pc, #112]	@ (8001d38 <_free_r+0x8c>)
 8001cc6:	6813      	ldr	r3, [r2, #0]
 8001cc8:	b933      	cbnz	r3, 8001cd8 <_free_r+0x2c>
 8001cca:	6063      	str	r3, [r4, #4]
 8001ccc:	6014      	str	r4, [r2, #0]
 8001cce:	4628      	mov	r0, r5
 8001cd0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001cd4:	f000 b8e2 	b.w	8001e9c <__malloc_unlock>
 8001cd8:	42a3      	cmp	r3, r4
 8001cda:	d908      	bls.n	8001cee <_free_r+0x42>
 8001cdc:	6820      	ldr	r0, [r4, #0]
 8001cde:	1821      	adds	r1, r4, r0
 8001ce0:	428b      	cmp	r3, r1
 8001ce2:	bf01      	itttt	eq
 8001ce4:	6819      	ldreq	r1, [r3, #0]
 8001ce6:	685b      	ldreq	r3, [r3, #4]
 8001ce8:	1809      	addeq	r1, r1, r0
 8001cea:	6021      	streq	r1, [r4, #0]
 8001cec:	e7ed      	b.n	8001cca <_free_r+0x1e>
 8001cee:	461a      	mov	r2, r3
 8001cf0:	685b      	ldr	r3, [r3, #4]
 8001cf2:	b10b      	cbz	r3, 8001cf8 <_free_r+0x4c>
 8001cf4:	42a3      	cmp	r3, r4
 8001cf6:	d9fa      	bls.n	8001cee <_free_r+0x42>
 8001cf8:	6811      	ldr	r1, [r2, #0]
 8001cfa:	1850      	adds	r0, r2, r1
 8001cfc:	42a0      	cmp	r0, r4
 8001cfe:	d10b      	bne.n	8001d18 <_free_r+0x6c>
 8001d00:	6820      	ldr	r0, [r4, #0]
 8001d02:	4401      	add	r1, r0
 8001d04:	1850      	adds	r0, r2, r1
 8001d06:	4283      	cmp	r3, r0
 8001d08:	6011      	str	r1, [r2, #0]
 8001d0a:	d1e0      	bne.n	8001cce <_free_r+0x22>
 8001d0c:	6818      	ldr	r0, [r3, #0]
 8001d0e:	685b      	ldr	r3, [r3, #4]
 8001d10:	4408      	add	r0, r1
 8001d12:	6010      	str	r0, [r2, #0]
 8001d14:	6053      	str	r3, [r2, #4]
 8001d16:	e7da      	b.n	8001cce <_free_r+0x22>
 8001d18:	d902      	bls.n	8001d20 <_free_r+0x74>
 8001d1a:	230c      	movs	r3, #12
 8001d1c:	602b      	str	r3, [r5, #0]
 8001d1e:	e7d6      	b.n	8001cce <_free_r+0x22>
 8001d20:	6820      	ldr	r0, [r4, #0]
 8001d22:	1821      	adds	r1, r4, r0
 8001d24:	428b      	cmp	r3, r1
 8001d26:	bf01      	itttt	eq
 8001d28:	6819      	ldreq	r1, [r3, #0]
 8001d2a:	685b      	ldreq	r3, [r3, #4]
 8001d2c:	1809      	addeq	r1, r1, r0
 8001d2e:	6021      	streq	r1, [r4, #0]
 8001d30:	6063      	str	r3, [r4, #4]
 8001d32:	6054      	str	r4, [r2, #4]
 8001d34:	e7cb      	b.n	8001cce <_free_r+0x22>
 8001d36:	bd38      	pop	{r3, r4, r5, pc}
 8001d38:	200002bc 	.word	0x200002bc

08001d3c <malloc>:
 8001d3c:	4b02      	ldr	r3, [pc, #8]	@ (8001d48 <malloc+0xc>)
 8001d3e:	4601      	mov	r1, r0
 8001d40:	6818      	ldr	r0, [r3, #0]
 8001d42:	f000 b825 	b.w	8001d90 <_malloc_r>
 8001d46:	bf00      	nop
 8001d48:	20000030 	.word	0x20000030

08001d4c <sbrk_aligned>:
 8001d4c:	b570      	push	{r4, r5, r6, lr}
 8001d4e:	4e0f      	ldr	r6, [pc, #60]	@ (8001d8c <sbrk_aligned+0x40>)
 8001d50:	460c      	mov	r4, r1
 8001d52:	6831      	ldr	r1, [r6, #0]
 8001d54:	4605      	mov	r5, r0
 8001d56:	b911      	cbnz	r1, 8001d5e <sbrk_aligned+0x12>
 8001d58:	f000 f960 	bl	800201c <_sbrk_r>
 8001d5c:	6030      	str	r0, [r6, #0]
 8001d5e:	4621      	mov	r1, r4
 8001d60:	4628      	mov	r0, r5
 8001d62:	f000 f95b 	bl	800201c <_sbrk_r>
 8001d66:	1c43      	adds	r3, r0, #1
 8001d68:	d103      	bne.n	8001d72 <sbrk_aligned+0x26>
 8001d6a:	f04f 34ff 	mov.w	r4, #4294967295
 8001d6e:	4620      	mov	r0, r4
 8001d70:	bd70      	pop	{r4, r5, r6, pc}
 8001d72:	1cc4      	adds	r4, r0, #3
 8001d74:	f024 0403 	bic.w	r4, r4, #3
 8001d78:	42a0      	cmp	r0, r4
 8001d7a:	d0f8      	beq.n	8001d6e <sbrk_aligned+0x22>
 8001d7c:	1a21      	subs	r1, r4, r0
 8001d7e:	4628      	mov	r0, r5
 8001d80:	f000 f94c 	bl	800201c <_sbrk_r>
 8001d84:	3001      	adds	r0, #1
 8001d86:	d1f2      	bne.n	8001d6e <sbrk_aligned+0x22>
 8001d88:	e7ef      	b.n	8001d6a <sbrk_aligned+0x1e>
 8001d8a:	bf00      	nop
 8001d8c:	200002b8 	.word	0x200002b8

08001d90 <_malloc_r>:
 8001d90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001d94:	1ccd      	adds	r5, r1, #3
 8001d96:	f025 0503 	bic.w	r5, r5, #3
 8001d9a:	3508      	adds	r5, #8
 8001d9c:	2d0c      	cmp	r5, #12
 8001d9e:	bf38      	it	cc
 8001da0:	250c      	movcc	r5, #12
 8001da2:	2d00      	cmp	r5, #0
 8001da4:	4606      	mov	r6, r0
 8001da6:	db01      	blt.n	8001dac <_malloc_r+0x1c>
 8001da8:	42a9      	cmp	r1, r5
 8001daa:	d904      	bls.n	8001db6 <_malloc_r+0x26>
 8001dac:	230c      	movs	r3, #12
 8001dae:	6033      	str	r3, [r6, #0]
 8001db0:	2000      	movs	r0, #0
 8001db2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001db6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8001e8c <_malloc_r+0xfc>
 8001dba:	f000 f869 	bl	8001e90 <__malloc_lock>
 8001dbe:	f8d8 3000 	ldr.w	r3, [r8]
 8001dc2:	461c      	mov	r4, r3
 8001dc4:	bb44      	cbnz	r4, 8001e18 <_malloc_r+0x88>
 8001dc6:	4629      	mov	r1, r5
 8001dc8:	4630      	mov	r0, r6
 8001dca:	f7ff ffbf 	bl	8001d4c <sbrk_aligned>
 8001dce:	1c43      	adds	r3, r0, #1
 8001dd0:	4604      	mov	r4, r0
 8001dd2:	d158      	bne.n	8001e86 <_malloc_r+0xf6>
 8001dd4:	f8d8 4000 	ldr.w	r4, [r8]
 8001dd8:	4627      	mov	r7, r4
 8001dda:	2f00      	cmp	r7, #0
 8001ddc:	d143      	bne.n	8001e66 <_malloc_r+0xd6>
 8001dde:	2c00      	cmp	r4, #0
 8001de0:	d04b      	beq.n	8001e7a <_malloc_r+0xea>
 8001de2:	6823      	ldr	r3, [r4, #0]
 8001de4:	4639      	mov	r1, r7
 8001de6:	4630      	mov	r0, r6
 8001de8:	eb04 0903 	add.w	r9, r4, r3
 8001dec:	f000 f916 	bl	800201c <_sbrk_r>
 8001df0:	4581      	cmp	r9, r0
 8001df2:	d142      	bne.n	8001e7a <_malloc_r+0xea>
 8001df4:	6821      	ldr	r1, [r4, #0]
 8001df6:	4630      	mov	r0, r6
 8001df8:	1a6d      	subs	r5, r5, r1
 8001dfa:	4629      	mov	r1, r5
 8001dfc:	f7ff ffa6 	bl	8001d4c <sbrk_aligned>
 8001e00:	3001      	adds	r0, #1
 8001e02:	d03a      	beq.n	8001e7a <_malloc_r+0xea>
 8001e04:	6823      	ldr	r3, [r4, #0]
 8001e06:	442b      	add	r3, r5
 8001e08:	6023      	str	r3, [r4, #0]
 8001e0a:	f8d8 3000 	ldr.w	r3, [r8]
 8001e0e:	685a      	ldr	r2, [r3, #4]
 8001e10:	bb62      	cbnz	r2, 8001e6c <_malloc_r+0xdc>
 8001e12:	f8c8 7000 	str.w	r7, [r8]
 8001e16:	e00f      	b.n	8001e38 <_malloc_r+0xa8>
 8001e18:	6822      	ldr	r2, [r4, #0]
 8001e1a:	1b52      	subs	r2, r2, r5
 8001e1c:	d420      	bmi.n	8001e60 <_malloc_r+0xd0>
 8001e1e:	2a0b      	cmp	r2, #11
 8001e20:	d917      	bls.n	8001e52 <_malloc_r+0xc2>
 8001e22:	1961      	adds	r1, r4, r5
 8001e24:	42a3      	cmp	r3, r4
 8001e26:	6025      	str	r5, [r4, #0]
 8001e28:	bf18      	it	ne
 8001e2a:	6059      	strne	r1, [r3, #4]
 8001e2c:	6863      	ldr	r3, [r4, #4]
 8001e2e:	bf08      	it	eq
 8001e30:	f8c8 1000 	streq.w	r1, [r8]
 8001e34:	5162      	str	r2, [r4, r5]
 8001e36:	604b      	str	r3, [r1, #4]
 8001e38:	4630      	mov	r0, r6
 8001e3a:	f000 f82f 	bl	8001e9c <__malloc_unlock>
 8001e3e:	f104 000b 	add.w	r0, r4, #11
 8001e42:	1d23      	adds	r3, r4, #4
 8001e44:	f020 0007 	bic.w	r0, r0, #7
 8001e48:	1ac2      	subs	r2, r0, r3
 8001e4a:	bf1c      	itt	ne
 8001e4c:	1a1b      	subne	r3, r3, r0
 8001e4e:	50a3      	strne	r3, [r4, r2]
 8001e50:	e7af      	b.n	8001db2 <_malloc_r+0x22>
 8001e52:	6862      	ldr	r2, [r4, #4]
 8001e54:	42a3      	cmp	r3, r4
 8001e56:	bf0c      	ite	eq
 8001e58:	f8c8 2000 	streq.w	r2, [r8]
 8001e5c:	605a      	strne	r2, [r3, #4]
 8001e5e:	e7eb      	b.n	8001e38 <_malloc_r+0xa8>
 8001e60:	4623      	mov	r3, r4
 8001e62:	6864      	ldr	r4, [r4, #4]
 8001e64:	e7ae      	b.n	8001dc4 <_malloc_r+0x34>
 8001e66:	463c      	mov	r4, r7
 8001e68:	687f      	ldr	r7, [r7, #4]
 8001e6a:	e7b6      	b.n	8001dda <_malloc_r+0x4a>
 8001e6c:	461a      	mov	r2, r3
 8001e6e:	685b      	ldr	r3, [r3, #4]
 8001e70:	42a3      	cmp	r3, r4
 8001e72:	d1fb      	bne.n	8001e6c <_malloc_r+0xdc>
 8001e74:	2300      	movs	r3, #0
 8001e76:	6053      	str	r3, [r2, #4]
 8001e78:	e7de      	b.n	8001e38 <_malloc_r+0xa8>
 8001e7a:	230c      	movs	r3, #12
 8001e7c:	4630      	mov	r0, r6
 8001e7e:	6033      	str	r3, [r6, #0]
 8001e80:	f000 f80c 	bl	8001e9c <__malloc_unlock>
 8001e84:	e794      	b.n	8001db0 <_malloc_r+0x20>
 8001e86:	6005      	str	r5, [r0, #0]
 8001e88:	e7d6      	b.n	8001e38 <_malloc_r+0xa8>
 8001e8a:	bf00      	nop
 8001e8c:	200002bc 	.word	0x200002bc

08001e90 <__malloc_lock>:
 8001e90:	4801      	ldr	r0, [pc, #4]	@ (8001e98 <__malloc_lock+0x8>)
 8001e92:	f7ff beea 	b.w	8001c6a <__retarget_lock_acquire_recursive>
 8001e96:	bf00      	nop
 8001e98:	200002b4 	.word	0x200002b4

08001e9c <__malloc_unlock>:
 8001e9c:	4801      	ldr	r0, [pc, #4]	@ (8001ea4 <__malloc_unlock+0x8>)
 8001e9e:	f7ff bee5 	b.w	8001c6c <__retarget_lock_release_recursive>
 8001ea2:	bf00      	nop
 8001ea4:	200002b4 	.word	0x200002b4

08001ea8 <__sflush_r>:
 8001ea8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8001eac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001eae:	0716      	lsls	r6, r2, #28
 8001eb0:	4605      	mov	r5, r0
 8001eb2:	460c      	mov	r4, r1
 8001eb4:	d454      	bmi.n	8001f60 <__sflush_r+0xb8>
 8001eb6:	684b      	ldr	r3, [r1, #4]
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	dc02      	bgt.n	8001ec2 <__sflush_r+0x1a>
 8001ebc:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	dd48      	ble.n	8001f54 <__sflush_r+0xac>
 8001ec2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8001ec4:	2e00      	cmp	r6, #0
 8001ec6:	d045      	beq.n	8001f54 <__sflush_r+0xac>
 8001ec8:	2300      	movs	r3, #0
 8001eca:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8001ece:	682f      	ldr	r7, [r5, #0]
 8001ed0:	6a21      	ldr	r1, [r4, #32]
 8001ed2:	602b      	str	r3, [r5, #0]
 8001ed4:	d030      	beq.n	8001f38 <__sflush_r+0x90>
 8001ed6:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8001ed8:	89a3      	ldrh	r3, [r4, #12]
 8001eda:	0759      	lsls	r1, r3, #29
 8001edc:	d505      	bpl.n	8001eea <__sflush_r+0x42>
 8001ede:	6863      	ldr	r3, [r4, #4]
 8001ee0:	1ad2      	subs	r2, r2, r3
 8001ee2:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8001ee4:	b10b      	cbz	r3, 8001eea <__sflush_r+0x42>
 8001ee6:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8001ee8:	1ad2      	subs	r2, r2, r3
 8001eea:	2300      	movs	r3, #0
 8001eec:	4628      	mov	r0, r5
 8001eee:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8001ef0:	6a21      	ldr	r1, [r4, #32]
 8001ef2:	47b0      	blx	r6
 8001ef4:	1c43      	adds	r3, r0, #1
 8001ef6:	89a3      	ldrh	r3, [r4, #12]
 8001ef8:	d106      	bne.n	8001f08 <__sflush_r+0x60>
 8001efa:	6829      	ldr	r1, [r5, #0]
 8001efc:	291d      	cmp	r1, #29
 8001efe:	d82b      	bhi.n	8001f58 <__sflush_r+0xb0>
 8001f00:	4a28      	ldr	r2, [pc, #160]	@ (8001fa4 <__sflush_r+0xfc>)
 8001f02:	410a      	asrs	r2, r1
 8001f04:	07d6      	lsls	r6, r2, #31
 8001f06:	d427      	bmi.n	8001f58 <__sflush_r+0xb0>
 8001f08:	2200      	movs	r2, #0
 8001f0a:	6062      	str	r2, [r4, #4]
 8001f0c:	6922      	ldr	r2, [r4, #16]
 8001f0e:	04d9      	lsls	r1, r3, #19
 8001f10:	6022      	str	r2, [r4, #0]
 8001f12:	d504      	bpl.n	8001f1e <__sflush_r+0x76>
 8001f14:	1c42      	adds	r2, r0, #1
 8001f16:	d101      	bne.n	8001f1c <__sflush_r+0x74>
 8001f18:	682b      	ldr	r3, [r5, #0]
 8001f1a:	b903      	cbnz	r3, 8001f1e <__sflush_r+0x76>
 8001f1c:	6560      	str	r0, [r4, #84]	@ 0x54
 8001f1e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8001f20:	602f      	str	r7, [r5, #0]
 8001f22:	b1b9      	cbz	r1, 8001f54 <__sflush_r+0xac>
 8001f24:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8001f28:	4299      	cmp	r1, r3
 8001f2a:	d002      	beq.n	8001f32 <__sflush_r+0x8a>
 8001f2c:	4628      	mov	r0, r5
 8001f2e:	f7ff febd 	bl	8001cac <_free_r>
 8001f32:	2300      	movs	r3, #0
 8001f34:	6363      	str	r3, [r4, #52]	@ 0x34
 8001f36:	e00d      	b.n	8001f54 <__sflush_r+0xac>
 8001f38:	2301      	movs	r3, #1
 8001f3a:	4628      	mov	r0, r5
 8001f3c:	47b0      	blx	r6
 8001f3e:	4602      	mov	r2, r0
 8001f40:	1c50      	adds	r0, r2, #1
 8001f42:	d1c9      	bne.n	8001ed8 <__sflush_r+0x30>
 8001f44:	682b      	ldr	r3, [r5, #0]
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d0c6      	beq.n	8001ed8 <__sflush_r+0x30>
 8001f4a:	2b1d      	cmp	r3, #29
 8001f4c:	d001      	beq.n	8001f52 <__sflush_r+0xaa>
 8001f4e:	2b16      	cmp	r3, #22
 8001f50:	d11d      	bne.n	8001f8e <__sflush_r+0xe6>
 8001f52:	602f      	str	r7, [r5, #0]
 8001f54:	2000      	movs	r0, #0
 8001f56:	e021      	b.n	8001f9c <__sflush_r+0xf4>
 8001f58:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001f5c:	b21b      	sxth	r3, r3
 8001f5e:	e01a      	b.n	8001f96 <__sflush_r+0xee>
 8001f60:	690f      	ldr	r7, [r1, #16]
 8001f62:	2f00      	cmp	r7, #0
 8001f64:	d0f6      	beq.n	8001f54 <__sflush_r+0xac>
 8001f66:	0793      	lsls	r3, r2, #30
 8001f68:	bf18      	it	ne
 8001f6a:	2300      	movne	r3, #0
 8001f6c:	680e      	ldr	r6, [r1, #0]
 8001f6e:	bf08      	it	eq
 8001f70:	694b      	ldreq	r3, [r1, #20]
 8001f72:	1bf6      	subs	r6, r6, r7
 8001f74:	600f      	str	r7, [r1, #0]
 8001f76:	608b      	str	r3, [r1, #8]
 8001f78:	2e00      	cmp	r6, #0
 8001f7a:	ddeb      	ble.n	8001f54 <__sflush_r+0xac>
 8001f7c:	4633      	mov	r3, r6
 8001f7e:	463a      	mov	r2, r7
 8001f80:	4628      	mov	r0, r5
 8001f82:	6a21      	ldr	r1, [r4, #32]
 8001f84:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8001f88:	47e0      	blx	ip
 8001f8a:	2800      	cmp	r0, #0
 8001f8c:	dc07      	bgt.n	8001f9e <__sflush_r+0xf6>
 8001f8e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001f92:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001f96:	f04f 30ff 	mov.w	r0, #4294967295
 8001f9a:	81a3      	strh	r3, [r4, #12]
 8001f9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001f9e:	4407      	add	r7, r0
 8001fa0:	1a36      	subs	r6, r6, r0
 8001fa2:	e7e9      	b.n	8001f78 <__sflush_r+0xd0>
 8001fa4:	dfbffffe 	.word	0xdfbffffe

08001fa8 <_fflush_r>:
 8001fa8:	b538      	push	{r3, r4, r5, lr}
 8001faa:	690b      	ldr	r3, [r1, #16]
 8001fac:	4605      	mov	r5, r0
 8001fae:	460c      	mov	r4, r1
 8001fb0:	b913      	cbnz	r3, 8001fb8 <_fflush_r+0x10>
 8001fb2:	2500      	movs	r5, #0
 8001fb4:	4628      	mov	r0, r5
 8001fb6:	bd38      	pop	{r3, r4, r5, pc}
 8001fb8:	b118      	cbz	r0, 8001fc2 <_fflush_r+0x1a>
 8001fba:	6a03      	ldr	r3, [r0, #32]
 8001fbc:	b90b      	cbnz	r3, 8001fc2 <_fflush_r+0x1a>
 8001fbe:	f7ff fd39 	bl	8001a34 <__sinit>
 8001fc2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d0f3      	beq.n	8001fb2 <_fflush_r+0xa>
 8001fca:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8001fcc:	07d0      	lsls	r0, r2, #31
 8001fce:	d404      	bmi.n	8001fda <_fflush_r+0x32>
 8001fd0:	0599      	lsls	r1, r3, #22
 8001fd2:	d402      	bmi.n	8001fda <_fflush_r+0x32>
 8001fd4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8001fd6:	f7ff fe48 	bl	8001c6a <__retarget_lock_acquire_recursive>
 8001fda:	4628      	mov	r0, r5
 8001fdc:	4621      	mov	r1, r4
 8001fde:	f7ff ff63 	bl	8001ea8 <__sflush_r>
 8001fe2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8001fe4:	4605      	mov	r5, r0
 8001fe6:	07da      	lsls	r2, r3, #31
 8001fe8:	d4e4      	bmi.n	8001fb4 <_fflush_r+0xc>
 8001fea:	89a3      	ldrh	r3, [r4, #12]
 8001fec:	059b      	lsls	r3, r3, #22
 8001fee:	d4e1      	bmi.n	8001fb4 <_fflush_r+0xc>
 8001ff0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8001ff2:	f7ff fe3b 	bl	8001c6c <__retarget_lock_release_recursive>
 8001ff6:	e7dd      	b.n	8001fb4 <_fflush_r+0xc>

08001ff8 <fiprintf>:
 8001ff8:	b40e      	push	{r1, r2, r3}
 8001ffa:	b503      	push	{r0, r1, lr}
 8001ffc:	4601      	mov	r1, r0
 8001ffe:	ab03      	add	r3, sp, #12
 8002000:	4805      	ldr	r0, [pc, #20]	@ (8002018 <fiprintf+0x20>)
 8002002:	f853 2b04 	ldr.w	r2, [r3], #4
 8002006:	6800      	ldr	r0, [r0, #0]
 8002008:	9301      	str	r3, [sp, #4]
 800200a:	f000 f845 	bl	8002098 <_vfiprintf_r>
 800200e:	b002      	add	sp, #8
 8002010:	f85d eb04 	ldr.w	lr, [sp], #4
 8002014:	b003      	add	sp, #12
 8002016:	4770      	bx	lr
 8002018:	20000030 	.word	0x20000030

0800201c <_sbrk_r>:
 800201c:	b538      	push	{r3, r4, r5, lr}
 800201e:	2300      	movs	r3, #0
 8002020:	4d05      	ldr	r5, [pc, #20]	@ (8002038 <_sbrk_r+0x1c>)
 8002022:	4604      	mov	r4, r0
 8002024:	4608      	mov	r0, r1
 8002026:	602b      	str	r3, [r5, #0]
 8002028:	f000 fc8a 	bl	8002940 <_sbrk>
 800202c:	1c43      	adds	r3, r0, #1
 800202e:	d102      	bne.n	8002036 <_sbrk_r+0x1a>
 8002030:	682b      	ldr	r3, [r5, #0]
 8002032:	b103      	cbz	r3, 8002036 <_sbrk_r+0x1a>
 8002034:	6023      	str	r3, [r4, #0]
 8002036:	bd38      	pop	{r3, r4, r5, pc}
 8002038:	200002b0 	.word	0x200002b0

0800203c <abort>:
 800203c:	2006      	movs	r0, #6
 800203e:	b508      	push	{r3, lr}
 8002040:	f000 fb90 	bl	8002764 <raise>
 8002044:	2001      	movs	r0, #1
 8002046:	f000 fc91 	bl	800296c <_exit>

0800204a <__sfputc_r>:
 800204a:	6893      	ldr	r3, [r2, #8]
 800204c:	b410      	push	{r4}
 800204e:	3b01      	subs	r3, #1
 8002050:	2b00      	cmp	r3, #0
 8002052:	6093      	str	r3, [r2, #8]
 8002054:	da07      	bge.n	8002066 <__sfputc_r+0x1c>
 8002056:	6994      	ldr	r4, [r2, #24]
 8002058:	42a3      	cmp	r3, r4
 800205a:	db01      	blt.n	8002060 <__sfputc_r+0x16>
 800205c:	290a      	cmp	r1, #10
 800205e:	d102      	bne.n	8002066 <__sfputc_r+0x1c>
 8002060:	bc10      	pop	{r4}
 8002062:	f000 bac3 	b.w	80025ec <__swbuf_r>
 8002066:	6813      	ldr	r3, [r2, #0]
 8002068:	1c58      	adds	r0, r3, #1
 800206a:	6010      	str	r0, [r2, #0]
 800206c:	7019      	strb	r1, [r3, #0]
 800206e:	4608      	mov	r0, r1
 8002070:	bc10      	pop	{r4}
 8002072:	4770      	bx	lr

08002074 <__sfputs_r>:
 8002074:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002076:	4606      	mov	r6, r0
 8002078:	460f      	mov	r7, r1
 800207a:	4614      	mov	r4, r2
 800207c:	18d5      	adds	r5, r2, r3
 800207e:	42ac      	cmp	r4, r5
 8002080:	d101      	bne.n	8002086 <__sfputs_r+0x12>
 8002082:	2000      	movs	r0, #0
 8002084:	e007      	b.n	8002096 <__sfputs_r+0x22>
 8002086:	463a      	mov	r2, r7
 8002088:	4630      	mov	r0, r6
 800208a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800208e:	f7ff ffdc 	bl	800204a <__sfputc_r>
 8002092:	1c43      	adds	r3, r0, #1
 8002094:	d1f3      	bne.n	800207e <__sfputs_r+0xa>
 8002096:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08002098 <_vfiprintf_r>:
 8002098:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800209c:	460d      	mov	r5, r1
 800209e:	4614      	mov	r4, r2
 80020a0:	4698      	mov	r8, r3
 80020a2:	4606      	mov	r6, r0
 80020a4:	b09d      	sub	sp, #116	@ 0x74
 80020a6:	b118      	cbz	r0, 80020b0 <_vfiprintf_r+0x18>
 80020a8:	6a03      	ldr	r3, [r0, #32]
 80020aa:	b90b      	cbnz	r3, 80020b0 <_vfiprintf_r+0x18>
 80020ac:	f7ff fcc2 	bl	8001a34 <__sinit>
 80020b0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80020b2:	07d9      	lsls	r1, r3, #31
 80020b4:	d405      	bmi.n	80020c2 <_vfiprintf_r+0x2a>
 80020b6:	89ab      	ldrh	r3, [r5, #12]
 80020b8:	059a      	lsls	r2, r3, #22
 80020ba:	d402      	bmi.n	80020c2 <_vfiprintf_r+0x2a>
 80020bc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80020be:	f7ff fdd4 	bl	8001c6a <__retarget_lock_acquire_recursive>
 80020c2:	89ab      	ldrh	r3, [r5, #12]
 80020c4:	071b      	lsls	r3, r3, #28
 80020c6:	d501      	bpl.n	80020cc <_vfiprintf_r+0x34>
 80020c8:	692b      	ldr	r3, [r5, #16]
 80020ca:	b99b      	cbnz	r3, 80020f4 <_vfiprintf_r+0x5c>
 80020cc:	4629      	mov	r1, r5
 80020ce:	4630      	mov	r0, r6
 80020d0:	f000 faca 	bl	8002668 <__swsetup_r>
 80020d4:	b170      	cbz	r0, 80020f4 <_vfiprintf_r+0x5c>
 80020d6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80020d8:	07dc      	lsls	r4, r3, #31
 80020da:	d504      	bpl.n	80020e6 <_vfiprintf_r+0x4e>
 80020dc:	f04f 30ff 	mov.w	r0, #4294967295
 80020e0:	b01d      	add	sp, #116	@ 0x74
 80020e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80020e6:	89ab      	ldrh	r3, [r5, #12]
 80020e8:	0598      	lsls	r0, r3, #22
 80020ea:	d4f7      	bmi.n	80020dc <_vfiprintf_r+0x44>
 80020ec:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80020ee:	f7ff fdbd 	bl	8001c6c <__retarget_lock_release_recursive>
 80020f2:	e7f3      	b.n	80020dc <_vfiprintf_r+0x44>
 80020f4:	2300      	movs	r3, #0
 80020f6:	9309      	str	r3, [sp, #36]	@ 0x24
 80020f8:	2320      	movs	r3, #32
 80020fa:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80020fe:	2330      	movs	r3, #48	@ 0x30
 8002100:	f04f 0901 	mov.w	r9, #1
 8002104:	f8cd 800c 	str.w	r8, [sp, #12]
 8002108:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 80022b4 <_vfiprintf_r+0x21c>
 800210c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8002110:	4623      	mov	r3, r4
 8002112:	469a      	mov	sl, r3
 8002114:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002118:	b10a      	cbz	r2, 800211e <_vfiprintf_r+0x86>
 800211a:	2a25      	cmp	r2, #37	@ 0x25
 800211c:	d1f9      	bne.n	8002112 <_vfiprintf_r+0x7a>
 800211e:	ebba 0b04 	subs.w	fp, sl, r4
 8002122:	d00b      	beq.n	800213c <_vfiprintf_r+0xa4>
 8002124:	465b      	mov	r3, fp
 8002126:	4622      	mov	r2, r4
 8002128:	4629      	mov	r1, r5
 800212a:	4630      	mov	r0, r6
 800212c:	f7ff ffa2 	bl	8002074 <__sfputs_r>
 8002130:	3001      	adds	r0, #1
 8002132:	f000 80a7 	beq.w	8002284 <_vfiprintf_r+0x1ec>
 8002136:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8002138:	445a      	add	r2, fp
 800213a:	9209      	str	r2, [sp, #36]	@ 0x24
 800213c:	f89a 3000 	ldrb.w	r3, [sl]
 8002140:	2b00      	cmp	r3, #0
 8002142:	f000 809f 	beq.w	8002284 <_vfiprintf_r+0x1ec>
 8002146:	2300      	movs	r3, #0
 8002148:	f04f 32ff 	mov.w	r2, #4294967295
 800214c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002150:	f10a 0a01 	add.w	sl, sl, #1
 8002154:	9304      	str	r3, [sp, #16]
 8002156:	9307      	str	r3, [sp, #28]
 8002158:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800215c:	931a      	str	r3, [sp, #104]	@ 0x68
 800215e:	4654      	mov	r4, sl
 8002160:	2205      	movs	r2, #5
 8002162:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002166:	4853      	ldr	r0, [pc, #332]	@ (80022b4 <_vfiprintf_r+0x21c>)
 8002168:	f000 fb18 	bl	800279c <memchr>
 800216c:	9a04      	ldr	r2, [sp, #16]
 800216e:	b9d8      	cbnz	r0, 80021a8 <_vfiprintf_r+0x110>
 8002170:	06d1      	lsls	r1, r2, #27
 8002172:	bf44      	itt	mi
 8002174:	2320      	movmi	r3, #32
 8002176:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800217a:	0713      	lsls	r3, r2, #28
 800217c:	bf44      	itt	mi
 800217e:	232b      	movmi	r3, #43	@ 0x2b
 8002180:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8002184:	f89a 3000 	ldrb.w	r3, [sl]
 8002188:	2b2a      	cmp	r3, #42	@ 0x2a
 800218a:	d015      	beq.n	80021b8 <_vfiprintf_r+0x120>
 800218c:	4654      	mov	r4, sl
 800218e:	2000      	movs	r0, #0
 8002190:	f04f 0c0a 	mov.w	ip, #10
 8002194:	9a07      	ldr	r2, [sp, #28]
 8002196:	4621      	mov	r1, r4
 8002198:	f811 3b01 	ldrb.w	r3, [r1], #1
 800219c:	3b30      	subs	r3, #48	@ 0x30
 800219e:	2b09      	cmp	r3, #9
 80021a0:	d94b      	bls.n	800223a <_vfiprintf_r+0x1a2>
 80021a2:	b1b0      	cbz	r0, 80021d2 <_vfiprintf_r+0x13a>
 80021a4:	9207      	str	r2, [sp, #28]
 80021a6:	e014      	b.n	80021d2 <_vfiprintf_r+0x13a>
 80021a8:	eba0 0308 	sub.w	r3, r0, r8
 80021ac:	fa09 f303 	lsl.w	r3, r9, r3
 80021b0:	4313      	orrs	r3, r2
 80021b2:	46a2      	mov	sl, r4
 80021b4:	9304      	str	r3, [sp, #16]
 80021b6:	e7d2      	b.n	800215e <_vfiprintf_r+0xc6>
 80021b8:	9b03      	ldr	r3, [sp, #12]
 80021ba:	1d19      	adds	r1, r3, #4
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	9103      	str	r1, [sp, #12]
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	bfbb      	ittet	lt
 80021c4:	425b      	neglt	r3, r3
 80021c6:	f042 0202 	orrlt.w	r2, r2, #2
 80021ca:	9307      	strge	r3, [sp, #28]
 80021cc:	9307      	strlt	r3, [sp, #28]
 80021ce:	bfb8      	it	lt
 80021d0:	9204      	strlt	r2, [sp, #16]
 80021d2:	7823      	ldrb	r3, [r4, #0]
 80021d4:	2b2e      	cmp	r3, #46	@ 0x2e
 80021d6:	d10a      	bne.n	80021ee <_vfiprintf_r+0x156>
 80021d8:	7863      	ldrb	r3, [r4, #1]
 80021da:	2b2a      	cmp	r3, #42	@ 0x2a
 80021dc:	d132      	bne.n	8002244 <_vfiprintf_r+0x1ac>
 80021de:	9b03      	ldr	r3, [sp, #12]
 80021e0:	3402      	adds	r4, #2
 80021e2:	1d1a      	adds	r2, r3, #4
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	9203      	str	r2, [sp, #12]
 80021e8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80021ec:	9305      	str	r3, [sp, #20]
 80021ee:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 80022b8 <_vfiprintf_r+0x220>
 80021f2:	2203      	movs	r2, #3
 80021f4:	4650      	mov	r0, sl
 80021f6:	7821      	ldrb	r1, [r4, #0]
 80021f8:	f000 fad0 	bl	800279c <memchr>
 80021fc:	b138      	cbz	r0, 800220e <_vfiprintf_r+0x176>
 80021fe:	2240      	movs	r2, #64	@ 0x40
 8002200:	9b04      	ldr	r3, [sp, #16]
 8002202:	eba0 000a 	sub.w	r0, r0, sl
 8002206:	4082      	lsls	r2, r0
 8002208:	4313      	orrs	r3, r2
 800220a:	3401      	adds	r4, #1
 800220c:	9304      	str	r3, [sp, #16]
 800220e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002212:	2206      	movs	r2, #6
 8002214:	4829      	ldr	r0, [pc, #164]	@ (80022bc <_vfiprintf_r+0x224>)
 8002216:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800221a:	f000 fabf 	bl	800279c <memchr>
 800221e:	2800      	cmp	r0, #0
 8002220:	d03f      	beq.n	80022a2 <_vfiprintf_r+0x20a>
 8002222:	4b27      	ldr	r3, [pc, #156]	@ (80022c0 <_vfiprintf_r+0x228>)
 8002224:	bb1b      	cbnz	r3, 800226e <_vfiprintf_r+0x1d6>
 8002226:	9b03      	ldr	r3, [sp, #12]
 8002228:	3307      	adds	r3, #7
 800222a:	f023 0307 	bic.w	r3, r3, #7
 800222e:	3308      	adds	r3, #8
 8002230:	9303      	str	r3, [sp, #12]
 8002232:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8002234:	443b      	add	r3, r7
 8002236:	9309      	str	r3, [sp, #36]	@ 0x24
 8002238:	e76a      	b.n	8002110 <_vfiprintf_r+0x78>
 800223a:	460c      	mov	r4, r1
 800223c:	2001      	movs	r0, #1
 800223e:	fb0c 3202 	mla	r2, ip, r2, r3
 8002242:	e7a8      	b.n	8002196 <_vfiprintf_r+0xfe>
 8002244:	2300      	movs	r3, #0
 8002246:	f04f 0c0a 	mov.w	ip, #10
 800224a:	4619      	mov	r1, r3
 800224c:	3401      	adds	r4, #1
 800224e:	9305      	str	r3, [sp, #20]
 8002250:	4620      	mov	r0, r4
 8002252:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002256:	3a30      	subs	r2, #48	@ 0x30
 8002258:	2a09      	cmp	r2, #9
 800225a:	d903      	bls.n	8002264 <_vfiprintf_r+0x1cc>
 800225c:	2b00      	cmp	r3, #0
 800225e:	d0c6      	beq.n	80021ee <_vfiprintf_r+0x156>
 8002260:	9105      	str	r1, [sp, #20]
 8002262:	e7c4      	b.n	80021ee <_vfiprintf_r+0x156>
 8002264:	4604      	mov	r4, r0
 8002266:	2301      	movs	r3, #1
 8002268:	fb0c 2101 	mla	r1, ip, r1, r2
 800226c:	e7f0      	b.n	8002250 <_vfiprintf_r+0x1b8>
 800226e:	ab03      	add	r3, sp, #12
 8002270:	9300      	str	r3, [sp, #0]
 8002272:	462a      	mov	r2, r5
 8002274:	4630      	mov	r0, r6
 8002276:	4b13      	ldr	r3, [pc, #76]	@ (80022c4 <_vfiprintf_r+0x22c>)
 8002278:	a904      	add	r1, sp, #16
 800227a:	f3af 8000 	nop.w
 800227e:	4607      	mov	r7, r0
 8002280:	1c78      	adds	r0, r7, #1
 8002282:	d1d6      	bne.n	8002232 <_vfiprintf_r+0x19a>
 8002284:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8002286:	07d9      	lsls	r1, r3, #31
 8002288:	d405      	bmi.n	8002296 <_vfiprintf_r+0x1fe>
 800228a:	89ab      	ldrh	r3, [r5, #12]
 800228c:	059a      	lsls	r2, r3, #22
 800228e:	d402      	bmi.n	8002296 <_vfiprintf_r+0x1fe>
 8002290:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8002292:	f7ff fceb 	bl	8001c6c <__retarget_lock_release_recursive>
 8002296:	89ab      	ldrh	r3, [r5, #12]
 8002298:	065b      	lsls	r3, r3, #25
 800229a:	f53f af1f 	bmi.w	80020dc <_vfiprintf_r+0x44>
 800229e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80022a0:	e71e      	b.n	80020e0 <_vfiprintf_r+0x48>
 80022a2:	ab03      	add	r3, sp, #12
 80022a4:	9300      	str	r3, [sp, #0]
 80022a6:	462a      	mov	r2, r5
 80022a8:	4630      	mov	r0, r6
 80022aa:	4b06      	ldr	r3, [pc, #24]	@ (80022c4 <_vfiprintf_r+0x22c>)
 80022ac:	a904      	add	r1, sp, #16
 80022ae:	f000 f87d 	bl	80023ac <_printf_i>
 80022b2:	e7e4      	b.n	800227e <_vfiprintf_r+0x1e6>
 80022b4:	08002a83 	.word	0x08002a83
 80022b8:	08002a89 	.word	0x08002a89
 80022bc:	08002a8d 	.word	0x08002a8d
 80022c0:	00000000 	.word	0x00000000
 80022c4:	08002075 	.word	0x08002075

080022c8 <_printf_common>:
 80022c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80022cc:	4616      	mov	r6, r2
 80022ce:	4698      	mov	r8, r3
 80022d0:	688a      	ldr	r2, [r1, #8]
 80022d2:	690b      	ldr	r3, [r1, #16]
 80022d4:	4607      	mov	r7, r0
 80022d6:	4293      	cmp	r3, r2
 80022d8:	bfb8      	it	lt
 80022da:	4613      	movlt	r3, r2
 80022dc:	6033      	str	r3, [r6, #0]
 80022de:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80022e2:	460c      	mov	r4, r1
 80022e4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80022e8:	b10a      	cbz	r2, 80022ee <_printf_common+0x26>
 80022ea:	3301      	adds	r3, #1
 80022ec:	6033      	str	r3, [r6, #0]
 80022ee:	6823      	ldr	r3, [r4, #0]
 80022f0:	0699      	lsls	r1, r3, #26
 80022f2:	bf42      	ittt	mi
 80022f4:	6833      	ldrmi	r3, [r6, #0]
 80022f6:	3302      	addmi	r3, #2
 80022f8:	6033      	strmi	r3, [r6, #0]
 80022fa:	6825      	ldr	r5, [r4, #0]
 80022fc:	f015 0506 	ands.w	r5, r5, #6
 8002300:	d106      	bne.n	8002310 <_printf_common+0x48>
 8002302:	f104 0a19 	add.w	sl, r4, #25
 8002306:	68e3      	ldr	r3, [r4, #12]
 8002308:	6832      	ldr	r2, [r6, #0]
 800230a:	1a9b      	subs	r3, r3, r2
 800230c:	42ab      	cmp	r3, r5
 800230e:	dc2b      	bgt.n	8002368 <_printf_common+0xa0>
 8002310:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8002314:	6822      	ldr	r2, [r4, #0]
 8002316:	3b00      	subs	r3, #0
 8002318:	bf18      	it	ne
 800231a:	2301      	movne	r3, #1
 800231c:	0692      	lsls	r2, r2, #26
 800231e:	d430      	bmi.n	8002382 <_printf_common+0xba>
 8002320:	4641      	mov	r1, r8
 8002322:	4638      	mov	r0, r7
 8002324:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8002328:	47c8      	blx	r9
 800232a:	3001      	adds	r0, #1
 800232c:	d023      	beq.n	8002376 <_printf_common+0xae>
 800232e:	6823      	ldr	r3, [r4, #0]
 8002330:	6922      	ldr	r2, [r4, #16]
 8002332:	f003 0306 	and.w	r3, r3, #6
 8002336:	2b04      	cmp	r3, #4
 8002338:	bf14      	ite	ne
 800233a:	2500      	movne	r5, #0
 800233c:	6833      	ldreq	r3, [r6, #0]
 800233e:	f04f 0600 	mov.w	r6, #0
 8002342:	bf08      	it	eq
 8002344:	68e5      	ldreq	r5, [r4, #12]
 8002346:	f104 041a 	add.w	r4, r4, #26
 800234a:	bf08      	it	eq
 800234c:	1aed      	subeq	r5, r5, r3
 800234e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8002352:	bf08      	it	eq
 8002354:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002358:	4293      	cmp	r3, r2
 800235a:	bfc4      	itt	gt
 800235c:	1a9b      	subgt	r3, r3, r2
 800235e:	18ed      	addgt	r5, r5, r3
 8002360:	42b5      	cmp	r5, r6
 8002362:	d11a      	bne.n	800239a <_printf_common+0xd2>
 8002364:	2000      	movs	r0, #0
 8002366:	e008      	b.n	800237a <_printf_common+0xb2>
 8002368:	2301      	movs	r3, #1
 800236a:	4652      	mov	r2, sl
 800236c:	4641      	mov	r1, r8
 800236e:	4638      	mov	r0, r7
 8002370:	47c8      	blx	r9
 8002372:	3001      	adds	r0, #1
 8002374:	d103      	bne.n	800237e <_printf_common+0xb6>
 8002376:	f04f 30ff 	mov.w	r0, #4294967295
 800237a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800237e:	3501      	adds	r5, #1
 8002380:	e7c1      	b.n	8002306 <_printf_common+0x3e>
 8002382:	2030      	movs	r0, #48	@ 0x30
 8002384:	18e1      	adds	r1, r4, r3
 8002386:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800238a:	1c5a      	adds	r2, r3, #1
 800238c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8002390:	4422      	add	r2, r4
 8002392:	3302      	adds	r3, #2
 8002394:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8002398:	e7c2      	b.n	8002320 <_printf_common+0x58>
 800239a:	2301      	movs	r3, #1
 800239c:	4622      	mov	r2, r4
 800239e:	4641      	mov	r1, r8
 80023a0:	4638      	mov	r0, r7
 80023a2:	47c8      	blx	r9
 80023a4:	3001      	adds	r0, #1
 80023a6:	d0e6      	beq.n	8002376 <_printf_common+0xae>
 80023a8:	3601      	adds	r6, #1
 80023aa:	e7d9      	b.n	8002360 <_printf_common+0x98>

080023ac <_printf_i>:
 80023ac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80023b0:	7e0f      	ldrb	r7, [r1, #24]
 80023b2:	4691      	mov	r9, r2
 80023b4:	2f78      	cmp	r7, #120	@ 0x78
 80023b6:	4680      	mov	r8, r0
 80023b8:	460c      	mov	r4, r1
 80023ba:	469a      	mov	sl, r3
 80023bc:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80023be:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80023c2:	d807      	bhi.n	80023d4 <_printf_i+0x28>
 80023c4:	2f62      	cmp	r7, #98	@ 0x62
 80023c6:	d80a      	bhi.n	80023de <_printf_i+0x32>
 80023c8:	2f00      	cmp	r7, #0
 80023ca:	f000 80d3 	beq.w	8002574 <_printf_i+0x1c8>
 80023ce:	2f58      	cmp	r7, #88	@ 0x58
 80023d0:	f000 80ba 	beq.w	8002548 <_printf_i+0x19c>
 80023d4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80023d8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80023dc:	e03a      	b.n	8002454 <_printf_i+0xa8>
 80023de:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80023e2:	2b15      	cmp	r3, #21
 80023e4:	d8f6      	bhi.n	80023d4 <_printf_i+0x28>
 80023e6:	a101      	add	r1, pc, #4	@ (adr r1, 80023ec <_printf_i+0x40>)
 80023e8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80023ec:	08002445 	.word	0x08002445
 80023f0:	08002459 	.word	0x08002459
 80023f4:	080023d5 	.word	0x080023d5
 80023f8:	080023d5 	.word	0x080023d5
 80023fc:	080023d5 	.word	0x080023d5
 8002400:	080023d5 	.word	0x080023d5
 8002404:	08002459 	.word	0x08002459
 8002408:	080023d5 	.word	0x080023d5
 800240c:	080023d5 	.word	0x080023d5
 8002410:	080023d5 	.word	0x080023d5
 8002414:	080023d5 	.word	0x080023d5
 8002418:	0800255b 	.word	0x0800255b
 800241c:	08002483 	.word	0x08002483
 8002420:	08002515 	.word	0x08002515
 8002424:	080023d5 	.word	0x080023d5
 8002428:	080023d5 	.word	0x080023d5
 800242c:	0800257d 	.word	0x0800257d
 8002430:	080023d5 	.word	0x080023d5
 8002434:	08002483 	.word	0x08002483
 8002438:	080023d5 	.word	0x080023d5
 800243c:	080023d5 	.word	0x080023d5
 8002440:	0800251d 	.word	0x0800251d
 8002444:	6833      	ldr	r3, [r6, #0]
 8002446:	1d1a      	adds	r2, r3, #4
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	6032      	str	r2, [r6, #0]
 800244c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8002450:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8002454:	2301      	movs	r3, #1
 8002456:	e09e      	b.n	8002596 <_printf_i+0x1ea>
 8002458:	6833      	ldr	r3, [r6, #0]
 800245a:	6820      	ldr	r0, [r4, #0]
 800245c:	1d19      	adds	r1, r3, #4
 800245e:	6031      	str	r1, [r6, #0]
 8002460:	0606      	lsls	r6, r0, #24
 8002462:	d501      	bpl.n	8002468 <_printf_i+0xbc>
 8002464:	681d      	ldr	r5, [r3, #0]
 8002466:	e003      	b.n	8002470 <_printf_i+0xc4>
 8002468:	0645      	lsls	r5, r0, #25
 800246a:	d5fb      	bpl.n	8002464 <_printf_i+0xb8>
 800246c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8002470:	2d00      	cmp	r5, #0
 8002472:	da03      	bge.n	800247c <_printf_i+0xd0>
 8002474:	232d      	movs	r3, #45	@ 0x2d
 8002476:	426d      	negs	r5, r5
 8002478:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800247c:	230a      	movs	r3, #10
 800247e:	4859      	ldr	r0, [pc, #356]	@ (80025e4 <_printf_i+0x238>)
 8002480:	e011      	b.n	80024a6 <_printf_i+0xfa>
 8002482:	6821      	ldr	r1, [r4, #0]
 8002484:	6833      	ldr	r3, [r6, #0]
 8002486:	0608      	lsls	r0, r1, #24
 8002488:	f853 5b04 	ldr.w	r5, [r3], #4
 800248c:	d402      	bmi.n	8002494 <_printf_i+0xe8>
 800248e:	0649      	lsls	r1, r1, #25
 8002490:	bf48      	it	mi
 8002492:	b2ad      	uxthmi	r5, r5
 8002494:	2f6f      	cmp	r7, #111	@ 0x6f
 8002496:	6033      	str	r3, [r6, #0]
 8002498:	bf14      	ite	ne
 800249a:	230a      	movne	r3, #10
 800249c:	2308      	moveq	r3, #8
 800249e:	4851      	ldr	r0, [pc, #324]	@ (80025e4 <_printf_i+0x238>)
 80024a0:	2100      	movs	r1, #0
 80024a2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80024a6:	6866      	ldr	r6, [r4, #4]
 80024a8:	2e00      	cmp	r6, #0
 80024aa:	bfa8      	it	ge
 80024ac:	6821      	ldrge	r1, [r4, #0]
 80024ae:	60a6      	str	r6, [r4, #8]
 80024b0:	bfa4      	itt	ge
 80024b2:	f021 0104 	bicge.w	r1, r1, #4
 80024b6:	6021      	strge	r1, [r4, #0]
 80024b8:	b90d      	cbnz	r5, 80024be <_printf_i+0x112>
 80024ba:	2e00      	cmp	r6, #0
 80024bc:	d04b      	beq.n	8002556 <_printf_i+0x1aa>
 80024be:	4616      	mov	r6, r2
 80024c0:	fbb5 f1f3 	udiv	r1, r5, r3
 80024c4:	fb03 5711 	mls	r7, r3, r1, r5
 80024c8:	5dc7      	ldrb	r7, [r0, r7]
 80024ca:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80024ce:	462f      	mov	r7, r5
 80024d0:	42bb      	cmp	r3, r7
 80024d2:	460d      	mov	r5, r1
 80024d4:	d9f4      	bls.n	80024c0 <_printf_i+0x114>
 80024d6:	2b08      	cmp	r3, #8
 80024d8:	d10b      	bne.n	80024f2 <_printf_i+0x146>
 80024da:	6823      	ldr	r3, [r4, #0]
 80024dc:	07df      	lsls	r7, r3, #31
 80024de:	d508      	bpl.n	80024f2 <_printf_i+0x146>
 80024e0:	6923      	ldr	r3, [r4, #16]
 80024e2:	6861      	ldr	r1, [r4, #4]
 80024e4:	4299      	cmp	r1, r3
 80024e6:	bfde      	ittt	le
 80024e8:	2330      	movle	r3, #48	@ 0x30
 80024ea:	f806 3c01 	strble.w	r3, [r6, #-1]
 80024ee:	f106 36ff 	addle.w	r6, r6, #4294967295
 80024f2:	1b92      	subs	r2, r2, r6
 80024f4:	6122      	str	r2, [r4, #16]
 80024f6:	464b      	mov	r3, r9
 80024f8:	4621      	mov	r1, r4
 80024fa:	4640      	mov	r0, r8
 80024fc:	f8cd a000 	str.w	sl, [sp]
 8002500:	aa03      	add	r2, sp, #12
 8002502:	f7ff fee1 	bl	80022c8 <_printf_common>
 8002506:	3001      	adds	r0, #1
 8002508:	d14a      	bne.n	80025a0 <_printf_i+0x1f4>
 800250a:	f04f 30ff 	mov.w	r0, #4294967295
 800250e:	b004      	add	sp, #16
 8002510:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002514:	6823      	ldr	r3, [r4, #0]
 8002516:	f043 0320 	orr.w	r3, r3, #32
 800251a:	6023      	str	r3, [r4, #0]
 800251c:	2778      	movs	r7, #120	@ 0x78
 800251e:	4832      	ldr	r0, [pc, #200]	@ (80025e8 <_printf_i+0x23c>)
 8002520:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8002524:	6823      	ldr	r3, [r4, #0]
 8002526:	6831      	ldr	r1, [r6, #0]
 8002528:	061f      	lsls	r7, r3, #24
 800252a:	f851 5b04 	ldr.w	r5, [r1], #4
 800252e:	d402      	bmi.n	8002536 <_printf_i+0x18a>
 8002530:	065f      	lsls	r7, r3, #25
 8002532:	bf48      	it	mi
 8002534:	b2ad      	uxthmi	r5, r5
 8002536:	6031      	str	r1, [r6, #0]
 8002538:	07d9      	lsls	r1, r3, #31
 800253a:	bf44      	itt	mi
 800253c:	f043 0320 	orrmi.w	r3, r3, #32
 8002540:	6023      	strmi	r3, [r4, #0]
 8002542:	b11d      	cbz	r5, 800254c <_printf_i+0x1a0>
 8002544:	2310      	movs	r3, #16
 8002546:	e7ab      	b.n	80024a0 <_printf_i+0xf4>
 8002548:	4826      	ldr	r0, [pc, #152]	@ (80025e4 <_printf_i+0x238>)
 800254a:	e7e9      	b.n	8002520 <_printf_i+0x174>
 800254c:	6823      	ldr	r3, [r4, #0]
 800254e:	f023 0320 	bic.w	r3, r3, #32
 8002552:	6023      	str	r3, [r4, #0]
 8002554:	e7f6      	b.n	8002544 <_printf_i+0x198>
 8002556:	4616      	mov	r6, r2
 8002558:	e7bd      	b.n	80024d6 <_printf_i+0x12a>
 800255a:	6833      	ldr	r3, [r6, #0]
 800255c:	6825      	ldr	r5, [r4, #0]
 800255e:	1d18      	adds	r0, r3, #4
 8002560:	6961      	ldr	r1, [r4, #20]
 8002562:	6030      	str	r0, [r6, #0]
 8002564:	062e      	lsls	r6, r5, #24
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	d501      	bpl.n	800256e <_printf_i+0x1c2>
 800256a:	6019      	str	r1, [r3, #0]
 800256c:	e002      	b.n	8002574 <_printf_i+0x1c8>
 800256e:	0668      	lsls	r0, r5, #25
 8002570:	d5fb      	bpl.n	800256a <_printf_i+0x1be>
 8002572:	8019      	strh	r1, [r3, #0]
 8002574:	2300      	movs	r3, #0
 8002576:	4616      	mov	r6, r2
 8002578:	6123      	str	r3, [r4, #16]
 800257a:	e7bc      	b.n	80024f6 <_printf_i+0x14a>
 800257c:	6833      	ldr	r3, [r6, #0]
 800257e:	2100      	movs	r1, #0
 8002580:	1d1a      	adds	r2, r3, #4
 8002582:	6032      	str	r2, [r6, #0]
 8002584:	681e      	ldr	r6, [r3, #0]
 8002586:	6862      	ldr	r2, [r4, #4]
 8002588:	4630      	mov	r0, r6
 800258a:	f000 f907 	bl	800279c <memchr>
 800258e:	b108      	cbz	r0, 8002594 <_printf_i+0x1e8>
 8002590:	1b80      	subs	r0, r0, r6
 8002592:	6060      	str	r0, [r4, #4]
 8002594:	6863      	ldr	r3, [r4, #4]
 8002596:	6123      	str	r3, [r4, #16]
 8002598:	2300      	movs	r3, #0
 800259a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800259e:	e7aa      	b.n	80024f6 <_printf_i+0x14a>
 80025a0:	4632      	mov	r2, r6
 80025a2:	4649      	mov	r1, r9
 80025a4:	4640      	mov	r0, r8
 80025a6:	6923      	ldr	r3, [r4, #16]
 80025a8:	47d0      	blx	sl
 80025aa:	3001      	adds	r0, #1
 80025ac:	d0ad      	beq.n	800250a <_printf_i+0x15e>
 80025ae:	6823      	ldr	r3, [r4, #0]
 80025b0:	079b      	lsls	r3, r3, #30
 80025b2:	d413      	bmi.n	80025dc <_printf_i+0x230>
 80025b4:	68e0      	ldr	r0, [r4, #12]
 80025b6:	9b03      	ldr	r3, [sp, #12]
 80025b8:	4298      	cmp	r0, r3
 80025ba:	bfb8      	it	lt
 80025bc:	4618      	movlt	r0, r3
 80025be:	e7a6      	b.n	800250e <_printf_i+0x162>
 80025c0:	2301      	movs	r3, #1
 80025c2:	4632      	mov	r2, r6
 80025c4:	4649      	mov	r1, r9
 80025c6:	4640      	mov	r0, r8
 80025c8:	47d0      	blx	sl
 80025ca:	3001      	adds	r0, #1
 80025cc:	d09d      	beq.n	800250a <_printf_i+0x15e>
 80025ce:	3501      	adds	r5, #1
 80025d0:	68e3      	ldr	r3, [r4, #12]
 80025d2:	9903      	ldr	r1, [sp, #12]
 80025d4:	1a5b      	subs	r3, r3, r1
 80025d6:	42ab      	cmp	r3, r5
 80025d8:	dcf2      	bgt.n	80025c0 <_printf_i+0x214>
 80025da:	e7eb      	b.n	80025b4 <_printf_i+0x208>
 80025dc:	2500      	movs	r5, #0
 80025de:	f104 0619 	add.w	r6, r4, #25
 80025e2:	e7f5      	b.n	80025d0 <_printf_i+0x224>
 80025e4:	08002a94 	.word	0x08002a94
 80025e8:	08002aa5 	.word	0x08002aa5

080025ec <__swbuf_r>:
 80025ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80025ee:	460e      	mov	r6, r1
 80025f0:	4614      	mov	r4, r2
 80025f2:	4605      	mov	r5, r0
 80025f4:	b118      	cbz	r0, 80025fe <__swbuf_r+0x12>
 80025f6:	6a03      	ldr	r3, [r0, #32]
 80025f8:	b90b      	cbnz	r3, 80025fe <__swbuf_r+0x12>
 80025fa:	f7ff fa1b 	bl	8001a34 <__sinit>
 80025fe:	69a3      	ldr	r3, [r4, #24]
 8002600:	60a3      	str	r3, [r4, #8]
 8002602:	89a3      	ldrh	r3, [r4, #12]
 8002604:	071a      	lsls	r2, r3, #28
 8002606:	d501      	bpl.n	800260c <__swbuf_r+0x20>
 8002608:	6923      	ldr	r3, [r4, #16]
 800260a:	b943      	cbnz	r3, 800261e <__swbuf_r+0x32>
 800260c:	4621      	mov	r1, r4
 800260e:	4628      	mov	r0, r5
 8002610:	f000 f82a 	bl	8002668 <__swsetup_r>
 8002614:	b118      	cbz	r0, 800261e <__swbuf_r+0x32>
 8002616:	f04f 37ff 	mov.w	r7, #4294967295
 800261a:	4638      	mov	r0, r7
 800261c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800261e:	6823      	ldr	r3, [r4, #0]
 8002620:	6922      	ldr	r2, [r4, #16]
 8002622:	b2f6      	uxtb	r6, r6
 8002624:	1a98      	subs	r0, r3, r2
 8002626:	6963      	ldr	r3, [r4, #20]
 8002628:	4637      	mov	r7, r6
 800262a:	4283      	cmp	r3, r0
 800262c:	dc05      	bgt.n	800263a <__swbuf_r+0x4e>
 800262e:	4621      	mov	r1, r4
 8002630:	4628      	mov	r0, r5
 8002632:	f7ff fcb9 	bl	8001fa8 <_fflush_r>
 8002636:	2800      	cmp	r0, #0
 8002638:	d1ed      	bne.n	8002616 <__swbuf_r+0x2a>
 800263a:	68a3      	ldr	r3, [r4, #8]
 800263c:	3b01      	subs	r3, #1
 800263e:	60a3      	str	r3, [r4, #8]
 8002640:	6823      	ldr	r3, [r4, #0]
 8002642:	1c5a      	adds	r2, r3, #1
 8002644:	6022      	str	r2, [r4, #0]
 8002646:	701e      	strb	r6, [r3, #0]
 8002648:	6962      	ldr	r2, [r4, #20]
 800264a:	1c43      	adds	r3, r0, #1
 800264c:	429a      	cmp	r2, r3
 800264e:	d004      	beq.n	800265a <__swbuf_r+0x6e>
 8002650:	89a3      	ldrh	r3, [r4, #12]
 8002652:	07db      	lsls	r3, r3, #31
 8002654:	d5e1      	bpl.n	800261a <__swbuf_r+0x2e>
 8002656:	2e0a      	cmp	r6, #10
 8002658:	d1df      	bne.n	800261a <__swbuf_r+0x2e>
 800265a:	4621      	mov	r1, r4
 800265c:	4628      	mov	r0, r5
 800265e:	f7ff fca3 	bl	8001fa8 <_fflush_r>
 8002662:	2800      	cmp	r0, #0
 8002664:	d0d9      	beq.n	800261a <__swbuf_r+0x2e>
 8002666:	e7d6      	b.n	8002616 <__swbuf_r+0x2a>

08002668 <__swsetup_r>:
 8002668:	b538      	push	{r3, r4, r5, lr}
 800266a:	4b29      	ldr	r3, [pc, #164]	@ (8002710 <__swsetup_r+0xa8>)
 800266c:	4605      	mov	r5, r0
 800266e:	6818      	ldr	r0, [r3, #0]
 8002670:	460c      	mov	r4, r1
 8002672:	b118      	cbz	r0, 800267c <__swsetup_r+0x14>
 8002674:	6a03      	ldr	r3, [r0, #32]
 8002676:	b90b      	cbnz	r3, 800267c <__swsetup_r+0x14>
 8002678:	f7ff f9dc 	bl	8001a34 <__sinit>
 800267c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002680:	0719      	lsls	r1, r3, #28
 8002682:	d422      	bmi.n	80026ca <__swsetup_r+0x62>
 8002684:	06da      	lsls	r2, r3, #27
 8002686:	d407      	bmi.n	8002698 <__swsetup_r+0x30>
 8002688:	2209      	movs	r2, #9
 800268a:	602a      	str	r2, [r5, #0]
 800268c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002690:	f04f 30ff 	mov.w	r0, #4294967295
 8002694:	81a3      	strh	r3, [r4, #12]
 8002696:	e033      	b.n	8002700 <__swsetup_r+0x98>
 8002698:	0758      	lsls	r0, r3, #29
 800269a:	d512      	bpl.n	80026c2 <__swsetup_r+0x5a>
 800269c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800269e:	b141      	cbz	r1, 80026b2 <__swsetup_r+0x4a>
 80026a0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80026a4:	4299      	cmp	r1, r3
 80026a6:	d002      	beq.n	80026ae <__swsetup_r+0x46>
 80026a8:	4628      	mov	r0, r5
 80026aa:	f7ff faff 	bl	8001cac <_free_r>
 80026ae:	2300      	movs	r3, #0
 80026b0:	6363      	str	r3, [r4, #52]	@ 0x34
 80026b2:	89a3      	ldrh	r3, [r4, #12]
 80026b4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80026b8:	81a3      	strh	r3, [r4, #12]
 80026ba:	2300      	movs	r3, #0
 80026bc:	6063      	str	r3, [r4, #4]
 80026be:	6923      	ldr	r3, [r4, #16]
 80026c0:	6023      	str	r3, [r4, #0]
 80026c2:	89a3      	ldrh	r3, [r4, #12]
 80026c4:	f043 0308 	orr.w	r3, r3, #8
 80026c8:	81a3      	strh	r3, [r4, #12]
 80026ca:	6923      	ldr	r3, [r4, #16]
 80026cc:	b94b      	cbnz	r3, 80026e2 <__swsetup_r+0x7a>
 80026ce:	89a3      	ldrh	r3, [r4, #12]
 80026d0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80026d4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80026d8:	d003      	beq.n	80026e2 <__swsetup_r+0x7a>
 80026da:	4621      	mov	r1, r4
 80026dc:	4628      	mov	r0, r5
 80026de:	f000 f890 	bl	8002802 <__smakebuf_r>
 80026e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80026e6:	f013 0201 	ands.w	r2, r3, #1
 80026ea:	d00a      	beq.n	8002702 <__swsetup_r+0x9a>
 80026ec:	2200      	movs	r2, #0
 80026ee:	60a2      	str	r2, [r4, #8]
 80026f0:	6962      	ldr	r2, [r4, #20]
 80026f2:	4252      	negs	r2, r2
 80026f4:	61a2      	str	r2, [r4, #24]
 80026f6:	6922      	ldr	r2, [r4, #16]
 80026f8:	b942      	cbnz	r2, 800270c <__swsetup_r+0xa4>
 80026fa:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80026fe:	d1c5      	bne.n	800268c <__swsetup_r+0x24>
 8002700:	bd38      	pop	{r3, r4, r5, pc}
 8002702:	0799      	lsls	r1, r3, #30
 8002704:	bf58      	it	pl
 8002706:	6962      	ldrpl	r2, [r4, #20]
 8002708:	60a2      	str	r2, [r4, #8]
 800270a:	e7f4      	b.n	80026f6 <__swsetup_r+0x8e>
 800270c:	2000      	movs	r0, #0
 800270e:	e7f7      	b.n	8002700 <__swsetup_r+0x98>
 8002710:	20000030 	.word	0x20000030

08002714 <_raise_r>:
 8002714:	291f      	cmp	r1, #31
 8002716:	b538      	push	{r3, r4, r5, lr}
 8002718:	4605      	mov	r5, r0
 800271a:	460c      	mov	r4, r1
 800271c:	d904      	bls.n	8002728 <_raise_r+0x14>
 800271e:	2316      	movs	r3, #22
 8002720:	6003      	str	r3, [r0, #0]
 8002722:	f04f 30ff 	mov.w	r0, #4294967295
 8002726:	bd38      	pop	{r3, r4, r5, pc}
 8002728:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800272a:	b112      	cbz	r2, 8002732 <_raise_r+0x1e>
 800272c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8002730:	b94b      	cbnz	r3, 8002746 <_raise_r+0x32>
 8002732:	4628      	mov	r0, r5
 8002734:	f000 f830 	bl	8002798 <_getpid_r>
 8002738:	4622      	mov	r2, r4
 800273a:	4601      	mov	r1, r0
 800273c:	4628      	mov	r0, r5
 800273e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002742:	f000 b817 	b.w	8002774 <_kill_r>
 8002746:	2b01      	cmp	r3, #1
 8002748:	d00a      	beq.n	8002760 <_raise_r+0x4c>
 800274a:	1c59      	adds	r1, r3, #1
 800274c:	d103      	bne.n	8002756 <_raise_r+0x42>
 800274e:	2316      	movs	r3, #22
 8002750:	6003      	str	r3, [r0, #0]
 8002752:	2001      	movs	r0, #1
 8002754:	e7e7      	b.n	8002726 <_raise_r+0x12>
 8002756:	2100      	movs	r1, #0
 8002758:	4620      	mov	r0, r4
 800275a:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800275e:	4798      	blx	r3
 8002760:	2000      	movs	r0, #0
 8002762:	e7e0      	b.n	8002726 <_raise_r+0x12>

08002764 <raise>:
 8002764:	4b02      	ldr	r3, [pc, #8]	@ (8002770 <raise+0xc>)
 8002766:	4601      	mov	r1, r0
 8002768:	6818      	ldr	r0, [r3, #0]
 800276a:	f7ff bfd3 	b.w	8002714 <_raise_r>
 800276e:	bf00      	nop
 8002770:	20000030 	.word	0x20000030

08002774 <_kill_r>:
 8002774:	b538      	push	{r3, r4, r5, lr}
 8002776:	2300      	movs	r3, #0
 8002778:	4d06      	ldr	r5, [pc, #24]	@ (8002794 <_kill_r+0x20>)
 800277a:	4604      	mov	r4, r0
 800277c:	4608      	mov	r0, r1
 800277e:	4611      	mov	r1, r2
 8002780:	602b      	str	r3, [r5, #0]
 8002782:	f000 f8c5 	bl	8002910 <_kill>
 8002786:	1c43      	adds	r3, r0, #1
 8002788:	d102      	bne.n	8002790 <_kill_r+0x1c>
 800278a:	682b      	ldr	r3, [r5, #0]
 800278c:	b103      	cbz	r3, 8002790 <_kill_r+0x1c>
 800278e:	6023      	str	r3, [r4, #0]
 8002790:	bd38      	pop	{r3, r4, r5, pc}
 8002792:	bf00      	nop
 8002794:	200002b0 	.word	0x200002b0

08002798 <_getpid_r>:
 8002798:	f000 b8a2 	b.w	80028e0 <_getpid>

0800279c <memchr>:
 800279c:	4603      	mov	r3, r0
 800279e:	b510      	push	{r4, lr}
 80027a0:	b2c9      	uxtb	r1, r1
 80027a2:	4402      	add	r2, r0
 80027a4:	4293      	cmp	r3, r2
 80027a6:	4618      	mov	r0, r3
 80027a8:	d101      	bne.n	80027ae <memchr+0x12>
 80027aa:	2000      	movs	r0, #0
 80027ac:	e003      	b.n	80027b6 <memchr+0x1a>
 80027ae:	7804      	ldrb	r4, [r0, #0]
 80027b0:	3301      	adds	r3, #1
 80027b2:	428c      	cmp	r4, r1
 80027b4:	d1f6      	bne.n	80027a4 <memchr+0x8>
 80027b6:	bd10      	pop	{r4, pc}

080027b8 <__swhatbuf_r>:
 80027b8:	b570      	push	{r4, r5, r6, lr}
 80027ba:	460c      	mov	r4, r1
 80027bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80027c0:	4615      	mov	r5, r2
 80027c2:	2900      	cmp	r1, #0
 80027c4:	461e      	mov	r6, r3
 80027c6:	b096      	sub	sp, #88	@ 0x58
 80027c8:	da0c      	bge.n	80027e4 <__swhatbuf_r+0x2c>
 80027ca:	89a3      	ldrh	r3, [r4, #12]
 80027cc:	2100      	movs	r1, #0
 80027ce:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80027d2:	bf14      	ite	ne
 80027d4:	2340      	movne	r3, #64	@ 0x40
 80027d6:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80027da:	2000      	movs	r0, #0
 80027dc:	6031      	str	r1, [r6, #0]
 80027de:	602b      	str	r3, [r5, #0]
 80027e0:	b016      	add	sp, #88	@ 0x58
 80027e2:	bd70      	pop	{r4, r5, r6, pc}
 80027e4:	466a      	mov	r2, sp
 80027e6:	f000 f849 	bl	800287c <_fstat_r>
 80027ea:	2800      	cmp	r0, #0
 80027ec:	dbed      	blt.n	80027ca <__swhatbuf_r+0x12>
 80027ee:	9901      	ldr	r1, [sp, #4]
 80027f0:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80027f4:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80027f8:	4259      	negs	r1, r3
 80027fa:	4159      	adcs	r1, r3
 80027fc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002800:	e7eb      	b.n	80027da <__swhatbuf_r+0x22>

08002802 <__smakebuf_r>:
 8002802:	898b      	ldrh	r3, [r1, #12]
 8002804:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002806:	079d      	lsls	r5, r3, #30
 8002808:	4606      	mov	r6, r0
 800280a:	460c      	mov	r4, r1
 800280c:	d507      	bpl.n	800281e <__smakebuf_r+0x1c>
 800280e:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8002812:	6023      	str	r3, [r4, #0]
 8002814:	6123      	str	r3, [r4, #16]
 8002816:	2301      	movs	r3, #1
 8002818:	6163      	str	r3, [r4, #20]
 800281a:	b003      	add	sp, #12
 800281c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800281e:	466a      	mov	r2, sp
 8002820:	ab01      	add	r3, sp, #4
 8002822:	f7ff ffc9 	bl	80027b8 <__swhatbuf_r>
 8002826:	9f00      	ldr	r7, [sp, #0]
 8002828:	4605      	mov	r5, r0
 800282a:	4639      	mov	r1, r7
 800282c:	4630      	mov	r0, r6
 800282e:	f7ff faaf 	bl	8001d90 <_malloc_r>
 8002832:	b948      	cbnz	r0, 8002848 <__smakebuf_r+0x46>
 8002834:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002838:	059a      	lsls	r2, r3, #22
 800283a:	d4ee      	bmi.n	800281a <__smakebuf_r+0x18>
 800283c:	f023 0303 	bic.w	r3, r3, #3
 8002840:	f043 0302 	orr.w	r3, r3, #2
 8002844:	81a3      	strh	r3, [r4, #12]
 8002846:	e7e2      	b.n	800280e <__smakebuf_r+0xc>
 8002848:	89a3      	ldrh	r3, [r4, #12]
 800284a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800284e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002852:	81a3      	strh	r3, [r4, #12]
 8002854:	9b01      	ldr	r3, [sp, #4]
 8002856:	6020      	str	r0, [r4, #0]
 8002858:	b15b      	cbz	r3, 8002872 <__smakebuf_r+0x70>
 800285a:	4630      	mov	r0, r6
 800285c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002860:	f000 f81e 	bl	80028a0 <_isatty_r>
 8002864:	b128      	cbz	r0, 8002872 <__smakebuf_r+0x70>
 8002866:	89a3      	ldrh	r3, [r4, #12]
 8002868:	f023 0303 	bic.w	r3, r3, #3
 800286c:	f043 0301 	orr.w	r3, r3, #1
 8002870:	81a3      	strh	r3, [r4, #12]
 8002872:	89a3      	ldrh	r3, [r4, #12]
 8002874:	431d      	orrs	r5, r3
 8002876:	81a5      	strh	r5, [r4, #12]
 8002878:	e7cf      	b.n	800281a <__smakebuf_r+0x18>
	...

0800287c <_fstat_r>:
 800287c:	b538      	push	{r3, r4, r5, lr}
 800287e:	2300      	movs	r3, #0
 8002880:	4d06      	ldr	r5, [pc, #24]	@ (800289c <_fstat_r+0x20>)
 8002882:	4604      	mov	r4, r0
 8002884:	4608      	mov	r0, r1
 8002886:	4611      	mov	r1, r2
 8002888:	602b      	str	r3, [r5, #0]
 800288a:	f000 f821 	bl	80028d0 <_fstat>
 800288e:	1c43      	adds	r3, r0, #1
 8002890:	d102      	bne.n	8002898 <_fstat_r+0x1c>
 8002892:	682b      	ldr	r3, [r5, #0]
 8002894:	b103      	cbz	r3, 8002898 <_fstat_r+0x1c>
 8002896:	6023      	str	r3, [r4, #0]
 8002898:	bd38      	pop	{r3, r4, r5, pc}
 800289a:	bf00      	nop
 800289c:	200002b0 	.word	0x200002b0

080028a0 <_isatty_r>:
 80028a0:	b538      	push	{r3, r4, r5, lr}
 80028a2:	2300      	movs	r3, #0
 80028a4:	4d05      	ldr	r5, [pc, #20]	@ (80028bc <_isatty_r+0x1c>)
 80028a6:	4604      	mov	r4, r0
 80028a8:	4608      	mov	r0, r1
 80028aa:	602b      	str	r3, [r5, #0]
 80028ac:	f000 f828 	bl	8002900 <_isatty>
 80028b0:	1c43      	adds	r3, r0, #1
 80028b2:	d102      	bne.n	80028ba <_isatty_r+0x1a>
 80028b4:	682b      	ldr	r3, [r5, #0]
 80028b6:	b103      	cbz	r3, 80028ba <_isatty_r+0x1a>
 80028b8:	6023      	str	r3, [r4, #0]
 80028ba:	bd38      	pop	{r3, r4, r5, pc}
 80028bc:	200002b0 	.word	0x200002b0

080028c0 <_close>:
 80028c0:	2258      	movs	r2, #88	@ 0x58
 80028c2:	4b02      	ldr	r3, [pc, #8]	@ (80028cc <_close+0xc>)
 80028c4:	f04f 30ff 	mov.w	r0, #4294967295
 80028c8:	601a      	str	r2, [r3, #0]
 80028ca:	4770      	bx	lr
 80028cc:	200002b0 	.word	0x200002b0

080028d0 <_fstat>:
 80028d0:	2258      	movs	r2, #88	@ 0x58
 80028d2:	4b02      	ldr	r3, [pc, #8]	@ (80028dc <_fstat+0xc>)
 80028d4:	f04f 30ff 	mov.w	r0, #4294967295
 80028d8:	601a      	str	r2, [r3, #0]
 80028da:	4770      	bx	lr
 80028dc:	200002b0 	.word	0x200002b0

080028e0 <_getpid>:
 80028e0:	2258      	movs	r2, #88	@ 0x58
 80028e2:	4b02      	ldr	r3, [pc, #8]	@ (80028ec <_getpid+0xc>)
 80028e4:	f04f 30ff 	mov.w	r0, #4294967295
 80028e8:	601a      	str	r2, [r3, #0]
 80028ea:	4770      	bx	lr
 80028ec:	200002b0 	.word	0x200002b0

080028f0 <_gettimeofday>:
 80028f0:	2258      	movs	r2, #88	@ 0x58
 80028f2:	4b02      	ldr	r3, [pc, #8]	@ (80028fc <_gettimeofday+0xc>)
 80028f4:	f04f 30ff 	mov.w	r0, #4294967295
 80028f8:	601a      	str	r2, [r3, #0]
 80028fa:	4770      	bx	lr
 80028fc:	200002b0 	.word	0x200002b0

08002900 <_isatty>:
 8002900:	2258      	movs	r2, #88	@ 0x58
 8002902:	4b02      	ldr	r3, [pc, #8]	@ (800290c <_isatty+0xc>)
 8002904:	2000      	movs	r0, #0
 8002906:	601a      	str	r2, [r3, #0]
 8002908:	4770      	bx	lr
 800290a:	bf00      	nop
 800290c:	200002b0 	.word	0x200002b0

08002910 <_kill>:
 8002910:	2258      	movs	r2, #88	@ 0x58
 8002912:	4b02      	ldr	r3, [pc, #8]	@ (800291c <_kill+0xc>)
 8002914:	f04f 30ff 	mov.w	r0, #4294967295
 8002918:	601a      	str	r2, [r3, #0]
 800291a:	4770      	bx	lr
 800291c:	200002b0 	.word	0x200002b0

08002920 <_lseek>:
 8002920:	2258      	movs	r2, #88	@ 0x58
 8002922:	4b02      	ldr	r3, [pc, #8]	@ (800292c <_lseek+0xc>)
 8002924:	f04f 30ff 	mov.w	r0, #4294967295
 8002928:	601a      	str	r2, [r3, #0]
 800292a:	4770      	bx	lr
 800292c:	200002b0 	.word	0x200002b0

08002930 <_read>:
 8002930:	2258      	movs	r2, #88	@ 0x58
 8002932:	4b02      	ldr	r3, [pc, #8]	@ (800293c <_read+0xc>)
 8002934:	f04f 30ff 	mov.w	r0, #4294967295
 8002938:	601a      	str	r2, [r3, #0]
 800293a:	4770      	bx	lr
 800293c:	200002b0 	.word	0x200002b0

08002940 <_sbrk>:
 8002940:	4a04      	ldr	r2, [pc, #16]	@ (8002954 <_sbrk+0x14>)
 8002942:	4603      	mov	r3, r0
 8002944:	6811      	ldr	r1, [r2, #0]
 8002946:	b909      	cbnz	r1, 800294c <_sbrk+0xc>
 8002948:	4903      	ldr	r1, [pc, #12]	@ (8002958 <_sbrk+0x18>)
 800294a:	6011      	str	r1, [r2, #0]
 800294c:	6810      	ldr	r0, [r2, #0]
 800294e:	4403      	add	r3, r0
 8002950:	6013      	str	r3, [r2, #0]
 8002952:	4770      	bx	lr
 8002954:	200002c0 	.word	0x200002c0
 8002958:	200002c8 	.word	0x200002c8

0800295c <_write>:
 800295c:	2258      	movs	r2, #88	@ 0x58
 800295e:	4b02      	ldr	r3, [pc, #8]	@ (8002968 <_write+0xc>)
 8002960:	f04f 30ff 	mov.w	r0, #4294967295
 8002964:	601a      	str	r2, [r3, #0]
 8002966:	4770      	bx	lr
 8002968:	200002b0 	.word	0x200002b0

0800296c <_exit>:
 800296c:	e7fe      	b.n	800296c <_exit>
	...

08002970 <_init>:
 8002970:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002972:	bf00      	nop
 8002974:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002976:	bc08      	pop	{r3}
 8002978:	469e      	mov	lr, r3
 800297a:	4770      	bx	lr

0800297c <_fini>:
 800297c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800297e:	bf00      	nop
 8002980:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002982:	bc08      	pop	{r3}
 8002984:	469e      	mov	lr, r3
 8002986:	4770      	bx	lr
